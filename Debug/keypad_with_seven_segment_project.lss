
keypad_with_seven_segment_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000379c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  0000379c  00003830  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800082  00800082  00003852  2**0
                  ALLOC
  3 .stab         00003af8  00000000  00000000  00003854  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001794  00000000  00000000  0000734c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008d90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a9d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b8c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c674  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c7d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ca61  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d22f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 59 09 	jmp	0x12b2	; 0x12b2 <__vector_4>
      14:	0c 94 86 09 	jmp	0x130c	; 0x130c <__vector_5>
      18:	0c 94 3c 07 	jmp	0xe78	; 0xe78 <__vector_6>
      1c:	0c 94 fd 07 	jmp	0xffa	; 0xffa <__vector_7>
      20:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <__vector_8>
      24:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__vector_9>
      28:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <__vector_10>
      2c:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e9       	ldi	r30, 0x9C	; 156
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <main>
      8a:	0c 94 cc 1b 	jmp	0x3798	; 0x3798 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 95 1b 	jmp	0x372a	; 0x372a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b1 1b 	jmp	0x3762	; 0x3762 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a1 1b 	jmp	0x3742	; 0x3742 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bd 1b 	jmp	0x377a	; 0x377a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a1 1b 	jmp	0x3742	; 0x3742 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bd 1b 	jmp	0x377a	; 0x377a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 95 1b 	jmp	0x372a	; 0x372a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b1 1b 	jmp	0x3762	; 0x3762 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a1 1b 	jmp	0x3742	; 0x3742 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 bd 1b 	jmp	0x377a	; 0x377a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a1 1b 	jmp	0x3742	; 0x3742 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 bd 1b 	jmp	0x377a	; 0x377a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a1 1b 	jmp	0x3742	; 0x3742 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 bd 1b 	jmp	0x377a	; 0x377a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a5 1b 	jmp	0x374a	; 0x374a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER0_VidInit>:
void (*TIMER0_CallBack)(void);
void (*TIMER1_CallBack)(void);
void (*TIMER2_CallBack)(void);
/*Timer0 Initialization*/
void TIMER0_VidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler */
	TCCR0&=0xF8;
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 7f       	andi	r24, 0xF8	; 248
     b5a:	8c 93       	st	X, r24
	TCCR0|=TIMER0_SET_PRESCALER;
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8c 93       	st	X, r24

#else
#error "TIMER0 PWM Mode is not valid..."
#endif
#elif TIMER0_SET_MODE == TIMER0_FAST_PWM_MODE
	SET_BIT(TCCR0,6);
     b68:	a3 e5       	ldi	r26, 0x53	; 83
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e3 e5       	ldi	r30, 0x53	; 83
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	80 64       	ori	r24, 0x40	; 64
     b74:	8c 93       	st	X, r24
	SET_BIT(TCCR0,3);
     b76:	a3 e5       	ldi	r26, 0x53	; 83
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e3 e5       	ldi	r30, 0x53	; 83
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	80 81       	ld	r24, Z
     b80:	88 60       	ori	r24, 0x08	; 8
     b82:	8c 93       	st	X, r24
	/*select TIMER0 FAST PWM_MODE mode */
#if TIMER0_SET_PWM_MODE == TIMER0_NUN_INVERTING_PWM
	        SET_BIT(TCCR0,1);
     b84:	a3 e5       	ldi	r26, 0x53	; 83
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	e3 e5       	ldi	r30, 0x53	; 83
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	82 60       	ori	r24, 0x02	; 2
     b90:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,0);
     b92:	a3 e5       	ldi	r26, 0x53	; 83
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e3 e5       	ldi	r30, 0x53	; 83
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	8e 7f       	andi	r24, 0xFE	; 254
     b9e:	8c 93       	st	X, r24
			CLR_BIT(TCCR0,4);
     ba0:	a3 e5       	ldi	r26, 0x53	; 83
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e3 e5       	ldi	r30, 0x53	; 83
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	8f 7e       	andi	r24, 0xEF	; 239
     bac:	8c 93       	st	X, r24
			SET_BIT(TCCR0,5);
     bae:	a3 e5       	ldi	r26, 0x53	; 83
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e3 e5       	ldi	r30, 0x53	; 83
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	80 62       	ori	r24, 0x20	; 32
     bba:	8c 93       	st	X, r24
#endif
#else
#error "TIMER0 Mode is not valid..."
#endif

}
     bbc:	cf 91       	pop	r28
     bbe:	df 91       	pop	r29
     bc0:	08 95       	ret

00000bc2 <TIMER0_VidSetPreload>:
/*Set Preload Function*/
void TIMER0_VidSetPreload(u8 Copy_u8Preload)
{
     bc2:	df 93       	push	r29
     bc4:	cf 93       	push	r28
     bc6:	0f 92       	push	r0
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Preload;
     bce:	e2 e5       	ldi	r30, 0x52	; 82
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	80 83       	st	Z, r24
}
     bd6:	0f 90       	pop	r0
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <TIMER0_VidSetCTCValue>:
/*Set CTC Value Function*/
void TIMER0_VidSetCTCValue(u8 Copy_u8CTCValue)
{
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	0f 92       	push	r0
     be4:	cd b7       	in	r28, 0x3d	; 61
     be6:	de b7       	in	r29, 0x3e	; 62
     be8:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8CTCValue;
     bea:	ec e5       	ldi	r30, 0x5C	; 92
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	80 83       	st	Z, r24
}
     bf2:	0f 90       	pop	r0
     bf4:	cf 91       	pop	r28
     bf6:	df 91       	pop	r29
     bf8:	08 95       	ret

00000bfa <TIMER0_VidOVF_SetCallBack>:
void TIMER0_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     bfa:	df 93       	push	r29
     bfc:	cf 93       	push	r28
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <TIMER0_VidOVF_SetCallBack+0x6>
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	9a 83       	std	Y+2, r25	; 0x02
     c06:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack=Copy_VidCallBack;
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	9a 81       	ldd	r25, Y+2	; 0x02
     c0c:	90 93 92 00 	sts	0x0092, r25
     c10:	80 93 91 00 	sts	0x0091, r24
}
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	cf 91       	pop	r28
     c1a:	df 91       	pop	r29
     c1c:	08 95       	ret

00000c1e <TIMER0_VidCTC_SetCallBack>:
void TIMER0_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
     c1e:	df 93       	push	r29
     c20:	cf 93       	push	r28
     c22:	00 d0       	rcall	.+0      	; 0xc24 <TIMER0_VidCTC_SetCallBack+0x6>
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	9a 83       	std	Y+2, r25	; 0x02
     c2a:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_CallBack=Copy_VidCallBack;
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	9a 81       	ldd	r25, Y+2	; 0x02
     c30:	90 93 92 00 	sts	0x0092, r25
     c34:	80 93 91 00 	sts	0x0091, r24
}
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	cf 91       	pop	r28
     c3e:	df 91       	pop	r29
     c40:	08 95       	ret

00000c42 <__vector_11>:
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
     c42:	1f 92       	push	r1
     c44:	0f 92       	push	r0
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	0f 92       	push	r0
     c4a:	11 24       	eor	r1, r1
     c4c:	2f 93       	push	r18
     c4e:	3f 93       	push	r19
     c50:	4f 93       	push	r20
     c52:	5f 93       	push	r21
     c54:	6f 93       	push	r22
     c56:	7f 93       	push	r23
     c58:	8f 93       	push	r24
     c5a:	9f 93       	push	r25
     c5c:	af 93       	push	r26
     c5e:	bf 93       	push	r27
     c60:	ef 93       	push	r30
     c62:	ff 93       	push	r31
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     c6c:	e0 91 91 00 	lds	r30, 0x0091
     c70:	f0 91 92 00 	lds	r31, 0x0092
     c74:	09 95       	icall
}
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	ff 91       	pop	r31
     c7c:	ef 91       	pop	r30
     c7e:	bf 91       	pop	r27
     c80:	af 91       	pop	r26
     c82:	9f 91       	pop	r25
     c84:	8f 91       	pop	r24
     c86:	7f 91       	pop	r23
     c88:	6f 91       	pop	r22
     c8a:	5f 91       	pop	r21
     c8c:	4f 91       	pop	r20
     c8e:	3f 91       	pop	r19
     c90:	2f 91       	pop	r18
     c92:	0f 90       	pop	r0
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	0f 90       	pop	r0
     c98:	1f 90       	pop	r1
     c9a:	18 95       	reti

00000c9c <__vector_10>:
void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
     c9c:	1f 92       	push	r1
     c9e:	0f 92       	push	r0
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	0f 92       	push	r0
     ca4:	11 24       	eor	r1, r1
     ca6:	2f 93       	push	r18
     ca8:	3f 93       	push	r19
     caa:	4f 93       	push	r20
     cac:	5f 93       	push	r21
     cae:	6f 93       	push	r22
     cb0:	7f 93       	push	r23
     cb2:	8f 93       	push	r24
     cb4:	9f 93       	push	r25
     cb6:	af 93       	push	r26
     cb8:	bf 93       	push	r27
     cba:	ef 93       	push	r30
     cbc:	ff 93       	push	r31
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
	TIMER0_CallBack();
     cc6:	e0 91 91 00 	lds	r30, 0x0091
     cca:	f0 91 92 00 	lds	r31, 0x0092
     cce:	09 95       	icall
}
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	ff 91       	pop	r31
     cd6:	ef 91       	pop	r30
     cd8:	bf 91       	pop	r27
     cda:	af 91       	pop	r26
     cdc:	9f 91       	pop	r25
     cde:	8f 91       	pop	r24
     ce0:	7f 91       	pop	r23
     ce2:	6f 91       	pop	r22
     ce4:	5f 91       	pop	r21
     ce6:	4f 91       	pop	r20
     ce8:	3f 91       	pop	r19
     cea:	2f 91       	pop	r18
     cec:	0f 90       	pop	r0
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	0f 90       	pop	r0
     cf2:	1f 90       	pop	r1
     cf4:	18 95       	reti

00000cf6 <TIMER1_VidInit>:
void TIMER1_VidInit(void)
{
     cf6:	df 93       	push	r29
     cf8:	cf 93       	push	r28
     cfa:	cd b7       	in	r28, 0x3d	; 61
     cfc:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler */
		TCCR1B&=0xF8;
     cfe:	ae e4       	ldi	r26, 0x4E	; 78
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ee e4       	ldi	r30, 0x4E	; 78
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	88 7f       	andi	r24, 0xF8	; 248
     d0a:	8c 93       	st	X, r24
		TCCR1B|=TIMER1_SET_PRESCALER;
     d0c:	ae e4       	ldi	r26, 0x4E	; 78
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	ee e4       	ldi	r30, 0x4E	; 78
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	81 60       	ori	r24, 0x01	; 1
     d18:	8c 93       	st	X, r24
#endif
#else
#error "TIMER1 Channel Mode is not valid.. "
#endif
#elif TIMER1_SET_MODE == TIMER1_CTC_MODE_WITH_OCR1A
	 CLR_BIT(TCCR1A,0);
     d1a:	af e4       	ldi	r26, 0x4F	; 79
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	ef e4       	ldi	r30, 0x4F	; 79
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	8e 7f       	andi	r24, 0xFE	; 254
     d26:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1A,1);
     d28:	af e4       	ldi	r26, 0x4F	; 79
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	ef e4       	ldi	r30, 0x4F	; 79
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	8d 7f       	andi	r24, 0xFD	; 253
     d34:	8c 93       	st	X, r24
	 SET_BIT(TCCR1B,3);
     d36:	ae e4       	ldi	r26, 0x4E	; 78
     d38:	b0 e0       	ldi	r27, 0x00	; 0
     d3a:	ee e4       	ldi	r30, 0x4E	; 78
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	80 81       	ld	r24, Z
     d40:	88 60       	ori	r24, 0x08	; 8
     d42:	8c 93       	st	X, r24
	 CLR_BIT(TCCR1B,4);
     d44:	ae e4       	ldi	r26, 0x4E	; 78
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	ee e4       	ldi	r30, 0x4E	; 78
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	8f 7e       	andi	r24, 0xEF	; 239
     d50:	8c 93       	st	X, r24
#if CHANNEL_MODE == CHANNELA
#if TIMER1_SET_CTC_INTERRUPT == TIMER1_CTC_INTERRUPT_ENABLED
	SET_BIT(TIMSK,4);
     d52:	a9 e5       	ldi	r26, 0x59	; 89
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e9 e5       	ldi	r30, 0x59	; 89
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	80 61       	ori	r24, 0x10	; 16
     d5e:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,4);
#else
#error "TIMER1 CTC Interrupt Mode is not valid..."
#endif
#if TIMER1_SET_OC1A_OR_OC1B_PIN_MODE == TIMER1_OC1A_OR_OC1B_PIN_DISCONNECTED
	   CLR_BIT(TCCR1A,6);
     d60:	af e4       	ldi	r26, 0x4F	; 79
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	ef e4       	ldi	r30, 0x4F	; 79
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	8f 7b       	andi	r24, 0xBF	; 191
     d6c:	8c 93       	st	X, r24
	   CLR_BIT(TCCR1A,7);
     d6e:	af e4       	ldi	r26, 0x4F	; 79
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	ef e4       	ldi	r30, 0x4F	; 79
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	8f 77       	andi	r24, 0x7F	; 127
     d7a:	8c 93       	st	X, r24
#endif
#else
#error "TIMER1 Mode is not valid..."
#endif

}
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <TIMER1_VidSetPreload>:
/*Set Preload Function*/
void TIMER1_VidSetPreload(u16 Copy_u16Preload)
{
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	00 d0       	rcall	.+0      	; 0xd88 <TIMER1_VidSetPreload+0x6>
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
     d8c:	9a 83       	std	Y+2, r25	; 0x02
     d8e:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Copy_u16Preload;
     d90:	ec e4       	ldi	r30, 0x4C	; 76
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	9a 81       	ldd	r25, Y+2	; 0x02
     d98:	91 83       	std	Z+1, r25	; 0x01
     d9a:	80 83       	st	Z, r24
}
     d9c:	0f 90       	pop	r0
     d9e:	0f 90       	pop	r0
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <TIMER1_VidSetTopValue>:
void TIMER1_VidSetTopValue(u16 Copy_u16TopValue)
{
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	00 d0       	rcall	.+0      	; 0xdac <TIMER1_VidSetTopValue+0x6>
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	9a 83       	std	Y+2, r25	; 0x02
     db2:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = Copy_u16TopValue;
     db4:	e6 e4       	ldi	r30, 0x46	; 70
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	91 83       	std	Z+1, r25	; 0x01
     dbe:	80 83       	st	Z, r24

}
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	08 95       	ret

00000dca <TIMER1_VidSetCTCValueCHA>:
void TIMER1_VidSetCTCValueCHA(u16 Copy_u16CTCValue)
{
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <TIMER1_VidSetCTCValueCHA+0x6>
     dd0:	cd b7       	in	r28, 0x3d	; 61
     dd2:	de b7       	in	r29, 0x3e	; 62
     dd4:	9a 83       	std	Y+2, r25	; 0x02
     dd6:	89 83       	std	Y+1, r24	; 0x01
	OCR1A =  Copy_u16CTCValue;
     dd8:	ea e4       	ldi	r30, 0x4A	; 74
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	9a 81       	ldd	r25, Y+2	; 0x02
     de0:	91 83       	std	Z+1, r25	; 0x01
     de2:	80 83       	st	Z, r24

}
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <TIMER1_VidSetCTCValueCHB>:
void TIMER1_VidSetCTCValueCHB(u16 Copy_u16CTCValue)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <TIMER1_VidSetCTCValueCHB+0x6>
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	OCR1B =  Copy_u16CTCValue;
     dfc:	e8 e4       	ldi	r30, 0x48	; 72
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	9a 81       	ldd	r25, Y+2	; 0x02
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	80 83       	st	Z, r24

}
     e08:	0f 90       	pop	r0
     e0a:	0f 90       	pop	r0
     e0c:	cf 91       	pop	r28
     e0e:	df 91       	pop	r29
     e10:	08 95       	ret

00000e12 <TIMER1_VidICUInit>:


void TIMER1_VidICUInit(void)
{
     e12:	df 93       	push	r29
     e14:	cf 93       	push	r28
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
#if ICU_Edge_Select == RISING_EDGE
	/*ICU Edge Select-->Rising edge*/
	SET_BIT(TCCR1B,6);
     e1a:	ae e4       	ldi	r26, 0x4E	; 78
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	ee e4       	ldi	r30, 0x4E	; 78
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	80 64       	ori	r24, 0x40	; 64
     e26:	8c 93       	st	X, r24
	/*TIMER OVERFLOW INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,2);
     e28:	a9 e5       	ldi	r26, 0x59	; 89
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e9 e5       	ldi	r30, 0x59	; 89
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	84 60       	ori	r24, 0x04	; 4
     e34:	8c 93       	st	X, r24
	/*ICU INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,5);
     e36:	a9 e5       	ldi	r26, 0x59	; 89
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e9 e5       	ldi	r30, 0x59	; 89
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 62       	ori	r24, 0x20	; 32
     e42:	8c 93       	st	X, r24
	/*ICU INTERRUPT ENABLLED*/
	SET_BIT(TIMSK,5);
#else
#error"ICU Edge Select is not valid...."
#endif
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <__vector_9>:
/* TIMER1 OVF */
void __vector_9(void)   __attribute__((signal));
void __vector_9(void)
{
     e4a:	1f 92       	push	r1
     e4c:	0f 92       	push	r0
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	0f 92       	push	r0
     e52:	11 24       	eor	r1, r1
     e54:	8f 93       	push	r24
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
	Count++;
     e5e:	80 91 82 00 	lds	r24, 0x0082
     e62:	8f 5f       	subi	r24, 0xFF	; 255
     e64:	80 93 82 00 	sts	0x0082, r24
}
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	8f 91       	pop	r24
     e6e:	0f 90       	pop	r0
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	0f 90       	pop	r0
     e74:	1f 90       	pop	r1
     e76:	18 95       	reti

00000e78 <__vector_6>:
/* TIMER1 CAPT */
void __vector_6(void)   __attribute__((signal));
void __vector_6(void)
{
     e78:	1f 92       	push	r1
     e7a:	0f 92       	push	r0
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	0f 92       	push	r0
     e80:	11 24       	eor	r1, r1
     e82:	2f 93       	push	r18
     e84:	3f 93       	push	r19
     e86:	4f 93       	push	r20
     e88:	5f 93       	push	r21
     e8a:	8f 93       	push	r24
     e8c:	9f 93       	push	r25
     e8e:	af 93       	push	r26
     e90:	bf 93       	push	r27
     e92:	ef 93       	push	r30
     e94:	ff 93       	push	r31
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
	if(Flag==0)
     e9e:	80 91 8f 00 	lds	r24, 0x008F
     ea2:	88 23       	and	r24, r24
     ea4:	39 f5       	brne	.+78     	; 0xef4 <__vector_6+0x7c>
		{
			T1=ICR1+Count*65536;
     ea6:	e6 e4       	ldi	r30, 0x46	; 70
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	91 81       	ldd	r25, Z+1	; 0x01
     eae:	9c 01       	movw	r18, r24
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	80 91 82 00 	lds	r24, 0x0082
     eb8:	88 2f       	mov	r24, r24
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	a0 e0       	ldi	r26, 0x00	; 0
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	dc 01       	movw	r26, r24
     ec2:	99 27       	eor	r25, r25
     ec4:	88 27       	eor	r24, r24
     ec6:	82 0f       	add	r24, r18
     ec8:	93 1f       	adc	r25, r19
     eca:	a4 1f       	adc	r26, r20
     ecc:	b5 1f       	adc	r27, r21
     ece:	80 93 83 00 	sts	0x0083, r24
     ed2:	90 93 84 00 	sts	0x0084, r25
     ed6:	a0 93 85 00 	sts	0x0085, r26
     eda:	b0 93 86 00 	sts	0x0086, r27
			/*ICU Sense with falling*/
			CLR_BIT(TCCR1B,6);
     ede:	ae e4       	ldi	r26, 0x4E	; 78
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	ee e4       	ldi	r30, 0x4E	; 78
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	8f 7b       	andi	r24, 0xBF	; 191
     eea:	8c 93       	st	X, r24
			Flag=1;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	80 93 8f 00 	sts	0x008F, r24
     ef2:	4e c0       	rjmp	.+156    	; 0xf90 <__vector_6+0x118>
		}
		else if(Flag==1)
     ef4:	80 91 8f 00 	lds	r24, 0x008F
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	39 f5       	brne	.+78     	; 0xf4a <__vector_6+0xd2>
		{
			T2=ICR1+Count*65536;
     efc:	e6 e4       	ldi	r30, 0x46	; 70
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	91 81       	ldd	r25, Z+1	; 0x01
     f04:	9c 01       	movw	r18, r24
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	50 e0       	ldi	r21, 0x00	; 0
     f0a:	80 91 82 00 	lds	r24, 0x0082
     f0e:	88 2f       	mov	r24, r24
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	a0 e0       	ldi	r26, 0x00	; 0
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	dc 01       	movw	r26, r24
     f18:	99 27       	eor	r25, r25
     f1a:	88 27       	eor	r24, r24
     f1c:	82 0f       	add	r24, r18
     f1e:	93 1f       	adc	r25, r19
     f20:	a4 1f       	adc	r26, r20
     f22:	b5 1f       	adc	r27, r21
     f24:	80 93 87 00 	sts	0x0087, r24
     f28:	90 93 88 00 	sts	0x0088, r25
     f2c:	a0 93 89 00 	sts	0x0089, r26
     f30:	b0 93 8a 00 	sts	0x008A, r27
			/*ICU Sense with Rising*/
			SET_BIT(TCCR1B,6);
     f34:	ae e4       	ldi	r26, 0x4E	; 78
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	ee e4       	ldi	r30, 0x4E	; 78
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	80 64       	ori	r24, 0x40	; 64
     f40:	8c 93       	st	X, r24
			Flag=2;
     f42:	82 e0       	ldi	r24, 0x02	; 2
     f44:	80 93 8f 00 	sts	0x008F, r24
     f48:	23 c0       	rjmp	.+70     	; 0xf90 <__vector_6+0x118>
		}
		else if(Flag==2)
     f4a:	80 91 8f 00 	lds	r24, 0x008F
     f4e:	82 30       	cpi	r24, 0x02	; 2
     f50:	f9 f4       	brne	.+62     	; 0xf90 <__vector_6+0x118>
		{
			T3=ICR1+Count*65536;
     f52:	e6 e4       	ldi	r30, 0x46	; 70
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	91 81       	ldd	r25, Z+1	; 0x01
     f5a:	9c 01       	movw	r18, r24
     f5c:	40 e0       	ldi	r20, 0x00	; 0
     f5e:	50 e0       	ldi	r21, 0x00	; 0
     f60:	80 91 82 00 	lds	r24, 0x0082
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a0 e0       	ldi	r26, 0x00	; 0
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	dc 01       	movw	r26, r24
     f6e:	99 27       	eor	r25, r25
     f70:	88 27       	eor	r24, r24
     f72:	82 0f       	add	r24, r18
     f74:	93 1f       	adc	r25, r19
     f76:	a4 1f       	adc	r26, r20
     f78:	b5 1f       	adc	r27, r21
     f7a:	80 93 8b 00 	sts	0x008B, r24
     f7e:	90 93 8c 00 	sts	0x008C, r25
     f82:	a0 93 8d 00 	sts	0x008D, r26
     f86:	b0 93 8e 00 	sts	0x008E, r27
			Flag=3;
     f8a:	83 e0       	ldi	r24, 0x03	; 3
     f8c:	80 93 8f 00 	sts	0x008F, r24
		}
}
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	ff 91       	pop	r31
     f96:	ef 91       	pop	r30
     f98:	bf 91       	pop	r27
     f9a:	af 91       	pop	r26
     f9c:	9f 91       	pop	r25
     f9e:	8f 91       	pop	r24
     fa0:	5f 91       	pop	r21
     fa2:	4f 91       	pop	r20
     fa4:	3f 91       	pop	r19
     fa6:	2f 91       	pop	r18
     fa8:	0f 90       	pop	r0
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	0f 90       	pop	r0
     fae:	1f 90       	pop	r1
     fb0:	18 95       	reti

00000fb2 <TIMER1_VidOVF_SetCallBack>:

void TIMER1_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <TIMER1_VidOVF_SetCallBack+0x6>
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	9a 83       	std	Y+2, r25	; 0x02
     fbe:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_CallBack=Copy_VidCallBack;
     fc0:	89 81       	ldd	r24, Y+1	; 0x01
     fc2:	9a 81       	ldd	r25, Y+2	; 0x02
     fc4:	90 93 96 00 	sts	0x0096, r25
     fc8:	80 93 95 00 	sts	0x0095, r24
}
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <TIMER1_VidCTC_SetCallBack>:

void TIMER1_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	00 d0       	rcall	.+0      	; 0xfdc <TIMER1_VidCTC_SetCallBack+0x6>
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	9a 83       	std	Y+2, r25	; 0x02
     fe2:	89 83       	std	Y+1, r24	; 0x01
	TIMER1_CallBack=Copy_VidCallBack;
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	9a 81       	ldd	r25, Y+2	; 0x02
     fe8:	90 93 96 00 	sts	0x0096, r25
     fec:	80 93 95 00 	sts	0x0095, r24
}
     ff0:	0f 90       	pop	r0
     ff2:	0f 90       	pop	r0
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <__vector_7>:
/* TIMER1 COMPA */
void __vector_7(void)   __attribute__((signal));
void __vector_7(void)
{
     ffa:	1f 92       	push	r1
     ffc:	0f 92       	push	r0
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	0f 92       	push	r0
    1002:	11 24       	eor	r1, r1
    1004:	2f 93       	push	r18
    1006:	3f 93       	push	r19
    1008:	4f 93       	push	r20
    100a:	5f 93       	push	r21
    100c:	6f 93       	push	r22
    100e:	7f 93       	push	r23
    1010:	8f 93       	push	r24
    1012:	9f 93       	push	r25
    1014:	af 93       	push	r26
    1016:	bf 93       	push	r27
    1018:	ef 93       	push	r30
    101a:	ff 93       	push	r31
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
	TIMER1_CallBack();
    1024:	e0 91 95 00 	lds	r30, 0x0095
    1028:	f0 91 96 00 	lds	r31, 0x0096
    102c:	09 95       	icall
}
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	ff 91       	pop	r31
    1034:	ef 91       	pop	r30
    1036:	bf 91       	pop	r27
    1038:	af 91       	pop	r26
    103a:	9f 91       	pop	r25
    103c:	8f 91       	pop	r24
    103e:	7f 91       	pop	r23
    1040:	6f 91       	pop	r22
    1042:	5f 91       	pop	r21
    1044:	4f 91       	pop	r20
    1046:	3f 91       	pop	r19
    1048:	2f 91       	pop	r18
    104a:	0f 90       	pop	r0
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	0f 90       	pop	r0
    1050:	1f 90       	pop	r1
    1052:	18 95       	reti

00001054 <__vector_8>:
/*  TIMER1 COMPB */
void __vector_8(void)   __attribute__((signal));
void __vector_8(void)
{
    1054:	1f 92       	push	r1
    1056:	0f 92       	push	r0
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	0f 92       	push	r0
    105c:	11 24       	eor	r1, r1
    105e:	2f 93       	push	r18
    1060:	3f 93       	push	r19
    1062:	4f 93       	push	r20
    1064:	5f 93       	push	r21
    1066:	6f 93       	push	r22
    1068:	7f 93       	push	r23
    106a:	8f 93       	push	r24
    106c:	9f 93       	push	r25
    106e:	af 93       	push	r26
    1070:	bf 93       	push	r27
    1072:	ef 93       	push	r30
    1074:	ff 93       	push	r31
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
	TIMER1_CallBack();
    107e:	e0 91 95 00 	lds	r30, 0x0095
    1082:	f0 91 96 00 	lds	r31, 0x0096
    1086:	09 95       	icall
}
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	ff 91       	pop	r31
    108e:	ef 91       	pop	r30
    1090:	bf 91       	pop	r27
    1092:	af 91       	pop	r26
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	7f 91       	pop	r23
    109a:	6f 91       	pop	r22
    109c:	5f 91       	pop	r21
    109e:	4f 91       	pop	r20
    10a0:	3f 91       	pop	r19
    10a2:	2f 91       	pop	r18
    10a4:	0f 90       	pop	r0
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	0f 90       	pop	r0
    10aa:	1f 90       	pop	r1
    10ac:	18 95       	reti

000010ae <TIMER1_VidCompute_Freq_And_Duty>:
void TIMER1_VidCompute_Freq_And_Duty(u32 *Copy_u32Freq,u8 *Copy_u8DutyCycle)
{
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <TIMER1_VidCompute_Freq_And_Duty+0xe>
    10bc:	00 d0       	rcall	.+0      	; 0x10be <TIMER1_VidCompute_Freq_And_Duty+0x10>
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
    10c2:	9a 83       	std	Y+2, r25	; 0x02
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	7c 83       	std	Y+4, r23	; 0x04
    10c8:	6b 83       	std	Y+3, r22	; 0x03
	if(Flag==3)
    10ca:	80 91 8f 00 	lds	r24, 0x008F
    10ce:	83 30       	cpi	r24, 0x03	; 3
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <TIMER1_VidCompute_Freq_And_Duty+0x26>
    10d2:	66 c0       	rjmp	.+204    	; 0x11a0 <TIMER1_VidCompute_Freq_And_Duty+0xf2>
	{
		*Copy_u32Freq = (1000000/(T3-T1));
    10d4:	20 91 8b 00 	lds	r18, 0x008B
    10d8:	30 91 8c 00 	lds	r19, 0x008C
    10dc:	40 91 8d 00 	lds	r20, 0x008D
    10e0:	50 91 8e 00 	lds	r21, 0x008E
    10e4:	80 91 83 00 	lds	r24, 0x0083
    10e8:	90 91 84 00 	lds	r25, 0x0084
    10ec:	a0 91 85 00 	lds	r26, 0x0085
    10f0:	b0 91 86 00 	lds	r27, 0x0086
    10f4:	28 1b       	sub	r18, r24
    10f6:	39 0b       	sbc	r19, r25
    10f8:	4a 0b       	sbc	r20, r26
    10fa:	5b 0b       	sbc	r21, r27
    10fc:	80 e4       	ldi	r24, 0x40	; 64
    10fe:	92 e4       	ldi	r25, 0x42	; 66
    1100:	af e0       	ldi	r26, 0x0F	; 15
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	bc 01       	movw	r22, r24
    1106:	cd 01       	movw	r24, r26
    1108:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__udivmodsi4>
    110c:	da 01       	movw	r26, r20
    110e:	c9 01       	movw	r24, r18
    1110:	e9 81       	ldd	r30, Y+1	; 0x01
    1112:	fa 81       	ldd	r31, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	91 83       	std	Z+1, r25	; 0x01
    1118:	a2 83       	std	Z+2, r26	; 0x02
    111a:	b3 83       	std	Z+3, r27	; 0x03
		*Copy_u8DutyCycle = ((T2-T1)*100)/(T3-T1);
    111c:	20 91 87 00 	lds	r18, 0x0087
    1120:	30 91 88 00 	lds	r19, 0x0088
    1124:	40 91 89 00 	lds	r20, 0x0089
    1128:	50 91 8a 00 	lds	r21, 0x008A
    112c:	80 91 83 00 	lds	r24, 0x0083
    1130:	90 91 84 00 	lds	r25, 0x0084
    1134:	a0 91 85 00 	lds	r26, 0x0085
    1138:	b0 91 86 00 	lds	r27, 0x0086
    113c:	79 01       	movw	r14, r18
    113e:	8a 01       	movw	r16, r20
    1140:	e8 1a       	sub	r14, r24
    1142:	f9 0a       	sbc	r15, r25
    1144:	0a 0b       	sbc	r16, r26
    1146:	1b 0b       	sbc	r17, r27
    1148:	d8 01       	movw	r26, r16
    114a:	c7 01       	movw	r24, r14
    114c:	24 e6       	ldi	r18, 0x64	; 100
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e0       	ldi	r20, 0x00	; 0
    1152:	50 e0       	ldi	r21, 0x00	; 0
    1154:	bc 01       	movw	r22, r24
    1156:	cd 01       	movw	r24, r26
    1158:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <__mulsi3>
    115c:	7b 01       	movw	r14, r22
    115e:	8c 01       	movw	r16, r24
    1160:	20 91 8b 00 	lds	r18, 0x008B
    1164:	30 91 8c 00 	lds	r19, 0x008C
    1168:	40 91 8d 00 	lds	r20, 0x008D
    116c:	50 91 8e 00 	lds	r21, 0x008E
    1170:	80 91 83 00 	lds	r24, 0x0083
    1174:	90 91 84 00 	lds	r25, 0x0084
    1178:	a0 91 85 00 	lds	r26, 0x0085
    117c:	b0 91 86 00 	lds	r27, 0x0086
    1180:	28 1b       	sub	r18, r24
    1182:	39 0b       	sbc	r19, r25
    1184:	4a 0b       	sbc	r20, r26
    1186:	5b 0b       	sbc	r21, r27
    1188:	c8 01       	movw	r24, r16
    118a:	b7 01       	movw	r22, r14
    118c:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__udivmodsi4>
    1190:	da 01       	movw	r26, r20
    1192:	c9 01       	movw	r24, r18
    1194:	eb 81       	ldd	r30, Y+3	; 0x03
    1196:	fc 81       	ldd	r31, Y+4	; 0x04
    1198:	80 83       	st	Z, r24
		Flag=4;
    119a:	84 e0       	ldi	r24, 0x04	; 4
    119c:	80 93 8f 00 	sts	0x008F, r24
	}

}
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	ff 90       	pop	r15
    11b2:	ef 90       	pop	r14
    11b4:	08 95       	ret

000011b6 <TIMER2_VidInit>:
void TIMER2_VidInit(void)
{
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
	/*Select the suitable Prescaler */
		TCCR2&=0xF8;
    11be:	a5 e4       	ldi	r26, 0x45	; 69
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e5 e4       	ldi	r30, 0x45	; 69
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	88 7f       	andi	r24, 0xF8	; 248
    11ca:	8c 93       	st	X, r24
		TCCR2|=TIMER2_SET_PRESCALER;
    11cc:	a5 e4       	ldi	r26, 0x45	; 69
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e5 e4       	ldi	r30, 0x45	; 69
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	8c 93       	st	X, r24

	#else
	#error "TIMER2 PWM Mode is not valid..."
	#endif
	#elif TIMER2_SET_MODE == TIMER2_FAST_PWM_MODE
		SET_BIT(TCCR2,6);
    11d8:	a5 e4       	ldi	r26, 0x45	; 69
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e5 e4       	ldi	r30, 0x45	; 69
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	80 64       	ori	r24, 0x40	; 64
    11e4:	8c 93       	st	X, r24
		SET_BIT(TCCR2,3);
    11e6:	a5 e4       	ldi	r26, 0x45	; 69
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e5 e4       	ldi	r30, 0x45	; 69
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	88 60       	ori	r24, 0x08	; 8
    11f2:	8c 93       	st	X, r24
		/*select TIMER2 FAST PWM_MODE mode */
	#if TIMER2_SET_PWM_MODE == TIMER2_NUN_INVERTING_PWM
		        SET_BIT(TCCR2,1);
    11f4:	a5 e4       	ldi	r26, 0x45	; 69
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e5 e4       	ldi	r30, 0x45	; 69
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	82 60       	ori	r24, 0x02	; 2
    1200:	8c 93       	st	X, r24
				CLR_BIT(TCCR2,0);
    1202:	a5 e4       	ldi	r26, 0x45	; 69
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e5 e4       	ldi	r30, 0x45	; 69
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	8e 7f       	andi	r24, 0xFE	; 254
    120e:	8c 93       	st	X, r24
				CLR_BIT(TCCR2,4);
    1210:	a5 e4       	ldi	r26, 0x45	; 69
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e5 e4       	ldi	r30, 0x45	; 69
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	8f 7e       	andi	r24, 0xEF	; 239
    121c:	8c 93       	st	X, r24
				SET_BIT(TCCR2,5);
    121e:	a5 e4       	ldi	r26, 0x45	; 69
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	e5 e4       	ldi	r30, 0x45	; 69
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	80 62       	ori	r24, 0x20	; 32
    122a:	8c 93       	st	X, r24
	#error "TIMER2 Mode is not valid..."
	#endif



}
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <TIMER2_VidSetPreload>:
/*Set Preload Function*/
void TIMER2_VidSetPreload(u8 Copy_u8Preload)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	0f 92       	push	r0
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=Copy_u8Preload;
    123e:	e4 e4       	ldi	r30, 0x44	; 68
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	80 83       	st	Z, r24
}
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <TIMER2_VidSetCTCValue>:
/*Set CTC Value Function*/
void TIMER2_VidSetCTCValue(u8 Copy_u8CTCValue)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	0f 92       	push	r0
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	89 83       	std	Y+1, r24	; 0x01
	OCR2=Copy_u8CTCValue;
    125a:	e3 e4       	ldi	r30, 0x43	; 67
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	80 83       	st	Z, r24
}
    1262:	0f 90       	pop	r0
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <TIMER2_VidOVF_SetCallBack>:
void TIMER2_VidOVF_SetCallBack(void(*Copy_VidCallBack)(void))
{
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	00 d0       	rcall	.+0      	; 0x1270 <TIMER2_VidOVF_SetCallBack+0x6>
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	9a 83       	std	Y+2, r25	; 0x02
    1276:	89 83       	std	Y+1, r24	; 0x01
	TIMER2_CallBack=Copy_VidCallBack;
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	9a 81       	ldd	r25, Y+2	; 0x02
    127c:	90 93 94 00 	sts	0x0094, r25
    1280:	80 93 93 00 	sts	0x0093, r24
}
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <TIMER2_VidCTC_SetCallBack>:
void TIMER2_VidCTC_SetCallBack(void(*Copy_VidCallBack)(void))
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <TIMER2_VidCTC_SetCallBack+0x6>
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	9a 83       	std	Y+2, r25	; 0x02
    129a:	89 83       	std	Y+1, r24	; 0x01
	TIMER2_CallBack=Copy_VidCallBack;
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	9a 81       	ldd	r25, Y+2	; 0x02
    12a0:	90 93 94 00 	sts	0x0094, r25
    12a4:	80 93 93 00 	sts	0x0093, r24
}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <__vector_4>:
void __vector_4(void)   __attribute__((signal));
void __vector_4(void)
{
    12b2:	1f 92       	push	r1
    12b4:	0f 92       	push	r0
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	0f 92       	push	r0
    12ba:	11 24       	eor	r1, r1
    12bc:	2f 93       	push	r18
    12be:	3f 93       	push	r19
    12c0:	4f 93       	push	r20
    12c2:	5f 93       	push	r21
    12c4:	6f 93       	push	r22
    12c6:	7f 93       	push	r23
    12c8:	8f 93       	push	r24
    12ca:	9f 93       	push	r25
    12cc:	af 93       	push	r26
    12ce:	bf 93       	push	r27
    12d0:	ef 93       	push	r30
    12d2:	ff 93       	push	r31
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
	TIMER2_CallBack();
    12dc:	e0 91 93 00 	lds	r30, 0x0093
    12e0:	f0 91 94 00 	lds	r31, 0x0094
    12e4:	09 95       	icall
}
    12e6:	cf 91       	pop	r28
    12e8:	df 91       	pop	r29
    12ea:	ff 91       	pop	r31
    12ec:	ef 91       	pop	r30
    12ee:	bf 91       	pop	r27
    12f0:	af 91       	pop	r26
    12f2:	9f 91       	pop	r25
    12f4:	8f 91       	pop	r24
    12f6:	7f 91       	pop	r23
    12f8:	6f 91       	pop	r22
    12fa:	5f 91       	pop	r21
    12fc:	4f 91       	pop	r20
    12fe:	3f 91       	pop	r19
    1300:	2f 91       	pop	r18
    1302:	0f 90       	pop	r0
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	0f 90       	pop	r0
    1308:	1f 90       	pop	r1
    130a:	18 95       	reti

0000130c <__vector_5>:
/*timer2 OV*/
void __vector_5(void)   __attribute__((signal));
void __vector_5(void)
{
    130c:	1f 92       	push	r1
    130e:	0f 92       	push	r0
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	0f 92       	push	r0
    1314:	11 24       	eor	r1, r1
    1316:	2f 93       	push	r18
    1318:	3f 93       	push	r19
    131a:	4f 93       	push	r20
    131c:	5f 93       	push	r21
    131e:	6f 93       	push	r22
    1320:	7f 93       	push	r23
    1322:	8f 93       	push	r24
    1324:	9f 93       	push	r25
    1326:	af 93       	push	r26
    1328:	bf 93       	push	r27
    132a:	ef 93       	push	r30
    132c:	ff 93       	push	r31
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
	TIMER2_CallBack();
    1336:	e0 91 93 00 	lds	r30, 0x0093
    133a:	f0 91 94 00 	lds	r31, 0x0094
    133e:	09 95       	icall
}
    1340:	cf 91       	pop	r28
    1342:	df 91       	pop	r29
    1344:	ff 91       	pop	r31
    1346:	ef 91       	pop	r30
    1348:	bf 91       	pop	r27
    134a:	af 91       	pop	r26
    134c:	9f 91       	pop	r25
    134e:	8f 91       	pop	r24
    1350:	7f 91       	pop	r23
    1352:	6f 91       	pop	r22
    1354:	5f 91       	pop	r21
    1356:	4f 91       	pop	r20
    1358:	3f 91       	pop	r19
    135a:	2f 91       	pop	r18
    135c:	0f 90       	pop	r0
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	0f 90       	pop	r0
    1362:	1f 90       	pop	r1
    1364:	18 95       	reti

00001366 <MGIE_VidEnable>:

#include"MGIE_Private.h"

/*GIE Enable Function*/
void MGIE_VidEnable(void)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
    136e:	af e5       	ldi	r26, 0x5F	; 95
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	ef e5       	ldi	r30, 0x5F	; 95
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	80 68       	ori	r24, 0x80	; 128
    137a:	8c 93       	st	X, r24
}
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <MGIE_VidDisable>:
/*GIE Disable Function*/
void MGIE_VidDisable(void)
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
    138a:	af e5       	ldi	r26, 0x5F	; 95
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	ef e5       	ldi	r30, 0x5F	; 95
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	8f 77       	andi	r24, 0x7F	; 127
    1396:	8c 93       	st	X, r24
}
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <MEXTI0_VidInit>:

void (*CallBackFunction)(void);

/* EXTI0 Initialization*/
void MEXTI0_VidInit(void)
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_ANY_LOGICAL_CHANGE
	SET_BIT(MCUCR,0);
	CLR_BIT(MCUCR,1);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,0);
    13a6:	a5 e5       	ldi	r26, 0x55	; 85
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	e5 e5       	ldi	r30, 0x55	; 85
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	8e 7f       	andi	r24, 0xFE	; 254
    13b2:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
    13b4:	a5 e5       	ldi	r26, 0x55	; 85
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	e5 e5       	ldi	r30, 0x55	; 85
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	82 60       	ori	r24, 0x02	; 2
    13c0:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI0*/
	SET_BIT(GICR,6);
    13c2:	ab e5       	ldi	r26, 0x5B	; 91
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	eb e5       	ldi	r30, 0x5B	; 91
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	80 64       	ori	r24, 0x40	; 64
    13ce:	8c 93       	st	X, r24
}
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <MEXTI1_VidInit>:
/* EXTI1 Initialization*/
void MEXTI1_VidInit(void)
{
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_ANY_LOGICAL_CHANGE
	SET_BIT(MCUCR,2);
	CLR_BIT(MCUCR,3);
#elif MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCR,2);
    13de:	a5 e5       	ldi	r26, 0x55	; 85
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e5 e5       	ldi	r30, 0x55	; 85
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	8b 7f       	andi	r24, 0xFB	; 251
    13ea:	8c 93       	st	X, r24
	SET_BIT(MCUCR,3);
    13ec:	a5 e5       	ldi	r26, 0x55	; 85
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	e5 e5       	ldi	r30, 0x55	; 85
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	88 60       	ori	r24, 0x08	; 8
    13f8:	8c 93       	st	X, r24
	SET_BIT(MCUCR,3);
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI1*/
	SET_BIT(GICR,7);
    13fa:	ab e5       	ldi	r26, 0x5B	; 91
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	eb e5       	ldi	r30, 0x5B	; 91
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	80 68       	ori	r24, 0x80	; 128
    1406:	8c 93       	st	X, r24
}
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <MEXTI2_VidInit>:
/* EXTI2 Initialization*/
void MEXTI2_VidInit(void)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
	/*Select Sense Control*/

#if MEXTI_SET_SENSE_CONTROL==MEXTI_FALLING_EDGE
	CLR_BIT(MCUCSR,6);
    1416:	a4 e5       	ldi	r26, 0x54	; 84
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	e4 e5       	ldi	r30, 0x54	; 84
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	8f 7b       	andi	r24, 0xBF	; 191
    1422:	8c 93       	st	X, r24
	SET_BIT(MCUCSR,6);
#else
	#error"Sense Control Option is not valid"
#endif
	/*Enable to EXTI2*/
	SET_BIT(GICR,5);
    1424:	ab e5       	ldi	r26, 0x5B	; 91
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	eb e5       	ldi	r30, 0x5B	; 91
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	80 62       	ori	r24, 0x20	; 32
    1430:	8c 93       	st	X, r24
}
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <MEXTI_VidSenseControl>:
/*select sense control Function*/
void MEXTI_VidSenseControl(u8 Copy_u8EXTI_ID,u8 Copy_u8SenseControl)
{
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	00 d0       	rcall	.+0      	; 0x143e <MEXTI_VidSenseControl+0x6>
    143e:	00 d0       	rcall	.+0      	; 0x1440 <MEXTI_VidSenseControl+0x8>
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8EXTI_ID)
    1448:	89 81       	ldd	r24, Y+1	; 0x01
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	3c 83       	std	Y+4, r19	; 0x04
    1450:	2b 83       	std	Y+3, r18	; 0x03
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	9c 81       	ldd	r25, Y+4	; 0x04
    1456:	81 30       	cpi	r24, 0x01	; 1
    1458:	91 05       	cpc	r25, r1
    145a:	09 f4       	brne	.+2      	; 0x145e <MEXTI_VidSenseControl+0x26>
    145c:	54 c0       	rjmp	.+168    	; 0x1506 <MEXTI_VidSenseControl+0xce>
    145e:	2b 81       	ldd	r18, Y+3	; 0x03
    1460:	3c 81       	ldd	r19, Y+4	; 0x04
    1462:	22 30       	cpi	r18, 0x02	; 2
    1464:	31 05       	cpc	r19, r1
    1466:	09 f4       	brne	.+2      	; 0x146a <MEXTI_VidSenseControl+0x32>
    1468:	96 c0       	rjmp	.+300    	; 0x1596 <MEXTI_VidSenseControl+0x15e>
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	9c 81       	ldd	r25, Y+4	; 0x04
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	09 f0       	breq	.+2      	; 0x1474 <MEXTI_VidSenseControl+0x3c>
    1472:	a6 c0       	rjmp	.+332    	; 0x15c0 <MEXTI_VidSenseControl+0x188>
	{
	case EXTI0:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	88 23       	and	r24, r24
    1478:	79 f4       	brne	.+30     	; 0x1498 <MEXTI_VidSenseControl+0x60>
		{
			CLR_BIT(MCUCR,0);
    147a:	a5 e5       	ldi	r26, 0x55	; 85
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e5 e5       	ldi	r30, 0x55	; 85
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8e 7f       	andi	r24, 0xFE	; 254
    1486:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    1488:	a5 e5       	ldi	r26, 0x55	; 85
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	e5 e5       	ldi	r30, 0x55	; 85
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	8d 7f       	andi	r24, 0xFD	; 253
    1494:	8c 93       	st	X, r24
    1496:	94 c0       	rjmp	.+296    	; 0x15c0 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	81 30       	cpi	r24, 0x01	; 1
    149c:	79 f4       	brne	.+30     	; 0x14bc <MEXTI_VidSenseControl+0x84>
		{
			SET_BIT(MCUCR,0);
    149e:	a5 e5       	ldi	r26, 0x55	; 85
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e5 e5       	ldi	r30, 0x55	; 85
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	81 60       	ori	r24, 0x01	; 1
    14aa:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,1);
    14ac:	a5 e5       	ldi	r26, 0x55	; 85
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e5 e5       	ldi	r30, 0x55	; 85
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	8d 7f       	andi	r24, 0xFD	; 253
    14b8:	8c 93       	st	X, r24
    14ba:	82 c0       	rjmp	.+260    	; 0x15c0 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	82 30       	cpi	r24, 0x02	; 2
    14c0:	79 f4       	brne	.+30     	; 0x14e0 <MEXTI_VidSenseControl+0xa8>
		{
			CLR_BIT(MCUCR,0);
    14c2:	a5 e5       	ldi	r26, 0x55	; 85
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e5 e5       	ldi	r30, 0x55	; 85
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	8e 7f       	andi	r24, 0xFE	; 254
    14ce:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    14d0:	a5 e5       	ldi	r26, 0x55	; 85
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e5 e5       	ldi	r30, 0x55	; 85
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	82 60       	ori	r24, 0x02	; 2
    14dc:	8c 93       	st	X, r24
    14de:	70 c0       	rjmp	.+224    	; 0x15c0 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	83 30       	cpi	r24, 0x03	; 3
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <MEXTI_VidSenseControl+0xb0>
    14e6:	6c c0       	rjmp	.+216    	; 0x15c0 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,0);
    14e8:	a5 e5       	ldi	r26, 0x55	; 85
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e5 e5       	ldi	r30, 0x55	; 85
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	81 60       	ori	r24, 0x01	; 1
    14f4:	8c 93       	st	X, r24
			SET_BIT(MCUCR,1);
    14f6:	a5 e5       	ldi	r26, 0x55	; 85
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e5 e5       	ldi	r30, 0x55	; 85
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	82 60       	ori	r24, 0x02	; 2
    1502:	8c 93       	st	X, r24
    1504:	5d c0       	rjmp	.+186    	; 0x15c0 <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI1:
		if(Copy_u8SenseControl==MEXTI_LOW_LEVEL)
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	88 23       	and	r24, r24
    150a:	79 f4       	brne	.+30     	; 0x152a <MEXTI_VidSenseControl+0xf2>
		{
			CLR_BIT(MCUCR,2);
    150c:	a5 e5       	ldi	r26, 0x55	; 85
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e5 e5       	ldi	r30, 0x55	; 85
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	8b 7f       	andi	r24, 0xFB	; 251
    1518:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    151a:	a5 e5       	ldi	r26, 0x55	; 85
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e5 e5       	ldi	r30, 0x55	; 85
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	87 7f       	andi	r24, 0xF7	; 247
    1526:	8c 93       	st	X, r24
    1528:	4b c0       	rjmp	.+150    	; 0x15c0 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_ANY_LOGICAL_CHANGE)
    152a:	8a 81       	ldd	r24, Y+2	; 0x02
    152c:	81 30       	cpi	r24, 0x01	; 1
    152e:	79 f4       	brne	.+30     	; 0x154e <MEXTI_VidSenseControl+0x116>
		{
			SET_BIT(MCUCR,2);
    1530:	a5 e5       	ldi	r26, 0x55	; 85
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e5 e5       	ldi	r30, 0x55	; 85
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	84 60       	ori	r24, 0x04	; 4
    153c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,3);
    153e:	a5 e5       	ldi	r26, 0x55	; 85
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e5 e5       	ldi	r30, 0x55	; 85
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	87 7f       	andi	r24, 0xF7	; 247
    154a:	8c 93       	st	X, r24
    154c:	39 c0       	rjmp	.+114    	; 0x15c0 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	82 30       	cpi	r24, 0x02	; 2
    1552:	79 f4       	brne	.+30     	; 0x1572 <MEXTI_VidSenseControl+0x13a>
		{
			CLR_BIT(MCUCR,2);
    1554:	a5 e5       	ldi	r26, 0x55	; 85
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e5 e5       	ldi	r30, 0x55	; 85
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	8b 7f       	andi	r24, 0xFB	; 251
    1560:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    1562:	a5 e5       	ldi	r26, 0x55	; 85
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e5 e5       	ldi	r30, 0x55	; 85
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	88 60       	ori	r24, 0x08	; 8
    156e:	8c 93       	st	X, r24
    1570:	27 c0       	rjmp	.+78     	; 0x15c0 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	83 30       	cpi	r24, 0x03	; 3
    1576:	21 f5       	brne	.+72     	; 0x15c0 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCR,2);
    1578:	a5 e5       	ldi	r26, 0x55	; 85
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e5 e5       	ldi	r30, 0x55	; 85
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	84 60       	ori	r24, 0x04	; 4
    1584:	8c 93       	st	X, r24
			SET_BIT(MCUCR,3);
    1586:	a5 e5       	ldi	r26, 0x55	; 85
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e5 e5       	ldi	r30, 0x55	; 85
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	88 60       	ori	r24, 0x08	; 8
    1592:	8c 93       	st	X, r24
    1594:	15 c0       	rjmp	.+42     	; 0x15c0 <MEXTI_VidSenseControl+0x188>
		{
			/*Do Nothing*/
		}
		break;
	case EXTI2:
		if(Copy_u8SenseControl==MEXTI_FALLING_EDGE)
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	82 30       	cpi	r24, 0x02	; 2
    159a:	41 f4       	brne	.+16     	; 0x15ac <MEXTI_VidSenseControl+0x174>
		{
			CLR_BIT(MCUCSR,6);
    159c:	a4 e5       	ldi	r26, 0x54	; 84
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e4 e5       	ldi	r30, 0x54	; 84
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	8f 7b       	andi	r24, 0xBF	; 191
    15a8:	8c 93       	st	X, r24
    15aa:	0a c0       	rjmp	.+20     	; 0x15c0 <MEXTI_VidSenseControl+0x188>
		}
		else if(Copy_u8SenseControl==MEXTI_RISING_EDGE)
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	83 30       	cpi	r24, 0x03	; 3
    15b0:	39 f4       	brne	.+14     	; 0x15c0 <MEXTI_VidSenseControl+0x188>
		{
			SET_BIT(MCUCSR,6);
    15b2:	a4 e5       	ldi	r26, 0x54	; 84
    15b4:	b0 e0       	ldi	r27, 0x00	; 0
    15b6:	e4 e5       	ldi	r30, 0x54	; 84
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	80 81       	ld	r24, Z
    15bc:	80 64       	ori	r24, 0x40	; 64
    15be:	8c 93       	st	X, r24
		{
			/*Do Nothing*/
		}
		break;
	}
}
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	08 95       	ret

000015ce <EXTI0_Set_CallBackFunction>:

void EXTI0_Set_CallBackFunction(void (*Copy_CallBackFunction)(void))
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <EXTI0_Set_CallBackFunction+0x6>
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
    15d8:	9a 83       	std	Y+2, r25	; 0x02
    15da:	89 83       	std	Y+1, r24	; 0x01
	CallBackFunction=Copy_CallBackFunction;
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	9a 81       	ldd	r25, Y+2	; 0x02
    15e0:	90 93 98 00 	sts	0x0098, r25
    15e4:	80 93 97 00 	sts	0x0097, r24
}
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	cf 91       	pop	r28
    15ee:	df 91       	pop	r29
    15f0:	08 95       	ret

000015f2 <__vector_1>:
void __vector_1(void)       __attribute__((signal));
void __vector_1(void)
{
    15f2:	1f 92       	push	r1
    15f4:	0f 92       	push	r0
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	0f 92       	push	r0
    15fa:	11 24       	eor	r1, r1
    15fc:	2f 93       	push	r18
    15fe:	3f 93       	push	r19
    1600:	4f 93       	push	r20
    1602:	5f 93       	push	r21
    1604:	6f 93       	push	r22
    1606:	7f 93       	push	r23
    1608:	8f 93       	push	r24
    160a:	9f 93       	push	r25
    160c:	af 93       	push	r26
    160e:	bf 93       	push	r27
    1610:	ef 93       	push	r30
    1612:	ff 93       	push	r31
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
	CallBackFunction();
    161c:	e0 91 97 00 	lds	r30, 0x0097
    1620:	f0 91 98 00 	lds	r31, 0x0098
    1624:	09 95       	icall
	//HLED_VidLed_Toggle(&LED1);
}
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	ff 91       	pop	r31
    162c:	ef 91       	pop	r30
    162e:	bf 91       	pop	r27
    1630:	af 91       	pop	r26
    1632:	9f 91       	pop	r25
    1634:	8f 91       	pop	r24
    1636:	7f 91       	pop	r23
    1638:	6f 91       	pop	r22
    163a:	5f 91       	pop	r21
    163c:	4f 91       	pop	r20
    163e:	3f 91       	pop	r19
    1640:	2f 91       	pop	r18
    1642:	0f 90       	pop	r0
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	0f 90       	pop	r0
    1648:	1f 90       	pop	r1
    164a:	18 95       	reti

0000164c <MDIO_Error_State_SetPinDirection>:
#include"MDIO_Private.h"
#include"MDIO_Interface.h"

/*Set Pin Direction Function */
Error_State MDIO_Error_State_SetPinDirection(u8 Copy_u8PinNumber,u8  Copy_u8PortNumber,u8 Copy_u8PinDirection)
{
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	00 d0       	rcall	.+0      	; 0x1652 <MDIO_Error_State_SetPinDirection+0x6>
    1652:	00 d0       	rcall	.+0      	; 0x1654 <MDIO_Error_State_SetPinDirection+0x8>
    1654:	00 d0       	rcall	.+0      	; 0x1656 <MDIO_Error_State_SetPinDirection+0xa>
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	8a 83       	std	Y+2, r24	; 0x02
    165c:	6b 83       	std	Y+3, r22	; 0x03
    165e:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	88 30       	cpi	r24, 0x08	; 8
    1668:	08 f0       	brcs	.+2      	; 0x166c <MDIO_Error_State_SetPinDirection+0x20>
    166a:	e8 c0       	rjmp	.+464    	; 0x183c <MDIO_Error_State_SetPinDirection+0x1f0>
	{
		switch(Copy_u8PortNumber)
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	3e 83       	std	Y+6, r19	; 0x06
    1674:	2d 83       	std	Y+5, r18	; 0x05
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	81 30       	cpi	r24, 0x01	; 1
    167c:	91 05       	cpc	r25, r1
    167e:	09 f4       	brne	.+2      	; 0x1682 <MDIO_Error_State_SetPinDirection+0x36>
    1680:	48 c0       	rjmp	.+144    	; 0x1712 <MDIO_Error_State_SetPinDirection+0xc6>
    1682:	2d 81       	ldd	r18, Y+5	; 0x05
    1684:	3e 81       	ldd	r19, Y+6	; 0x06
    1686:	22 30       	cpi	r18, 0x02	; 2
    1688:	31 05       	cpc	r19, r1
    168a:	2c f4       	brge	.+10     	; 0x1696 <MDIO_Error_State_SetPinDirection+0x4a>
    168c:	8d 81       	ldd	r24, Y+5	; 0x05
    168e:	9e 81       	ldd	r25, Y+6	; 0x06
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	71 f0       	breq	.+28     	; 0x16b0 <MDIO_Error_State_SetPinDirection+0x64>
    1694:	d1 c0       	rjmp	.+418    	; 0x1838 <MDIO_Error_State_SetPinDirection+0x1ec>
    1696:	2d 81       	ldd	r18, Y+5	; 0x05
    1698:	3e 81       	ldd	r19, Y+6	; 0x06
    169a:	22 30       	cpi	r18, 0x02	; 2
    169c:	31 05       	cpc	r19, r1
    169e:	09 f4       	brne	.+2      	; 0x16a2 <MDIO_Error_State_SetPinDirection+0x56>
    16a0:	69 c0       	rjmp	.+210    	; 0x1774 <MDIO_Error_State_SetPinDirection+0x128>
    16a2:	8d 81       	ldd	r24, Y+5	; 0x05
    16a4:	9e 81       	ldd	r25, Y+6	; 0x06
    16a6:	83 30       	cpi	r24, 0x03	; 3
    16a8:	91 05       	cpc	r25, r1
    16aa:	09 f4       	brne	.+2      	; 0x16ae <MDIO_Error_State_SetPinDirection+0x62>
    16ac:	94 c0       	rjmp	.+296    	; 0x17d6 <MDIO_Error_State_SetPinDirection+0x18a>
    16ae:	c4 c0       	rjmp	.+392    	; 0x1838 <MDIO_Error_State_SetPinDirection+0x1ec>
		{
		case MDIO_PORTA:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    16b0:	8c 81       	ldd	r24, Y+4	; 0x04
    16b2:	81 30       	cpi	r24, 0x01	; 1
    16b4:	a1 f4       	brne	.+40     	; 0x16de <MDIO_Error_State_SetPinDirection+0x92>
			{
				SET_BIT(DDRA,Copy_u8PinNumber);
    16b6:	aa e3       	ldi	r26, 0x3A	; 58
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	ea e3       	ldi	r30, 0x3A	; 58
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	80 81       	ld	r24, Z
    16c0:	48 2f       	mov	r20, r24
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	28 2f       	mov	r18, r24
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	02 2e       	mov	r0, r18
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <MDIO_Error_State_SetPinDirection+0x88>
    16d0:	88 0f       	add	r24, r24
    16d2:	99 1f       	adc	r25, r25
    16d4:	0a 94       	dec	r0
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <MDIO_Error_State_SetPinDirection+0x84>
    16d8:	84 2b       	or	r24, r20
    16da:	8c 93       	st	X, r24
    16dc:	b0 c0       	rjmp	.+352    	; 0x183e <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    16de:	8c 81       	ldd	r24, Y+4	; 0x04
    16e0:	88 23       	and	r24, r24
    16e2:	a9 f4       	brne	.+42     	; 0x170e <MDIO_Error_State_SetPinDirection+0xc2>
			{
				CLR_BIT(DDRA,Copy_u8PinNumber);
    16e4:	aa e3       	ldi	r26, 0x3A	; 58
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	ea e3       	ldi	r30, 0x3A	; 58
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	48 2f       	mov	r20, r24
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 2e       	mov	r0, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <MDIO_Error_State_SetPinDirection+0xb6>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	0a 94       	dec	r0
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <MDIO_Error_State_SetPinDirection+0xb2>
    1706:	80 95       	com	r24
    1708:	84 23       	and	r24, r20
    170a:	8c 93       	st	X, r24
    170c:	98 c0       	rjmp	.+304    	; 0x183e <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    170e:	19 82       	std	Y+1, r1	; 0x01
    1710:	96 c0       	rjmp	.+300    	; 0x183e <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case MDIO_PORTB:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	81 30       	cpi	r24, 0x01	; 1
    1716:	a1 f4       	brne	.+40     	; 0x1740 <MDIO_Error_State_SetPinDirection+0xf4>
			{
				SET_BIT(DDRB,Copy_u8PinNumber);
    1718:	a7 e3       	ldi	r26, 0x37	; 55
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e7 e3       	ldi	r30, 0x37	; 55
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	48 2f       	mov	r20, r24
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	02 2e       	mov	r0, r18
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <MDIO_Error_State_SetPinDirection+0xea>
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	0a 94       	dec	r0
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <MDIO_Error_State_SetPinDirection+0xe6>
    173a:	84 2b       	or	r24, r20
    173c:	8c 93       	st	X, r24
    173e:	7f c0       	rjmp	.+254    	; 0x183e <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1740:	8c 81       	ldd	r24, Y+4	; 0x04
    1742:	88 23       	and	r24, r24
    1744:	a9 f4       	brne	.+42     	; 0x1770 <MDIO_Error_State_SetPinDirection+0x124>
			{
				CLR_BIT(DDRB,Copy_u8PinNumber);
    1746:	a7 e3       	ldi	r26, 0x37	; 55
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e7 e3       	ldi	r30, 0x37	; 55
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	48 2f       	mov	r20, r24
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	02 2e       	mov	r0, r18
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <MDIO_Error_State_SetPinDirection+0x118>
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	0a 94       	dec	r0
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <MDIO_Error_State_SetPinDirection+0x114>
    1768:	80 95       	com	r24
    176a:	84 23       	and	r24, r20
    176c:	8c 93       	st	X, r24
    176e:	67 c0       	rjmp	.+206    	; 0x183e <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    1770:	19 82       	std	Y+1, r1	; 0x01
    1772:	65 c0       	rjmp	.+202    	; 0x183e <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		case MDIO_PORTC:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    1774:	8c 81       	ldd	r24, Y+4	; 0x04
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	a1 f4       	brne	.+40     	; 0x17a2 <MDIO_Error_State_SetPinDirection+0x156>
			{
				SET_BIT(DDRC,Copy_u8PinNumber);
    177a:	a4 e3       	ldi	r26, 0x34	; 52
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	e4 e3       	ldi	r30, 0x34	; 52
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 2e       	mov	r0, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <MDIO_Error_State_SetPinDirection+0x14c>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	0a 94       	dec	r0
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <MDIO_Error_State_SetPinDirection+0x148>
    179c:	84 2b       	or	r24, r20
    179e:	8c 93       	st	X, r24
    17a0:	4e c0       	rjmp	.+156    	; 0x183e <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    17a2:	8c 81       	ldd	r24, Y+4	; 0x04
    17a4:	88 23       	and	r24, r24
    17a6:	a9 f4       	brne	.+42     	; 0x17d2 <MDIO_Error_State_SetPinDirection+0x186>
			{
				CLR_BIT(DDRC,Copy_u8PinNumber);
    17a8:	a4 e3       	ldi	r26, 0x34	; 52
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e4 e3       	ldi	r30, 0x34	; 52
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	48 2f       	mov	r20, r24
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	02 2e       	mov	r0, r18
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <MDIO_Error_State_SetPinDirection+0x17a>
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	0a 94       	dec	r0
    17c8:	e2 f7       	brpl	.-8      	; 0x17c2 <MDIO_Error_State_SetPinDirection+0x176>
    17ca:	80 95       	com	r24
    17cc:	84 23       	and	r24, r20
    17ce:	8c 93       	st	X, r24
    17d0:	36 c0       	rjmp	.+108    	; 0x183e <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    17d2:	19 82       	std	Y+1, r1	; 0x01
    17d4:	34 c0       	rjmp	.+104    	; 0x183e <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;	
		case MDIO_PORTD:
			if(Copy_u8PinDirection==PIN_OUTPUT)
    17d6:	8c 81       	ldd	r24, Y+4	; 0x04
    17d8:	81 30       	cpi	r24, 0x01	; 1
    17da:	a1 f4       	brne	.+40     	; 0x1804 <MDIO_Error_State_SetPinDirection+0x1b8>
			{
				SET_BIT(DDRD,Copy_u8PinNumber);
    17dc:	a1 e3       	ldi	r26, 0x31	; 49
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e1 e3       	ldi	r30, 0x31	; 49
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 2e       	mov	r0, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <MDIO_Error_State_SetPinDirection+0x1ae>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <MDIO_Error_State_SetPinDirection+0x1aa>
    17fe:	84 2b       	or	r24, r20
    1800:	8c 93       	st	X, r24
    1802:	1d c0       	rjmp	.+58     	; 0x183e <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else if(Copy_u8PinDirection==PIN_INPUT)
    1804:	8c 81       	ldd	r24, Y+4	; 0x04
    1806:	88 23       	and	r24, r24
    1808:	a9 f4       	brne	.+42     	; 0x1834 <MDIO_Error_State_SetPinDirection+0x1e8>
			{
				CLR_BIT(DDRD,Copy_u8PinNumber);
    180a:	a1 e3       	ldi	r26, 0x31	; 49
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e1 e3       	ldi	r30, 0x31	; 49
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	48 2f       	mov	r20, r24
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	02 2e       	mov	r0, r18
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <MDIO_Error_State_SetPinDirection+0x1dc>
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	0a 94       	dec	r0
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <MDIO_Error_State_SetPinDirection+0x1d8>
    182c:	80 95       	com	r24
    182e:	84 23       	and	r24, r20
    1830:	8c 93       	st	X, r24
    1832:	05 c0       	rjmp	.+10     	; 0x183e <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    1834:	19 82       	std	Y+1, r1	; 0x01
    1836:	03 c0       	rjmp	.+6      	; 0x183e <MDIO_Error_State_SetPinDirection+0x1f2>
			}
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1838:	19 82       	std	Y+1, r1	; 0x01
    183a:	01 c0       	rjmp	.+2      	; 0x183e <MDIO_Error_State_SetPinDirection+0x1f2>
			break;
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    183c:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState;
    183e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1840:	26 96       	adiw	r28, 0x06	; 6
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	cf 91       	pop	r28
    184e:	df 91       	pop	r29
    1850:	08 95       	ret

00001852 <MDIO_Error_State_SetPortDirection>:
/*Set Port Direction Function */
Error_State MDIO_Error_State_SetPortDirection(u8 Copy_u8PortNumber,u8 Copy_u8PortDirection)
{
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	00 d0       	rcall	.+0      	; 0x1858 <MDIO_Error_State_SetPortDirection+0x6>
    1858:	00 d0       	rcall	.+0      	; 0x185a <MDIO_Error_State_SetPortDirection+0x8>
    185a:	0f 92       	push	r0
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	8a 83       	std	Y+2, r24	; 0x02
    1862:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState=OK;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection==PORT_OUTPUT)||(Copy_u8PortDirection==PORT_INPUT))
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	8f 3f       	cpi	r24, 0xFF	; 255
    186c:	19 f0       	breq	.+6      	; 0x1874 <MDIO_Error_State_SetPortDirection+0x22>
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	88 23       	and	r24, r24
    1872:	a9 f5       	brne	.+106    	; 0x18de <MDIO_Error_State_SetPortDirection+0x8c>
	{
		switch(Copy_u8PortNumber)
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	3d 83       	std	Y+5, r19	; 0x05
    187c:	2c 83       	std	Y+4, r18	; 0x04
    187e:	8c 81       	ldd	r24, Y+4	; 0x04
    1880:	9d 81       	ldd	r25, Y+5	; 0x05
    1882:	81 30       	cpi	r24, 0x01	; 1
    1884:	91 05       	cpc	r25, r1
    1886:	d1 f0       	breq	.+52     	; 0x18bc <MDIO_Error_State_SetPortDirection+0x6a>
    1888:	2c 81       	ldd	r18, Y+4	; 0x04
    188a:	3d 81       	ldd	r19, Y+5	; 0x05
    188c:	22 30       	cpi	r18, 0x02	; 2
    188e:	31 05       	cpc	r19, r1
    1890:	2c f4       	brge	.+10     	; 0x189c <MDIO_Error_State_SetPortDirection+0x4a>
    1892:	8c 81       	ldd	r24, Y+4	; 0x04
    1894:	9d 81       	ldd	r25, Y+5	; 0x05
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	61 f0       	breq	.+24     	; 0x18b2 <MDIO_Error_State_SetPortDirection+0x60>
    189a:	1f c0       	rjmp	.+62     	; 0x18da <MDIO_Error_State_SetPortDirection+0x88>
    189c:	2c 81       	ldd	r18, Y+4	; 0x04
    189e:	3d 81       	ldd	r19, Y+5	; 0x05
    18a0:	22 30       	cpi	r18, 0x02	; 2
    18a2:	31 05       	cpc	r19, r1
    18a4:	81 f0       	breq	.+32     	; 0x18c6 <MDIO_Error_State_SetPortDirection+0x74>
    18a6:	8c 81       	ldd	r24, Y+4	; 0x04
    18a8:	9d 81       	ldd	r25, Y+5	; 0x05
    18aa:	83 30       	cpi	r24, 0x03	; 3
    18ac:	91 05       	cpc	r25, r1
    18ae:	81 f0       	breq	.+32     	; 0x18d0 <MDIO_Error_State_SetPortDirection+0x7e>
    18b0:	14 c0       	rjmp	.+40     	; 0x18da <MDIO_Error_State_SetPortDirection+0x88>
		{
		case MDIO_PORTA:
			DDRA=Copy_u8PortDirection;
    18b2:	ea e3       	ldi	r30, 0x3A	; 58
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	80 83       	st	Z, r24
    18ba:	12 c0       	rjmp	.+36     	; 0x18e0 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTB:
			DDRB=Copy_u8PortDirection;
    18bc:	e7 e3       	ldi	r30, 0x37	; 55
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	80 83       	st	Z, r24
    18c4:	0d c0       	rjmp	.+26     	; 0x18e0 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTC:
			DDRC=Copy_u8PortDirection;
    18c6:	e4 e3       	ldi	r30, 0x34	; 52
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	80 83       	st	Z, r24
    18ce:	08 c0       	rjmp	.+16     	; 0x18e0 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		case MDIO_PORTD:
			DDRD=Copy_u8PortDirection;
    18d0:	e1 e3       	ldi	r30, 0x31	; 49
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	80 83       	st	Z, r24
    18d8:	03 c0       	rjmp	.+6      	; 0x18e0 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    18da:	19 82       	std	Y+1, r1	; 0x01
    18dc:	01 c0       	rjmp	.+2      	; 0x18e0 <MDIO_Error_State_SetPortDirection+0x8e>
			break;
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    18de:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	08 95       	ret

000018f2 <MDIO_Error_State_SetPinValue>:

/*Set Pin Value Function */
Error_State MDIO_Error_State_SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8 Copy_u8PinValue)
{
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <MDIO_Error_State_SetPinValue+0x6>
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <MDIO_Error_State_SetPinValue+0x8>
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <MDIO_Error_State_SetPinValue+0xa>
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	8a 83       	std	Y+2, r24	; 0x02
    1902:	6b 83       	std	Y+3, r22	; 0x03
    1904:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	88 30       	cpi	r24, 0x08	; 8
    190e:	08 f0       	brcs	.+2      	; 0x1912 <MDIO_Error_State_SetPinValue+0x20>
    1910:	e8 c0       	rjmp	.+464    	; 0x1ae2 <MDIO_Error_State_SetPinValue+0x1f0>
	{
		switch(Copy_u8PortNumber)
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	3e 83       	std	Y+6, r19	; 0x06
    191a:	2d 83       	std	Y+5, r18	; 0x05
    191c:	8d 81       	ldd	r24, Y+5	; 0x05
    191e:	9e 81       	ldd	r25, Y+6	; 0x06
    1920:	81 30       	cpi	r24, 0x01	; 1
    1922:	91 05       	cpc	r25, r1
    1924:	09 f4       	brne	.+2      	; 0x1928 <MDIO_Error_State_SetPinValue+0x36>
    1926:	48 c0       	rjmp	.+144    	; 0x19b8 <MDIO_Error_State_SetPinValue+0xc6>
    1928:	2d 81       	ldd	r18, Y+5	; 0x05
    192a:	3e 81       	ldd	r19, Y+6	; 0x06
    192c:	22 30       	cpi	r18, 0x02	; 2
    192e:	31 05       	cpc	r19, r1
    1930:	2c f4       	brge	.+10     	; 0x193c <MDIO_Error_State_SetPinValue+0x4a>
    1932:	8d 81       	ldd	r24, Y+5	; 0x05
    1934:	9e 81       	ldd	r25, Y+6	; 0x06
    1936:	00 97       	sbiw	r24, 0x00	; 0
    1938:	71 f0       	breq	.+28     	; 0x1956 <MDIO_Error_State_SetPinValue+0x64>
    193a:	d1 c0       	rjmp	.+418    	; 0x1ade <MDIO_Error_State_SetPinValue+0x1ec>
    193c:	2d 81       	ldd	r18, Y+5	; 0x05
    193e:	3e 81       	ldd	r19, Y+6	; 0x06
    1940:	22 30       	cpi	r18, 0x02	; 2
    1942:	31 05       	cpc	r19, r1
    1944:	09 f4       	brne	.+2      	; 0x1948 <MDIO_Error_State_SetPinValue+0x56>
    1946:	69 c0       	rjmp	.+210    	; 0x1a1a <MDIO_Error_State_SetPinValue+0x128>
    1948:	8d 81       	ldd	r24, Y+5	; 0x05
    194a:	9e 81       	ldd	r25, Y+6	; 0x06
    194c:	83 30       	cpi	r24, 0x03	; 3
    194e:	91 05       	cpc	r25, r1
    1950:	09 f4       	brne	.+2      	; 0x1954 <MDIO_Error_State_SetPinValue+0x62>
    1952:	94 c0       	rjmp	.+296    	; 0x1a7c <MDIO_Error_State_SetPinValue+0x18a>
    1954:	c4 c0       	rjmp	.+392    	; 0x1ade <MDIO_Error_State_SetPinValue+0x1ec>
		{
		case MDIO_PORTA:
			if(Copy_u8PinValue==PIN_HIGH)
    1956:	8c 81       	ldd	r24, Y+4	; 0x04
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	a1 f4       	brne	.+40     	; 0x1984 <MDIO_Error_State_SetPinValue+0x92>
			{
				SET_BIT(PORTA,Copy_u8PinNumber);
    195c:	ab e3       	ldi	r26, 0x3B	; 59
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	eb e3       	ldi	r30, 0x3B	; 59
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	48 2f       	mov	r20, r24
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	02 2e       	mov	r0, r18
    1974:	02 c0       	rjmp	.+4      	; 0x197a <MDIO_Error_State_SetPinValue+0x88>
    1976:	88 0f       	add	r24, r24
    1978:	99 1f       	adc	r25, r25
    197a:	0a 94       	dec	r0
    197c:	e2 f7       	brpl	.-8      	; 0x1976 <MDIO_Error_State_SetPinValue+0x84>
    197e:	84 2b       	or	r24, r20
    1980:	8c 93       	st	X, r24
    1982:	b0 c0       	rjmp	.+352    	; 0x1ae4 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    1984:	8c 81       	ldd	r24, Y+4	; 0x04
    1986:	88 23       	and	r24, r24
    1988:	a9 f4       	brne	.+42     	; 0x19b4 <MDIO_Error_State_SetPinValue+0xc2>
			{
				CLR_BIT(PORTA,Copy_u8PinNumber);
    198a:	ab e3       	ldi	r26, 0x3B	; 59
    198c:	b0 e0       	ldi	r27, 0x00	; 0
    198e:	eb e3       	ldi	r30, 0x3B	; 59
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	48 2f       	mov	r20, r24
    1996:	8a 81       	ldd	r24, Y+2	; 0x02
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	02 2e       	mov	r0, r18
    19a2:	02 c0       	rjmp	.+4      	; 0x19a8 <MDIO_Error_State_SetPinValue+0xb6>
    19a4:	88 0f       	add	r24, r24
    19a6:	99 1f       	adc	r25, r25
    19a8:	0a 94       	dec	r0
    19aa:	e2 f7       	brpl	.-8      	; 0x19a4 <MDIO_Error_State_SetPinValue+0xb2>
    19ac:	80 95       	com	r24
    19ae:	84 23       	and	r24, r20
    19b0:	8c 93       	st	X, r24
    19b2:	98 c0       	rjmp	.+304    	; 0x1ae4 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    19b4:	19 82       	std	Y+1, r1	; 0x01
    19b6:	96 c0       	rjmp	.+300    	; 0x1ae4 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;
		case MDIO_PORTB:
			if(Copy_u8PinValue==PIN_HIGH)
    19b8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ba:	81 30       	cpi	r24, 0x01	; 1
    19bc:	a1 f4       	brne	.+40     	; 0x19e6 <MDIO_Error_State_SetPinValue+0xf4>
			{
				SET_BIT(PORTB,Copy_u8PinNumber);
    19be:	a8 e3       	ldi	r26, 0x38	; 56
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	e8 e3       	ldi	r30, 0x38	; 56
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	48 2f       	mov	r20, r24
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	28 2f       	mov	r18, r24
    19ce:	30 e0       	ldi	r19, 0x00	; 0
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	02 2e       	mov	r0, r18
    19d6:	02 c0       	rjmp	.+4      	; 0x19dc <MDIO_Error_State_SetPinValue+0xea>
    19d8:	88 0f       	add	r24, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	0a 94       	dec	r0
    19de:	e2 f7       	brpl	.-8      	; 0x19d8 <MDIO_Error_State_SetPinValue+0xe6>
    19e0:	84 2b       	or	r24, r20
    19e2:	8c 93       	st	X, r24
    19e4:	7f c0       	rjmp	.+254    	; 0x1ae4 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    19e6:	8c 81       	ldd	r24, Y+4	; 0x04
    19e8:	88 23       	and	r24, r24
    19ea:	a9 f4       	brne	.+42     	; 0x1a16 <MDIO_Error_State_SetPinValue+0x124>
			{
				CLR_BIT(PORTB,Copy_u8PinNumber);
    19ec:	a8 e3       	ldi	r26, 0x38	; 56
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	e8 e3       	ldi	r30, 0x38	; 56
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	48 2f       	mov	r20, r24
    19f8:	8a 81       	ldd	r24, Y+2	; 0x02
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	02 2e       	mov	r0, r18
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <MDIO_Error_State_SetPinValue+0x118>
    1a06:	88 0f       	add	r24, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	0a 94       	dec	r0
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <MDIO_Error_State_SetPinValue+0x114>
    1a0e:	80 95       	com	r24
    1a10:	84 23       	and	r24, r20
    1a12:	8c 93       	st	X, r24
    1a14:	67 c0       	rjmp	.+206    	; 0x1ae4 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    1a16:	19 82       	std	Y+1, r1	; 0x01
    1a18:	65 c0       	rjmp	.+202    	; 0x1ae4 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;
		case MDIO_PORTC:
			if(Copy_u8PinValue==PIN_HIGH)
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	81 30       	cpi	r24, 0x01	; 1
    1a1e:	a1 f4       	brne	.+40     	; 0x1a48 <MDIO_Error_State_SetPinValue+0x156>
			{
				SET_BIT(PORTC,Copy_u8PinNumber);
    1a20:	a5 e3       	ldi	r26, 0x35	; 53
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e5 e3       	ldi	r30, 0x35	; 53
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 2e       	mov	r0, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <MDIO_Error_State_SetPinValue+0x14c>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	0a 94       	dec	r0
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <MDIO_Error_State_SetPinValue+0x148>
    1a42:	84 2b       	or	r24, r20
    1a44:	8c 93       	st	X, r24
    1a46:	4e c0       	rjmp	.+156    	; 0x1ae4 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    1a48:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4a:	88 23       	and	r24, r24
    1a4c:	a9 f4       	brne	.+42     	; 0x1a78 <MDIO_Error_State_SetPinValue+0x186>
			{
				CLR_BIT(PORTC,Copy_u8PinNumber);
    1a4e:	a5 e3       	ldi	r26, 0x35	; 53
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e5 e3       	ldi	r30, 0x35	; 53
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	48 2f       	mov	r20, r24
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	02 2e       	mov	r0, r18
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <MDIO_Error_State_SetPinValue+0x17a>
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	0a 94       	dec	r0
    1a6e:	e2 f7       	brpl	.-8      	; 0x1a68 <MDIO_Error_State_SetPinValue+0x176>
    1a70:	80 95       	com	r24
    1a72:	84 23       	and	r24, r20
    1a74:	8c 93       	st	X, r24
    1a76:	36 c0       	rjmp	.+108    	; 0x1ae4 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    1a78:	19 82       	std	Y+1, r1	; 0x01
    1a7a:	34 c0       	rjmp	.+104    	; 0x1ae4 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;	
		case MDIO_PORTD:
			if(Copy_u8PinValue==PIN_HIGH)
    1a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a7e:	81 30       	cpi	r24, 0x01	; 1
    1a80:	a1 f4       	brne	.+40     	; 0x1aaa <MDIO_Error_State_SetPinValue+0x1b8>
			{
				SET_BIT(PORTD,Copy_u8PinNumber);
    1a82:	a2 e3       	ldi	r26, 0x32	; 50
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e2 e3       	ldi	r30, 0x32	; 50
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	48 2f       	mov	r20, r24
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	02 2e       	mov	r0, r18
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <MDIO_Error_State_SetPinValue+0x1ae>
    1a9c:	88 0f       	add	r24, r24
    1a9e:	99 1f       	adc	r25, r25
    1aa0:	0a 94       	dec	r0
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <MDIO_Error_State_SetPinValue+0x1aa>
    1aa4:	84 2b       	or	r24, r20
    1aa6:	8c 93       	st	X, r24
    1aa8:	1d c0       	rjmp	.+58     	; 0x1ae4 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else if(Copy_u8PinValue==PIN_LOW)
    1aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    1aac:	88 23       	and	r24, r24
    1aae:	a9 f4       	brne	.+42     	; 0x1ada <MDIO_Error_State_SetPinValue+0x1e8>
			{
				CLR_BIT(PORTD,Copy_u8PinNumber);
    1ab0:	a2 e3       	ldi	r26, 0x32	; 50
    1ab2:	b0 e0       	ldi	r27, 0x00	; 0
    1ab4:	e2 e3       	ldi	r30, 0x32	; 50
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	48 2f       	mov	r20, r24
    1abc:	8a 81       	ldd	r24, Y+2	; 0x02
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	02 2e       	mov	r0, r18
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <MDIO_Error_State_SetPinValue+0x1dc>
    1aca:	88 0f       	add	r24, r24
    1acc:	99 1f       	adc	r25, r25
    1ace:	0a 94       	dec	r0
    1ad0:	e2 f7       	brpl	.-8      	; 0x1aca <MDIO_Error_State_SetPinValue+0x1d8>
    1ad2:	80 95       	com	r24
    1ad4:	84 23       	and	r24, r20
    1ad6:	8c 93       	st	X, r24
    1ad8:	05 c0       	rjmp	.+10     	; 0x1ae4 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			else
			{
				LOC_Error_State_ReturnState=NOK;
    1ada:	19 82       	std	Y+1, r1	; 0x01
    1adc:	03 c0       	rjmp	.+6      	; 0x1ae4 <MDIO_Error_State_SetPinValue+0x1f2>
			}
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1ade:	19 82       	std	Y+1, r1	; 0x01
    1ae0:	01 c0       	rjmp	.+2      	; 0x1ae4 <MDIO_Error_State_SetPinValue+0x1f2>
			break;
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1ae2:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState;
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ae6:	26 96       	adiw	r28, 0x06	; 6
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <MDIO_Error_State_SetPortValue>:

/*Set Port Value Function */
Error_State MDIO_Error_State_SetPortValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <MDIO_Error_State_SetPortValue+0x6>
    1afe:	00 d0       	rcall	.+0      	; 0x1b00 <MDIO_Error_State_SetPortValue+0x8>
    1b00:	0f 92       	push	r0
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
    1b06:	8a 83       	std	Y+2, r24	; 0x02
    1b08:	6b 83       	std	Y+3, r22	; 0x03
	Error_State LOC_Error_State_ReturnState=OK;
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortNumber)
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	3d 83       	std	Y+5, r19	; 0x05
    1b16:	2c 83       	std	Y+4, r18	; 0x04
    1b18:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1c:	81 30       	cpi	r24, 0x01	; 1
    1b1e:	91 05       	cpc	r25, r1
    1b20:	d1 f0       	breq	.+52     	; 0x1b56 <MDIO_Error_State_SetPortValue+0x5e>
    1b22:	2c 81       	ldd	r18, Y+4	; 0x04
    1b24:	3d 81       	ldd	r19, Y+5	; 0x05
    1b26:	22 30       	cpi	r18, 0x02	; 2
    1b28:	31 05       	cpc	r19, r1
    1b2a:	2c f4       	brge	.+10     	; 0x1b36 <MDIO_Error_State_SetPortValue+0x3e>
    1b2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b30:	00 97       	sbiw	r24, 0x00	; 0
    1b32:	61 f0       	breq	.+24     	; 0x1b4c <MDIO_Error_State_SetPortValue+0x54>
    1b34:	1f c0       	rjmp	.+62     	; 0x1b74 <MDIO_Error_State_SetPortValue+0x7c>
    1b36:	2c 81       	ldd	r18, Y+4	; 0x04
    1b38:	3d 81       	ldd	r19, Y+5	; 0x05
    1b3a:	22 30       	cpi	r18, 0x02	; 2
    1b3c:	31 05       	cpc	r19, r1
    1b3e:	81 f0       	breq	.+32     	; 0x1b60 <MDIO_Error_State_SetPortValue+0x68>
    1b40:	8c 81       	ldd	r24, Y+4	; 0x04
    1b42:	9d 81       	ldd	r25, Y+5	; 0x05
    1b44:	83 30       	cpi	r24, 0x03	; 3
    1b46:	91 05       	cpc	r25, r1
    1b48:	81 f0       	breq	.+32     	; 0x1b6a <MDIO_Error_State_SetPortValue+0x72>
    1b4a:	14 c0       	rjmp	.+40     	; 0x1b74 <MDIO_Error_State_SetPortValue+0x7c>
	{
	case MDIO_PORTA:
		PORTA=Copy_u8PortValue;
    1b4c:	eb e3       	ldi	r30, 0x3B	; 59
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	80 83       	st	Z, r24
    1b54:	10 c0       	rjmp	.+32     	; 0x1b76 <MDIO_Error_State_SetPortValue+0x7e>
		break;
	case MDIO_PORTB:
		PORTB=Copy_u8PortValue;
    1b56:	e8 e3       	ldi	r30, 0x38	; 56
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	80 83       	st	Z, r24
    1b5e:	0b c0       	rjmp	.+22     	; 0x1b76 <MDIO_Error_State_SetPortValue+0x7e>
		break;
	case MDIO_PORTC:
		PORTC=Copy_u8PortValue;
    1b60:	e5 e3       	ldi	r30, 0x35	; 53
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	80 83       	st	Z, r24
    1b68:	06 c0       	rjmp	.+12     	; 0x1b76 <MDIO_Error_State_SetPortValue+0x7e>
		break;	
	case MDIO_PORTD:
		PORTD=Copy_u8PortValue;
    1b6a:	e2 e3       	ldi	r30, 0x32	; 50
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	80 83       	st	Z, r24
    1b72:	01 c0       	rjmp	.+2      	; 0x1b76 <MDIO_Error_State_SetPortValue+0x7e>
		break;	
	default:
		LOC_Error_State_ReturnState=NOK;
    1b74:	19 82       	std	Y+1, r1	; 0x01
		break;
	}
	return LOC_Error_State_ReturnState;
    1b76:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <MDIO_Error_State_GetPinValue>:

/*Get Pin Value Function */
Error_State MDIO_Error_State_GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortNumber,u8* P_u8PinValue)
{
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	27 97       	sbiw	r28, 0x07	; 7
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	de bf       	out	0x3e, r29	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	cd bf       	out	0x3d, r28	; 61
    1b9c:	8a 83       	std	Y+2, r24	; 0x02
    1b9e:	6b 83       	std	Y+3, r22	; 0x03
    1ba0:	5d 83       	std	Y+5, r21	; 0x05
    1ba2:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	89 83       	std	Y+1, r24	; 0x01

	if(((Copy_u8PinNumber>=0)&&(Copy_u8PinNumber<8))&&(P_u8PinValue!=NULL_POINTER))
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	88 30       	cpi	r24, 0x08	; 8
    1bac:	08 f0       	brcs	.+2      	; 0x1bb0 <MDIO_Error_State_GetPinValue+0x28>
    1bae:	79 c0       	rjmp	.+242    	; 0x1ca2 <MDIO_Error_State_GetPinValue+0x11a>
    1bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb4:	81 30       	cpi	r24, 0x01	; 1
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <MDIO_Error_State_GetPinValue+0x34>
    1bba:	73 c0       	rjmp	.+230    	; 0x1ca2 <MDIO_Error_State_GetPinValue+0x11a>
	{
		switch(Copy_u8PortNumber)
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	3f 83       	std	Y+7, r19	; 0x07
    1bc4:	2e 83       	std	Y+6, r18	; 0x06
    1bc6:	4e 81       	ldd	r20, Y+6	; 0x06
    1bc8:	5f 81       	ldd	r21, Y+7	; 0x07
    1bca:	41 30       	cpi	r20, 0x01	; 1
    1bcc:	51 05       	cpc	r21, r1
    1bce:	59 f1       	breq	.+86     	; 0x1c26 <MDIO_Error_State_GetPinValue+0x9e>
    1bd0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd2:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd4:	82 30       	cpi	r24, 0x02	; 2
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	34 f4       	brge	.+12     	; 0x1be6 <MDIO_Error_State_GetPinValue+0x5e>
    1bda:	2e 81       	ldd	r18, Y+6	; 0x06
    1bdc:	3f 81       	ldd	r19, Y+7	; 0x07
    1bde:	21 15       	cp	r18, r1
    1be0:	31 05       	cpc	r19, r1
    1be2:	69 f0       	breq	.+26     	; 0x1bfe <MDIO_Error_State_GetPinValue+0x76>
    1be4:	5c c0       	rjmp	.+184    	; 0x1c9e <MDIO_Error_State_GetPinValue+0x116>
    1be6:	4e 81       	ldd	r20, Y+6	; 0x06
    1be8:	5f 81       	ldd	r21, Y+7	; 0x07
    1bea:	42 30       	cpi	r20, 0x02	; 2
    1bec:	51 05       	cpc	r21, r1
    1bee:	79 f1       	breq	.+94     	; 0x1c4e <MDIO_Error_State_GetPinValue+0xc6>
    1bf0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf2:	9f 81       	ldd	r25, Y+7	; 0x07
    1bf4:	83 30       	cpi	r24, 0x03	; 3
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <MDIO_Error_State_GetPinValue+0x74>
    1bfa:	3d c0       	rjmp	.+122    	; 0x1c76 <MDIO_Error_State_GetPinValue+0xee>
    1bfc:	50 c0       	rjmp	.+160    	; 0x1c9e <MDIO_Error_State_GetPinValue+0x116>
		{
		case MDIO_PORTA:
			*P_u8PinValue=GET_BIT(PINA,Copy_u8PinNumber);
    1bfe:	e9 e3       	ldi	r30, 0x39	; 57
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	28 2f       	mov	r18, r24
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	88 2f       	mov	r24, r24
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	a9 01       	movw	r20, r18
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <MDIO_Error_State_GetPinValue+0x8e>
    1c12:	55 95       	asr	r21
    1c14:	47 95       	ror	r20
    1c16:	8a 95       	dec	r24
    1c18:	e2 f7       	brpl	.-8      	; 0x1c12 <MDIO_Error_State_GetPinValue+0x8a>
    1c1a:	ca 01       	movw	r24, r20
    1c1c:	81 70       	andi	r24, 0x01	; 1
    1c1e:	ec 81       	ldd	r30, Y+4	; 0x04
    1c20:	fd 81       	ldd	r31, Y+5	; 0x05
    1c22:	80 83       	st	Z, r24
    1c24:	3f c0       	rjmp	.+126    	; 0x1ca4 <MDIO_Error_State_GetPinValue+0x11c>
			break;
		case MDIO_PORTB:
			*P_u8PinValue=GET_BIT(PINB,Copy_u8PinNumber);
    1c26:	e6 e3       	ldi	r30, 0x36	; 54
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	88 2f       	mov	r24, r24
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	a9 01       	movw	r20, r18
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <MDIO_Error_State_GetPinValue+0xb6>
    1c3a:	55 95       	asr	r21
    1c3c:	47 95       	ror	r20
    1c3e:	8a 95       	dec	r24
    1c40:	e2 f7       	brpl	.-8      	; 0x1c3a <MDIO_Error_State_GetPinValue+0xb2>
    1c42:	ca 01       	movw	r24, r20
    1c44:	81 70       	andi	r24, 0x01	; 1
    1c46:	ec 81       	ldd	r30, Y+4	; 0x04
    1c48:	fd 81       	ldd	r31, Y+5	; 0x05
    1c4a:	80 83       	st	Z, r24
    1c4c:	2b c0       	rjmp	.+86     	; 0x1ca4 <MDIO_Error_State_GetPinValue+0x11c>
			break;
		case MDIO_PORTC:
			*P_u8PinValue=GET_BIT(PINC,Copy_u8PinNumber);
    1c4e:	e3 e3       	ldi	r30, 0x33	; 51
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5a:	88 2f       	mov	r24, r24
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	a9 01       	movw	r20, r18
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <MDIO_Error_State_GetPinValue+0xde>
    1c62:	55 95       	asr	r21
    1c64:	47 95       	ror	r20
    1c66:	8a 95       	dec	r24
    1c68:	e2 f7       	brpl	.-8      	; 0x1c62 <MDIO_Error_State_GetPinValue+0xda>
    1c6a:	ca 01       	movw	r24, r20
    1c6c:	81 70       	andi	r24, 0x01	; 1
    1c6e:	ec 81       	ldd	r30, Y+4	; 0x04
    1c70:	fd 81       	ldd	r31, Y+5	; 0x05
    1c72:	80 83       	st	Z, r24
    1c74:	17 c0       	rjmp	.+46     	; 0x1ca4 <MDIO_Error_State_GetPinValue+0x11c>
			break;
		case MDIO_PORTD:
			*P_u8PinValue=GET_BIT(PIND,Copy_u8PinNumber);
    1c76:	e0 e3       	ldi	r30, 0x30	; 48
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	8a 81       	ldd	r24, Y+2	; 0x02
    1c82:	88 2f       	mov	r24, r24
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	a9 01       	movw	r20, r18
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <MDIO_Error_State_GetPinValue+0x106>
    1c8a:	55 95       	asr	r21
    1c8c:	47 95       	ror	r20
    1c8e:	8a 95       	dec	r24
    1c90:	e2 f7       	brpl	.-8      	; 0x1c8a <MDIO_Error_State_GetPinValue+0x102>
    1c92:	ca 01       	movw	r24, r20
    1c94:	81 70       	andi	r24, 0x01	; 1
    1c96:	ec 81       	ldd	r30, Y+4	; 0x04
    1c98:	fd 81       	ldd	r31, Y+5	; 0x05
    1c9a:	80 83       	st	Z, r24
    1c9c:	03 c0       	rjmp	.+6      	; 0x1ca4 <MDIO_Error_State_GetPinValue+0x11c>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1c9e:	19 82       	std	Y+1, r1	; 0x01
    1ca0:	01 c0       	rjmp	.+2      	; 0x1ca4 <MDIO_Error_State_GetPinValue+0x11c>
			break;		
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1ca2:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_Error_State_ReturnState;
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca6:	27 96       	adiw	r28, 0x07	; 7
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <MDIO_Error_State_SetNippleValue>:
/*Set Nipple Direction Function */

/*Set Nipple Values Function */
Error_State MDIO_Error_State_SetNippleValue(u8 Copy_u8PinStart,u8 Copy_u8PortNumber,u8 Copy_u8Value)
{
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	00 d0       	rcall	.+0      	; 0x1cbe <MDIO_Error_State_SetNippleValue+0x6>
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <MDIO_Error_State_SetNippleValue+0x8>
    1cc0:	00 d0       	rcall	.+0      	; 0x1cc2 <MDIO_Error_State_SetNippleValue+0xa>
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	8a 83       	std	Y+2, r24	; 0x02
    1cc8:	6b 83       	std	Y+3, r22	; 0x03
    1cca:	4c 83       	std	Y+4, r20	; 0x04
	Error_State LOC_Error_State_ReturnState=OK;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinStart<=4)
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	85 30       	cpi	r24, 0x05	; 5
    1cd4:	08 f0       	brcs	.+2      	; 0x1cd8 <MDIO_Error_State_SetNippleValue+0x20>
    1cd6:	97 c0       	rjmp	.+302    	; 0x1e06 <MDIO_Error_State_SetNippleValue+0x14e>
	{
		switch(Copy_u8PortNumber)
    1cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	3e 83       	std	Y+6, r19	; 0x06
    1ce0:	2d 83       	std	Y+5, r18	; 0x05
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce6:	81 30       	cpi	r24, 0x01	; 1
    1ce8:	91 05       	cpc	r25, r1
    1cea:	a1 f1       	breq	.+104    	; 0x1d54 <MDIO_Error_State_SetNippleValue+0x9c>
    1cec:	2d 81       	ldd	r18, Y+5	; 0x05
    1cee:	3e 81       	ldd	r19, Y+6	; 0x06
    1cf0:	22 30       	cpi	r18, 0x02	; 2
    1cf2:	31 05       	cpc	r19, r1
    1cf4:	2c f4       	brge	.+10     	; 0x1d00 <MDIO_Error_State_SetNippleValue+0x48>
    1cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	71 f0       	breq	.+28     	; 0x1d1a <MDIO_Error_State_SetNippleValue+0x62>
    1cfe:	81 c0       	rjmp	.+258    	; 0x1e02 <MDIO_Error_State_SetNippleValue+0x14a>
    1d00:	2d 81       	ldd	r18, Y+5	; 0x05
    1d02:	3e 81       	ldd	r19, Y+6	; 0x06
    1d04:	22 30       	cpi	r18, 0x02	; 2
    1d06:	31 05       	cpc	r19, r1
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <MDIO_Error_State_SetNippleValue+0x54>
    1d0a:	41 c0       	rjmp	.+130    	; 0x1d8e <MDIO_Error_State_SetNippleValue+0xd6>
    1d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d10:	83 30       	cpi	r24, 0x03	; 3
    1d12:	91 05       	cpc	r25, r1
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <MDIO_Error_State_SetNippleValue+0x60>
    1d16:	58 c0       	rjmp	.+176    	; 0x1dc8 <MDIO_Error_State_SetNippleValue+0x110>
    1d18:	74 c0       	rjmp	.+232    	; 0x1e02 <MDIO_Error_State_SetNippleValue+0x14a>
		case MDIO_PORTA:
		/*for(u8 i=Copy_u8PinStart;i<=7;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTA&=(~(0x0F<<Copy_u8PinStart));
    1d1a:	ab e3       	ldi	r26, 0x3B	; 59
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	eb e3       	ldi	r30, 0x3B	; 59
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	48 2f       	mov	r20, r24
    1d26:	8a 81       	ldd	r24, Y+2	; 0x02
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	8f e0       	ldi	r24, 0x0F	; 15
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	02 2e       	mov	r0, r18
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <MDIO_Error_State_SetNippleValue+0x80>
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	0a 94       	dec	r0
    1d3a:	e2 f7       	brpl	.-8      	; 0x1d34 <MDIO_Error_State_SetNippleValue+0x7c>
    1d3c:	80 95       	com	r24
    1d3e:	84 23       	and	r24, r20
    1d40:	8c 93       	st	X, r24
			PORTA|=Copy_u8Value;
    1d42:	ab e3       	ldi	r26, 0x3B	; 59
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	eb e3       	ldi	r30, 0x3B	; 59
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	90 81       	ld	r25, Z
    1d4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4e:	89 2b       	or	r24, r25
    1d50:	8c 93       	st	X, r24
    1d52:	5a c0       	rjmp	.+180    	; 0x1e08 <MDIO_Error_State_SetNippleValue+0x150>
		case MDIO_PORTB:
			/*for(u8 i=Copy_u8PinStart;i<=Copy_u8PinEnd;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTB&=(~(0x0F<<Copy_u8PinStart));
    1d54:	a8 e3       	ldi	r26, 0x38	; 56
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e8 e3       	ldi	r30, 0x38	; 56
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 2f       	mov	r20, r24
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	8f e0       	ldi	r24, 0x0F	; 15
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	02 2e       	mov	r0, r18
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <MDIO_Error_State_SetNippleValue+0xba>
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	0a 94       	dec	r0
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <MDIO_Error_State_SetNippleValue+0xb6>
    1d76:	80 95       	com	r24
    1d78:	84 23       	and	r24, r20
    1d7a:	8c 93       	st	X, r24
			PORTB|=Copy_u8Value;
    1d7c:	a8 e3       	ldi	r26, 0x38	; 56
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e8 e3       	ldi	r30, 0x38	; 56
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	90 81       	ld	r25, Z
    1d86:	8c 81       	ldd	r24, Y+4	; 0x04
    1d88:	89 2b       	or	r24, r25
    1d8a:	8c 93       	st	X, r24
    1d8c:	3d c0       	rjmp	.+122    	; 0x1e08 <MDIO_Error_State_SetNippleValue+0x150>
		case MDIO_PORTC:
			/*for(u8 i=Copy_u8PinStart;i<=Copy_u8PinEnd;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTC&=(~(0x0F<<Copy_u8PinStart));
    1d8e:	a5 e3       	ldi	r26, 0x35	; 53
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	e5 e3       	ldi	r30, 0x35	; 53
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	80 81       	ld	r24, Z
    1d98:	48 2f       	mov	r20, r24
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	8f e0       	ldi	r24, 0x0F	; 15
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	02 2e       	mov	r0, r18
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <MDIO_Error_State_SetNippleValue+0xf4>
    1da8:	88 0f       	add	r24, r24
    1daa:	99 1f       	adc	r25, r25
    1dac:	0a 94       	dec	r0
    1dae:	e2 f7       	brpl	.-8      	; 0x1da8 <MDIO_Error_State_SetNippleValue+0xf0>
    1db0:	80 95       	com	r24
    1db2:	84 23       	and	r24, r20
    1db4:	8c 93       	st	X, r24
			PORTC|=Copy_u8Value;
    1db6:	a5 e3       	ldi	r26, 0x35	; 53
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e5 e3       	ldi	r30, 0x35	; 53
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	90 81       	ld	r25, Z
    1dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc2:	89 2b       	or	r24, r25
    1dc4:	8c 93       	st	X, r24
    1dc6:	20 c0       	rjmp	.+64     	; 0x1e08 <MDIO_Error_State_SetNippleValue+0x150>
		case MDIO_PORTD:
			/*for(u8 i=Copy_u8PinStart;i<=Copy_u8PinEnd;i++)
		{
			CLR_BIT(PORTA,i);
		}*/
			PORTD&=(~(0x0F<<Copy_u8PinStart));
    1dc8:	a2 e3       	ldi	r26, 0x32	; 50
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e2 e3       	ldi	r30, 0x32	; 50
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	48 2f       	mov	r20, r24
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	8f e0       	ldi	r24, 0x0F	; 15
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	02 2e       	mov	r0, r18
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <MDIO_Error_State_SetNippleValue+0x12e>
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	0a 94       	dec	r0
    1de8:	e2 f7       	brpl	.-8      	; 0x1de2 <MDIO_Error_State_SetNippleValue+0x12a>
    1dea:	80 95       	com	r24
    1dec:	84 23       	and	r24, r20
    1dee:	8c 93       	st	X, r24
			PORTD|=Copy_u8Value;
    1df0:	a2 e3       	ldi	r26, 0x32	; 50
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e2 e3       	ldi	r30, 0x32	; 50
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	90 81       	ld	r25, Z
    1dfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfc:	89 2b       	or	r24, r25
    1dfe:	8c 93       	st	X, r24
    1e00:	03 c0       	rjmp	.+6      	; 0x1e08 <MDIO_Error_State_SetNippleValue+0x150>
			break;
		default:
			LOC_Error_State_ReturnState=NOK;
    1e02:	19 82       	std	Y+1, r1	; 0x01
    1e04:	01 c0       	rjmp	.+2      	; 0x1e08 <MDIO_Error_State_SetNippleValue+0x150>
		}
	}
	else
	{
		LOC_Error_State_ReturnState=NOK;
    1e06:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_Error_State_ReturnState;
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e0a:	26 96       	adiw	r28, 0x06	; 6
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	de bf       	out	0x3e, r29	; 62
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	cd bf       	out	0x3d, r28	; 61
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <MADC_VidInit_WithEXTI>:
#include"MADC_Private.h"
#include"MADC_Config.h"

/*ADC Initialization*/
void MADC_VidInit_WithEXTI(void)
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	cd b7       	in	r28, 0x3d	; 61
    1e22:	de b7       	in	r29, 0x3e	; 62
	/*Select Reference Voltage*/
#if MADC_SET_REFERENCEVOLATGE == MADC_AVCC_REFERENCEVOLATGE
	SET_BIT(ADMUX,6);
    1e24:	a7 e2       	ldi	r26, 0x27	; 39
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e7 e2       	ldi	r30, 0x27	; 39
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	80 64       	ori	r24, 0x40	; 64
    1e30:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    1e32:	a7 e2       	ldi	r26, 0x27	; 39
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e7 e2       	ldi	r30, 0x27	; 39
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	8f 77       	andi	r24, 0x7F	; 127
    1e3e:	8c 93       	st	X, r24
	SET_BIT(ADMUX,7);
#else
#error"ADC Reference Voltage Option I s not valid.... "
#endif
	/*Set Prescaler*/
	ADCSRA&=MADC_BIT_MASKING_PRESCALER;
    1e40:	a6 e2       	ldi	r26, 0x26	; 38
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e6 e2       	ldi	r30, 0x26	; 38
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	88 7f       	andi	r24, 0xF8	; 248
    1e4c:	8c 93       	st	X, r24
	ADCSRA|=MADC_SET_PRESCALER;
    1e4e:	a6 e2       	ldi	r26, 0x26	; 38
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e6 e2       	ldi	r30, 0x26	; 38
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	83 60       	ori	r24, 0x03	; 3
    1e5a:	8c 93       	st	X, r24

#if MADC_SET_ADJUST == MADC_LEFT_ADJUST
	SET_BIT(ADMUX,5);
#elif MADC_SET_ADJUST == MADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,5);
    1e5c:	a7 e2       	ldi	r26, 0x27	; 39
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e7 e2       	ldi	r30, 0x27	; 39
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	8f 7d       	andi	r24, 0xDF	; 223
    1e68:	8c 93       	st	X, r24
#else
#error"ADC Left adjust option is not valid...."
#endif

	/*		ADC Auto Trigger Enable		*/
	SET_BIT(ADCSRA,5);
    1e6a:	a6 e2       	ldi	r26, 0x26	; 38
    1e6c:	b0 e0       	ldi	r27, 0x00	; 0
    1e6e:	e6 e2       	ldi	r30, 0x26	; 38
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	80 81       	ld	r24, Z
    1e74:	80 62       	ori	r24, 0x20	; 32
    1e76:	8c 93       	st	X, r24
	MEXTI0_VidInit();
    1e78:	0e 94 cf 09 	call	0x139e	; 0x139e <MEXTI0_VidInit>
	MGIE_VidEnable();
    1e7c:	0e 94 b3 09 	call	0x1366	; 0x1366 <MGIE_VidEnable>
	/*		ADC Auto Trigger Source		*/
	SFIOR&=MADC_BIT_MASKING_TRIGGER_SOURCE;
    1e80:	a0 e5       	ldi	r26, 0x50	; 80
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e0 e5       	ldi	r30, 0x50	; 80
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	8f 71       	andi	r24, 0x1F	; 31
    1e8e:	90 70       	andi	r25, 0x00	; 0
    1e90:	11 96       	adiw	r26, 0x01	; 1
    1e92:	9c 93       	st	X, r25
    1e94:	8e 93       	st	-X, r24
	SFIOR|=MADC_SET_TRIGGER_SOURCE;
    1e96:	a0 e5       	ldi	r26, 0x50	; 80
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	e0 e5       	ldi	r30, 0x50	; 80
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	91 81       	ldd	r25, Z+1	; 0x01
    1ea2:	80 64       	ori	r24, 0x40	; 64
    1ea4:	11 96       	adiw	r26, 0x01	; 1
    1ea6:	9c 93       	st	X, r25
    1ea8:	8e 93       	st	-X, r24

	/*Enable To ADC*/
	SET_BIT(ADCSRA,7);
    1eaa:	a6 e2       	ldi	r26, 0x26	; 38
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e6 e2       	ldi	r30, 0x26	; 38
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	80 68       	ori	r24, 0x80	; 128
    1eb6:	8c 93       	st	X, r24
}
    1eb8:	cf 91       	pop	r28
    1eba:	df 91       	pop	r29
    1ebc:	08 95       	ret

00001ebe <MADC_VidInit>:

void MADC_VidInit(void)
{
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
	/*Select Reference Voltage*/
#if MADC_SET_REFERENCEVOLATGE == MADC_AVCC_REFERENCEVOLATGE
	SET_BIT(ADMUX,6);
    1ec6:	a7 e2       	ldi	r26, 0x27	; 39
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e7 e2       	ldi	r30, 0x27	; 39
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	80 81       	ld	r24, Z
    1ed0:	80 64       	ori	r24, 0x40	; 64
    1ed2:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    1ed4:	a7 e2       	ldi	r26, 0x27	; 39
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e7 e2       	ldi	r30, 0x27	; 39
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	8f 77       	andi	r24, 0x7F	; 127
    1ee0:	8c 93       	st	X, r24
	SET_BIT(ADMUX,7);
#else
#error"ADC Reference Voltage Option I s not valid.... "
#endif
	/*Set Prescaler*/
	ADCSRA&=MADC_BIT_MASKING_PRESCALER;
    1ee2:	a6 e2       	ldi	r26, 0x26	; 38
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e6 e2       	ldi	r30, 0x26	; 38
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	88 7f       	andi	r24, 0xF8	; 248
    1eee:	8c 93       	st	X, r24
	ADCSRA|=MADC_SET_PRESCALER;
    1ef0:	a6 e2       	ldi	r26, 0x26	; 38
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	e6 e2       	ldi	r30, 0x26	; 38
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	83 60       	ori	r24, 0x03	; 3
    1efc:	8c 93       	st	X, r24

#if MADC_SET_ADJUST == MADC_LEFT_ADJUST
	SET_BIT(ADMUX,5);
#elif MADC_SET_ADJUST == MADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,5);
    1efe:	a7 e2       	ldi	r26, 0x27	; 39
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e7 e2       	ldi	r30, 0x27	; 39
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	8f 7d       	andi	r24, 0xDF	; 223
    1f0a:	8c 93       	st	X, r24
#else
#error"ADC Left adjust option is not valid...."
#endif
	/*Enable To ADC*/
	SET_BIT(ADCSRA,7);
    1f0c:	a6 e2       	ldi	r26, 0x26	; 38
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e6 e2       	ldi	r30, 0x26	; 38
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	80 68       	ori	r24, 0x80	; 128
    1f18:	8c 93       	st	X, r24
}
    1f1a:	cf 91       	pop	r28
    1f1c:	df 91       	pop	r29
    1f1e:	08 95       	ret

00001f20 <MADC_u16ADC_StartConversion>:
/*ADC Start Conversion-->Polling , Return ADC Value*/
u16 MADC_u16ADC_StartConversion(u8 Copy_u8Channel)
{
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	0f 92       	push	r0
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	89 83       	std	Y+1, r24	; 0x01
	/*Select Channel*/
	Copy_u8Channel&=MADC_BIT_MASKING_CHANNEL;
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	87 70       	andi	r24, 0x07	; 7
    1f30:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=MADC_BIT_MASKING_REG_CHANNEL;
    1f32:	a7 e2       	ldi	r26, 0x27	; 39
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e7 e2       	ldi	r30, 0x27	; 39
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	80 7e       	andi	r24, 0xE0	; 224
    1f3e:	8c 93       	st	X, r24
	ADMUX|=Copy_u8Channel;
    1f40:	a7 e2       	ldi	r26, 0x27	; 39
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e7 e2       	ldi	r30, 0x27	; 39
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	90 81       	ld	r25, Z
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	89 2b       	or	r24, r25
    1f4e:	8c 93       	st	X, r24
	/*send Start Conversion*/
	SET_BIT(ADCSRA,6);
    1f50:	a6 e2       	ldi	r26, 0x26	; 38
    1f52:	b0 e0       	ldi	r27, 0x00	; 0
    1f54:	e6 e2       	ldi	r30, 0x26	; 38
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	80 64       	ori	r24, 0x40	; 64
    1f5c:	8c 93       	st	X, r24
	/*Wait On ADC Conversion Completed Flag is set to one */
	while(GET_BIT(ADCSRA,4)==0);
    1f5e:	e6 e2       	ldi	r30, 0x26	; 38
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	82 95       	swap	r24
    1f66:	8f 70       	andi	r24, 0x0F	; 15
    1f68:	88 2f       	mov	r24, r24
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	81 70       	andi	r24, 0x01	; 1
    1f6e:	90 70       	andi	r25, 0x00	; 0
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	a9 f3       	breq	.-22     	; 0x1f5e <MADC_u16ADC_StartConversion+0x3e>

	return ADC;
    1f74:	e4 e2       	ldi	r30, 0x24	; 36
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	91 81       	ldd	r25, Z+1	; 0x01
}
    1f7c:	0f 90       	pop	r0
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <HLED_VidInit>:
#include"..\..\LIB\LSTD_TYPES.h"
#include"..\..\MCAL\MDIO\MDIO_Interface.h"
#include"HLED_Interface.h"

void HLED_VidInit(LED_t *Copy_Led)
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	00 d0       	rcall	.+0      	; 0x1f8a <HLED_VidInit+0x6>
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	9a 83       	std	Y+2, r25	; 0x02
    1f90:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinDirection(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_OUTPUT);
    1f92:	e9 81       	ldd	r30, Y+1	; 0x01
    1f94:	fa 81       	ldd	r31, Y+2	; 0x02
    1f96:	81 81       	ldd	r24, Z+1	; 0x01
    1f98:	e9 81       	ldd	r30, Y+1	; 0x01
    1f9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f9c:	90 81       	ld	r25, Z
    1f9e:	69 2f       	mov	r22, r25
    1fa0:	41 e0       	ldi	r20, 0x01	; 1
    1fa2:	0e 94 26 0b 	call	0x164c	; 0x164c <MDIO_Error_State_SetPinDirection>
}
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	08 95       	ret

00001fb0 <HLED_VidLed_On>:
void HLED_VidLed_On(LED_t *Copy_Led)
{
    1fb0:	df 93       	push	r29
    1fb2:	cf 93       	push	r28
    1fb4:	00 d0       	rcall	.+0      	; 0x1fb6 <HLED_VidLed_On+0x6>
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	9a 83       	std	Y+2, r25	; 0x02
    1fbc:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    1fbe:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc2:	81 81       	ldd	r24, Z+1	; 0x01
    1fc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc8:	90 81       	ld	r25, Z
    1fca:	69 2f       	mov	r22, r25
    1fcc:	41 e0       	ldi	r20, 0x01	; 1
    1fce:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
}
    1fd2:	0f 90       	pop	r0
    1fd4:	0f 90       	pop	r0
    1fd6:	cf 91       	pop	r28
    1fd8:	df 91       	pop	r29
    1fda:	08 95       	ret

00001fdc <HLED_VidLed_Off>:
void HLED_VidLed_Off(LED_t *Copy_Led)
{
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	00 d0       	rcall	.+0      	; 0x1fe2 <HLED_VidLed_Off+0x6>
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	9a 83       	std	Y+2, r25	; 0x02
    1fe8:	89 83       	std	Y+1, r24	; 0x01
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    1fea:	e9 81       	ldd	r30, Y+1	; 0x01
    1fec:	fa 81       	ldd	r31, Y+2	; 0x02
    1fee:	81 81       	ldd	r24, Z+1	; 0x01
    1ff0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff4:	90 81       	ld	r25, Z
    1ff6:	69 2f       	mov	r22, r25
    1ff8:	40 e0       	ldi	r20, 0x00	; 0
    1ffa:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
}
    1ffe:	0f 90       	pop	r0
    2000:	0f 90       	pop	r0
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <HLED_VidLed_Toggle>:
void HLED_VidLed_Toggle(LED_t *Copy_Led)
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	00 d0       	rcall	.+0      	; 0x200e <HLED_VidLed_Toggle+0x6>
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	9a 83       	std	Y+2, r25	; 0x02
    2014:	89 83       	std	Y+1, r24	; 0x01
	/*Toggle Function*/
	static u8 Flag=0;
	if(Flag==0)
    2016:	80 91 90 00 	lds	r24, 0x0090
    201a:	88 23       	and	r24, r24
    201c:	71 f4       	brne	.+28     	; 0x203a <HLED_VidLed_Toggle+0x32>
	{
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_HIGH);
    201e:	e9 81       	ldd	r30, Y+1	; 0x01
    2020:	fa 81       	ldd	r31, Y+2	; 0x02
    2022:	81 81       	ldd	r24, Z+1	; 0x01
    2024:	e9 81       	ldd	r30, Y+1	; 0x01
    2026:	fa 81       	ldd	r31, Y+2	; 0x02
    2028:	90 81       	ld	r25, Z
    202a:	69 2f       	mov	r22, r25
    202c:	41 e0       	ldi	r20, 0x01	; 1
    202e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
	Flag=1;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	80 93 90 00 	sts	0x0090, r24
    2038:	0c c0       	rjmp	.+24     	; 0x2052 <HLED_VidLed_Toggle+0x4a>
	}
	else
	{
	MDIO_Error_State_SetPinValue(Copy_Led->Copy_u8Pin,Copy_Led->Copy_u8Port,PIN_LOW);
    203a:	e9 81       	ldd	r30, Y+1	; 0x01
    203c:	fa 81       	ldd	r31, Y+2	; 0x02
    203e:	81 81       	ldd	r24, Z+1	; 0x01
    2040:	e9 81       	ldd	r30, Y+1	; 0x01
    2042:	fa 81       	ldd	r31, Y+2	; 0x02
    2044:	90 81       	ld	r25, Z
    2046:	69 2f       	mov	r22, r25
    2048:	40 e0       	ldi	r20, 0x00	; 0
    204a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
	Flag=0;
    204e:	10 92 90 00 	sts	0x0090, r1
	}

}
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <HKPD_VidInit>:
		'+'
		},
};
/*KPD INIT*/
void HKPD_VidInit(void)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
	/* Set Row Pins as an Input */
	MDIO_Error_State_SetPinDirection(ROW_PIN0,ROW_PORT,PIN_INPUT);
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	61 e0       	ldi	r22, 0x01	; 1
    2068:	40 e0       	ldi	r20, 0x00	; 0
    206a:	0e 94 26 0b 	call	0x164c	; 0x164c <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN1,ROW_PORT,PIN_INPUT);
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	61 e0       	ldi	r22, 0x01	; 1
    2072:	40 e0       	ldi	r20, 0x00	; 0
    2074:	0e 94 26 0b 	call	0x164c	; 0x164c <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN2,ROW_PORT,PIN_INPUT);
    2078:	82 e0       	ldi	r24, 0x02	; 2
    207a:	61 e0       	ldi	r22, 0x01	; 1
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	0e 94 26 0b 	call	0x164c	; 0x164c <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(ROW_PIN3,ROW_PORT,PIN_INPUT);
    2082:	83 e0       	ldi	r24, 0x03	; 3
    2084:	61 e0       	ldi	r22, 0x01	; 1
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	0e 94 26 0b 	call	0x164c	; 0x164c <MDIO_Error_State_SetPinDirection>
	/* Set Column Pins as an Output */
	MDIO_Error_State_SetPinDirection(COL_PIN0,COL_PORT,PIN_OUTPUT);
    208c:	84 e0       	ldi	r24, 0x04	; 4
    208e:	61 e0       	ldi	r22, 0x01	; 1
    2090:	41 e0       	ldi	r20, 0x01	; 1
    2092:	0e 94 26 0b 	call	0x164c	; 0x164c <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN1,COL_PORT,PIN_OUTPUT);
    2096:	85 e0       	ldi	r24, 0x05	; 5
    2098:	61 e0       	ldi	r22, 0x01	; 1
    209a:	41 e0       	ldi	r20, 0x01	; 1
    209c:	0e 94 26 0b 	call	0x164c	; 0x164c <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN2,COL_PORT,PIN_OUTPUT);
    20a0:	86 e0       	ldi	r24, 0x06	; 6
    20a2:	61 e0       	ldi	r22, 0x01	; 1
    20a4:	41 e0       	ldi	r20, 0x01	; 1
    20a6:	0e 94 26 0b 	call	0x164c	; 0x164c <MDIO_Error_State_SetPinDirection>
	MDIO_Error_State_SetPinDirection(COL_PIN3,COL_PORT,PIN_OUTPUT);
    20aa:	87 e0       	ldi	r24, 0x07	; 7
    20ac:	61 e0       	ldi	r22, 0x01	; 1
    20ae:	41 e0       	ldi	r20, 0x01	; 1
    20b0:	0e 94 26 0b 	call	0x164c	; 0x164c <MDIO_Error_State_SetPinDirection>
	/* Active Pull Up Resistor For Row Pins */
	MDIO_Error_State_SetPinValue(ROW_PIN0,ROW_PORT,PIN_HIGH);
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	61 e0       	ldi	r22, 0x01	; 1
    20b8:	41 e0       	ldi	r20, 0x01	; 1
    20ba:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN1,ROW_PORT,PIN_HIGH);
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	61 e0       	ldi	r22, 0x01	; 1
    20c2:	41 e0       	ldi	r20, 0x01	; 1
    20c4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN2,ROW_PORT,PIN_HIGH);
    20c8:	82 e0       	ldi	r24, 0x02	; 2
    20ca:	61 e0       	ldi	r22, 0x01	; 1
    20cc:	41 e0       	ldi	r20, 0x01	; 1
    20ce:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(ROW_PIN3,ROW_PORT,PIN_HIGH);
    20d2:	83 e0       	ldi	r24, 0x03	; 3
    20d4:	61 e0       	ldi	r22, 0x01	; 1
    20d6:	41 e0       	ldi	r20, 0x01	; 1
    20d8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
	/* Initialize 4 Column Pins By Ones */
	MDIO_Error_State_SetPinValue(COL_PIN0,COL_PORT,PIN_HIGH);
    20dc:	84 e0       	ldi	r24, 0x04	; 4
    20de:	61 e0       	ldi	r22, 0x01	; 1
    20e0:	41 e0       	ldi	r20, 0x01	; 1
    20e2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN1,COL_PORT,PIN_HIGH);
    20e6:	85 e0       	ldi	r24, 0x05	; 5
    20e8:	61 e0       	ldi	r22, 0x01	; 1
    20ea:	41 e0       	ldi	r20, 0x01	; 1
    20ec:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN2,COL_PORT,PIN_HIGH);
    20f0:	86 e0       	ldi	r24, 0x06	; 6
    20f2:	61 e0       	ldi	r22, 0x01	; 1
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
	MDIO_Error_State_SetPinValue(COL_PIN3,COL_PORT,PIN_HIGH);
    20fa:	87 e0       	ldi	r24, 0x07	; 7
    20fc:	61 e0       	ldi	r22, 0x01	; 1
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
}
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <HKPD_U8GetKeyPressed>:
/*KPD Get pressed*/
u8 HKPD_U8GetKeyPressed(void)
{
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	62 97       	sbiw	r28, 0x12	; 18
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_U8RowCount;
	u8 LOC_U8ColCount;
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
    211e:	8f ef       	ldi	r24, 0xFF	; 255
    2120:	8f 87       	std	Y+15, r24	; 0x0f
	u8 LOC_U8PinState;
	/*Looping on columns of the keypad*/
	for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    2122:	84 e0       	ldi	r24, 0x04	; 4
    2124:	88 8b       	std	Y+16, r24	; 0x10
    2126:	b5 c0       	rjmp	.+362    	; 0x2292 <HKPD_U8GetKeyPressed+0x188>
	{
		/*Active the Column */
		MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
    2128:	88 89       	ldd	r24, Y+16	; 0x10
    212a:	61 e0       	ldi	r22, 0x01	; 1
    212c:	40 e0       	ldi	r20, 0x00	; 0
    212e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
		/*Loop to read the all row pins*/
		for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    2132:	19 8a       	std	Y+17, r1	; 0x11
    2134:	a2 c0       	rjmp	.+324    	; 0x227a <HKPD_U8GetKeyPressed+0x170>
		{
			/*check the status of the switch*/
			MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    2136:	9e 01       	movw	r18, r28
    2138:	2e 5e       	subi	r18, 0xEE	; 238
    213a:	3f 4f       	sbci	r19, 0xFF	; 255
    213c:	89 89       	ldd	r24, Y+17	; 0x11
    213e:	61 e0       	ldi	r22, 0x01	; 1
    2140:	a9 01       	movw	r20, r18
    2142:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <MDIO_Error_State_GetPinValue>
			if(LOC_U8PinState==0)
    2146:	8a 89       	ldd	r24, Y+18	; 0x12
    2148:	88 23       	and	r24, r24
    214a:	09 f0       	breq	.+2      	; 0x214e <HKPD_U8GetKeyPressed+0x44>
    214c:	93 c0       	rjmp	.+294    	; 0x2274 <HKPD_U8GetKeyPressed+0x16a>
			{
				/*Get the Value of the current pressed switch*/
				LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
    214e:	88 89       	ldd	r24, Y+16	; 0x10
    2150:	88 2f       	mov	r24, r24
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	ac 01       	movw	r20, r24
    2156:	44 50       	subi	r20, 0x04	; 4
    2158:	50 40       	sbci	r21, 0x00	; 0
    215a:	89 89       	ldd	r24, Y+17	; 0x11
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	ca 01       	movw	r24, r20
    2162:	88 0f       	add	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	88 0f       	add	r24, r24
    2168:	99 1f       	adc	r25, r25
    216a:	82 0f       	add	r24, r18
    216c:	93 1f       	adc	r25, r19
    216e:	fc 01       	movw	r30, r24
    2170:	e8 59       	subi	r30, 0x98	; 152
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	80 81       	ld	r24, Z
    2176:	8f 87       	std	Y+15, r24	; 0x0f
    2178:	08 c0       	rjmp	.+16     	; 0x218a <HKPD_U8GetKeyPressed+0x80>
				/*wait until the switch is released(Single Press)*/
				while(LOC_U8PinState==0)
				{
					MDIO_Error_State_GetPinValue(LOC_U8RowCount,ROW_PORT,&LOC_U8PinState);
    217a:	9e 01       	movw	r18, r28
    217c:	2e 5e       	subi	r18, 0xEE	; 238
    217e:	3f 4f       	sbci	r19, 0xFF	; 255
    2180:	89 89       	ldd	r24, Y+17	; 0x11
    2182:	61 e0       	ldi	r22, 0x01	; 1
    2184:	a9 01       	movw	r20, r18
    2186:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <MDIO_Error_State_GetPinValue>
			if(LOC_U8PinState==0)
			{
				/*Get the Value of the current pressed switch*/
				LOC_U8ReturnValue=KPD_u8SwitchVal[LOC_U8ColCount-COL_INIT][LOC_U8RowCount-ROW_INIT];
				/*wait until the switch is released(Single Press)*/
				while(LOC_U8PinState==0)
    218a:	8a 89       	ldd	r24, Y+18	; 0x12
    218c:	88 23       	and	r24, r24
    218e:	a9 f3       	breq	.-22     	; 0x217a <HKPD_U8GetKeyPressed+0x70>
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	a0 e2       	ldi	r26, 0x20	; 32
    2196:	b1 e4       	ldi	r27, 0x41	; 65
    2198:	8b 87       	std	Y+11, r24	; 0x0b
    219a:	9c 87       	std	Y+12, r25	; 0x0c
    219c:	ad 87       	std	Y+13, r26	; 0x0d
    219e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	4a e7       	ldi	r20, 0x7A	; 122
    21ae:	53 e4       	ldi	r21, 0x43	; 67
    21b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	8f 83       	std	Y+7, r24	; 0x07
    21ba:	98 87       	std	Y+8, r25	; 0x08
    21bc:	a9 87       	std	Y+9, r26	; 0x09
    21be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21c0:	6f 81       	ldd	r22, Y+7	; 0x07
    21c2:	78 85       	ldd	r23, Y+8	; 0x08
    21c4:	89 85       	ldd	r24, Y+9	; 0x09
    21c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e8       	ldi	r20, 0x80	; 128
    21ce:	5f e3       	ldi	r21, 0x3F	; 63
    21d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d4:	88 23       	and	r24, r24
    21d6:	2c f4       	brge	.+10     	; 0x21e2 <HKPD_U8GetKeyPressed+0xd8>
		__ticks = 1;
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	9e 83       	std	Y+6, r25	; 0x06
    21de:	8d 83       	std	Y+5, r24	; 0x05
    21e0:	3f c0       	rjmp	.+126    	; 0x2260 <HKPD_U8GetKeyPressed+0x156>
	else if (__tmp > 65535)
    21e2:	6f 81       	ldd	r22, Y+7	; 0x07
    21e4:	78 85       	ldd	r23, Y+8	; 0x08
    21e6:	89 85       	ldd	r24, Y+9	; 0x09
    21e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	3f ef       	ldi	r19, 0xFF	; 255
    21ee:	4f e7       	ldi	r20, 0x7F	; 127
    21f0:	57 e4       	ldi	r21, 0x47	; 71
    21f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f6:	18 16       	cp	r1, r24
    21f8:	4c f5       	brge	.+82     	; 0x224c <HKPD_U8GetKeyPressed+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2200:	9e 85       	ldd	r25, Y+14	; 0x0e
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	40 e2       	ldi	r20, 0x20	; 32
    2208:	51 e4       	ldi	r21, 0x41	; 65
    220a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220e:	dc 01       	movw	r26, r24
    2210:	cb 01       	movw	r24, r22
    2212:	bc 01       	movw	r22, r24
    2214:	cd 01       	movw	r24, r26
    2216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	9e 83       	std	Y+6, r25	; 0x06
    2220:	8d 83       	std	Y+5, r24	; 0x05
    2222:	0f c0       	rjmp	.+30     	; 0x2242 <HKPD_U8GetKeyPressed+0x138>
    2224:	89 e1       	ldi	r24, 0x19	; 25
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	9c 83       	std	Y+4, r25	; 0x04
    222a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
    222e:	9c 81       	ldd	r25, Y+4	; 0x04
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	f1 f7       	brne	.-4      	; 0x2230 <HKPD_U8GetKeyPressed+0x126>
    2234:	9c 83       	std	Y+4, r25	; 0x04
    2236:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2238:	8d 81       	ldd	r24, Y+5	; 0x05
    223a:	9e 81       	ldd	r25, Y+6	; 0x06
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	9e 83       	std	Y+6, r25	; 0x06
    2240:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2242:	8d 81       	ldd	r24, Y+5	; 0x05
    2244:	9e 81       	ldd	r25, Y+6	; 0x06
    2246:	00 97       	sbiw	r24, 0x00	; 0
    2248:	69 f7       	brne	.-38     	; 0x2224 <HKPD_U8GetKeyPressed+0x11a>
    224a:	14 c0       	rjmp	.+40     	; 0x2274 <HKPD_U8GetKeyPressed+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    224c:	6f 81       	ldd	r22, Y+7	; 0x07
    224e:	78 85       	ldd	r23, Y+8	; 0x08
    2250:	89 85       	ldd	r24, Y+9	; 0x09
    2252:	9a 85       	ldd	r25, Y+10	; 0x0a
    2254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	9e 83       	std	Y+6, r25	; 0x06
    225e:	8d 83       	std	Y+5, r24	; 0x05
    2260:	8d 81       	ldd	r24, Y+5	; 0x05
    2262:	9e 81       	ldd	r25, Y+6	; 0x06
    2264:	9a 83       	std	Y+2, r25	; 0x02
    2266:	89 83       	std	Y+1, r24	; 0x01
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	9a 81       	ldd	r25, Y+2	; 0x02
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <HKPD_U8GetKeyPressed+0x162>
    2270:	9a 83       	std	Y+2, r25	; 0x02
    2272:	89 83       	std	Y+1, r24	; 0x01
	for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
	{
		/*Active the Column */
		MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_LOW);
		/*Loop to read the all row pins*/
		for(LOC_U8RowCount=ROW_INIT;LOC_U8RowCount<ROW_END;LOC_U8RowCount++)
    2274:	89 89       	ldd	r24, Y+17	; 0x11
    2276:	8f 5f       	subi	r24, 0xFF	; 255
    2278:	89 8b       	std	Y+17, r24	; 0x11
    227a:	89 89       	ldd	r24, Y+17	; 0x11
    227c:	84 30       	cpi	r24, 0x04	; 4
    227e:	08 f4       	brcc	.+2      	; 0x2282 <HKPD_U8GetKeyPressed+0x178>
    2280:	5a cf       	rjmp	.-332    	; 0x2136 <HKPD_U8GetKeyPressed+0x2c>
			{
				/*Do Nothing*/
			}
		}
		/*Deactivate the Column*/
		MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
    2282:	88 89       	ldd	r24, Y+16	; 0x10
    2284:	61 e0       	ldi	r22, 0x01	; 1
    2286:	41 e0       	ldi	r20, 0x01	; 1
    2288:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
	u8 LOC_U8ColCount;
	/*Initialize the switch status to NOT PRESSED*/
	u8 LOC_U8ReturnValue=NOT_PRESSED;
	u8 LOC_U8PinState;
	/*Looping on columns of the keypad*/
	for(LOC_U8ColCount=COL_INIT;LOC_U8ColCount<COL_END;LOC_U8ColCount++)
    228c:	88 89       	ldd	r24, Y+16	; 0x10
    228e:	8f 5f       	subi	r24, 0xFF	; 255
    2290:	88 8b       	std	Y+16, r24	; 0x10
    2292:	88 89       	ldd	r24, Y+16	; 0x10
    2294:	88 30       	cpi	r24, 0x08	; 8
    2296:	08 f4       	brcc	.+2      	; 0x229a <HKPD_U8GetKeyPressed+0x190>
    2298:	47 cf       	rjmp	.-370    	; 0x2128 <HKPD_U8GetKeyPressed+0x1e>
			}
		}
		/*Deactivate the Column*/
		MDIO_Error_State_SetPinValue(LOC_U8ColCount,COL_PORT,PIN_HIGH);
	}
	return LOC_U8ReturnValue;
    229a:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    229c:	62 96       	adiw	r28, 0x12	; 18
    229e:	0f b6       	in	r0, 0x3f	; 63
    22a0:	f8 94       	cli
    22a2:	de bf       	out	0x3e, r29	; 62
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	cd bf       	out	0x3d, r28	; 61
    22a8:	cf 91       	pop	r28
    22aa:	df 91       	pop	r29
    22ac:	08 95       	ret

000022ae <HCLCD_VidWriteCommand_8Bits>:
#include"HCLCD_Interface.h"

#include"util/delay.h"

void HCLCD_VidWriteCommand_8Bits(u8 Copy_u8Command)
{
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	cd b7       	in	r28, 0x3d	; 61
    22b4:	de b7       	in	r29, 0x3e	; 62
    22b6:	6d 97       	sbiw	r28, 0x1d	; 29
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	8d 8f       	std	Y+29, r24	; 0x1d
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	60 e0       	ldi	r22, 0x00	; 0
    22c8:	40 e0       	ldi	r20, 0x00	; 0
    22ca:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	//MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Command);
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    22d2:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    22d6:	82 e0       	ldi	r24, 0x02	; 2
    22d8:	60 e0       	ldi	r22, 0x00	; 0
    22da:	41 e0       	ldi	r20, 0x01	; 1
    22dc:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	a0 e0       	ldi	r26, 0x00	; 0
    22e6:	b0 e4       	ldi	r27, 0x40	; 64
    22e8:	89 8f       	std	Y+25, r24	; 0x19
    22ea:	9a 8f       	std	Y+26, r25	; 0x1a
    22ec:	ab 8f       	std	Y+27, r26	; 0x1b
    22ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f0:	69 8d       	ldd	r22, Y+25	; 0x19
    22f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	4a e7       	ldi	r20, 0x7A	; 122
    22fe:	53 e4       	ldi	r21, 0x43	; 67
    2300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	8d 8b       	std	Y+21, r24	; 0x15
    230a:	9e 8b       	std	Y+22, r25	; 0x16
    230c:	af 8b       	std	Y+23, r26	; 0x17
    230e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2310:	6d 89       	ldd	r22, Y+21	; 0x15
    2312:	7e 89       	ldd	r23, Y+22	; 0x16
    2314:	8f 89       	ldd	r24, Y+23	; 0x17
    2316:	98 8d       	ldd	r25, Y+24	; 0x18
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e8       	ldi	r20, 0x80	; 128
    231e:	5f e3       	ldi	r21, 0x3F	; 63
    2320:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2324:	88 23       	and	r24, r24
    2326:	2c f4       	brge	.+10     	; 0x2332 <HCLCD_VidWriteCommand_8Bits+0x84>
		__ticks = 1;
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	9c 8b       	std	Y+20, r25	; 0x14
    232e:	8b 8b       	std	Y+19, r24	; 0x13
    2330:	3f c0       	rjmp	.+126    	; 0x23b0 <HCLCD_VidWriteCommand_8Bits+0x102>
	else if (__tmp > 65535)
    2332:	6d 89       	ldd	r22, Y+21	; 0x15
    2334:	7e 89       	ldd	r23, Y+22	; 0x16
    2336:	8f 89       	ldd	r24, Y+23	; 0x17
    2338:	98 8d       	ldd	r25, Y+24	; 0x18
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	3f ef       	ldi	r19, 0xFF	; 255
    233e:	4f e7       	ldi	r20, 0x7F	; 127
    2340:	57 e4       	ldi	r21, 0x47	; 71
    2342:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2346:	18 16       	cp	r1, r24
    2348:	4c f5       	brge	.+82     	; 0x239c <HCLCD_VidWriteCommand_8Bits+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234a:	69 8d       	ldd	r22, Y+25	; 0x19
    234c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    234e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2350:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	40 e2       	ldi	r20, 0x20	; 32
    2358:	51 e4       	ldi	r21, 0x41	; 65
    235a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	bc 01       	movw	r22, r24
    2364:	cd 01       	movw	r24, r26
    2366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	9c 8b       	std	Y+20, r25	; 0x14
    2370:	8b 8b       	std	Y+19, r24	; 0x13
    2372:	0f c0       	rjmp	.+30     	; 0x2392 <HCLCD_VidWriteCommand_8Bits+0xe4>
    2374:	89 e1       	ldi	r24, 0x19	; 25
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	9a 8b       	std	Y+18, r25	; 0x12
    237a:	89 8b       	std	Y+17, r24	; 0x11
    237c:	89 89       	ldd	r24, Y+17	; 0x11
    237e:	9a 89       	ldd	r25, Y+18	; 0x12
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	f1 f7       	brne	.-4      	; 0x2380 <HCLCD_VidWriteCommand_8Bits+0xd2>
    2384:	9a 8b       	std	Y+18, r25	; 0x12
    2386:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2388:	8b 89       	ldd	r24, Y+19	; 0x13
    238a:	9c 89       	ldd	r25, Y+20	; 0x14
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	9c 8b       	std	Y+20, r25	; 0x14
    2390:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2392:	8b 89       	ldd	r24, Y+19	; 0x13
    2394:	9c 89       	ldd	r25, Y+20	; 0x14
    2396:	00 97       	sbiw	r24, 0x00	; 0
    2398:	69 f7       	brne	.-38     	; 0x2374 <HCLCD_VidWriteCommand_8Bits+0xc6>
    239a:	14 c0       	rjmp	.+40     	; 0x23c4 <HCLCD_VidWriteCommand_8Bits+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239c:	6d 89       	ldd	r22, Y+21	; 0x15
    239e:	7e 89       	ldd	r23, Y+22	; 0x16
    23a0:	8f 89       	ldd	r24, Y+23	; 0x17
    23a2:	98 8d       	ldd	r25, Y+24	; 0x18
    23a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	9c 8b       	std	Y+20, r25	; 0x14
    23ae:	8b 8b       	std	Y+19, r24	; 0x13
    23b0:	8b 89       	ldd	r24, Y+19	; 0x13
    23b2:	9c 89       	ldd	r25, Y+20	; 0x14
    23b4:	98 8b       	std	Y+16, r25	; 0x10
    23b6:	8f 87       	std	Y+15, r24	; 0x0f
    23b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ba:	98 89       	ldd	r25, Y+16	; 0x10
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <HCLCD_VidWriteCommand_8Bits+0x10e>
    23c0:	98 8b       	std	Y+16, r25	; 0x10
    23c2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    23c4:	82 e0       	ldi	r24, 0x02	; 2
    23c6:	60 e0       	ldi	r22, 0x00	; 0
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	a0 e0       	ldi	r26, 0x00	; 0
    23d4:	b0 e4       	ldi	r27, 0x40	; 64
    23d6:	8b 87       	std	Y+11, r24	; 0x0b
    23d8:	9c 87       	std	Y+12, r25	; 0x0c
    23da:	ad 87       	std	Y+13, r26	; 0x0d
    23dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23de:	6b 85       	ldd	r22, Y+11	; 0x0b
    23e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	4a e7       	ldi	r20, 0x7A	; 122
    23ec:	53 e4       	ldi	r21, 0x43	; 67
    23ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	8f 83       	std	Y+7, r24	; 0x07
    23f8:	98 87       	std	Y+8, r25	; 0x08
    23fa:	a9 87       	std	Y+9, r26	; 0x09
    23fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2400:	78 85       	ldd	r23, Y+8	; 0x08
    2402:	89 85       	ldd	r24, Y+9	; 0x09
    2404:	9a 85       	ldd	r25, Y+10	; 0x0a
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e8       	ldi	r20, 0x80	; 128
    240c:	5f e3       	ldi	r21, 0x3F	; 63
    240e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2412:	88 23       	and	r24, r24
    2414:	2c f4       	brge	.+10     	; 0x2420 <HCLCD_VidWriteCommand_8Bits+0x172>
		__ticks = 1;
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	9e 83       	std	Y+6, r25	; 0x06
    241c:	8d 83       	std	Y+5, r24	; 0x05
    241e:	3f c0       	rjmp	.+126    	; 0x249e <HCLCD_VidWriteCommand_8Bits+0x1f0>
	else if (__tmp > 65535)
    2420:	6f 81       	ldd	r22, Y+7	; 0x07
    2422:	78 85       	ldd	r23, Y+8	; 0x08
    2424:	89 85       	ldd	r24, Y+9	; 0x09
    2426:	9a 85       	ldd	r25, Y+10	; 0x0a
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	3f ef       	ldi	r19, 0xFF	; 255
    242c:	4f e7       	ldi	r20, 0x7F	; 127
    242e:	57 e4       	ldi	r21, 0x47	; 71
    2430:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2434:	18 16       	cp	r1, r24
    2436:	4c f5       	brge	.+82     	; 0x248a <HCLCD_VidWriteCommand_8Bits+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2438:	6b 85       	ldd	r22, Y+11	; 0x0b
    243a:	7c 85       	ldd	r23, Y+12	; 0x0c
    243c:	8d 85       	ldd	r24, Y+13	; 0x0d
    243e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	40 e2       	ldi	r20, 0x20	; 32
    2446:	51 e4       	ldi	r21, 0x41	; 65
    2448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	9e 83       	std	Y+6, r25	; 0x06
    245e:	8d 83       	std	Y+5, r24	; 0x05
    2460:	0f c0       	rjmp	.+30     	; 0x2480 <HCLCD_VidWriteCommand_8Bits+0x1d2>
    2462:	89 e1       	ldi	r24, 0x19	; 25
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	9c 83       	std	Y+4, r25	; 0x04
    2468:	8b 83       	std	Y+3, r24	; 0x03
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	9c 81       	ldd	r25, Y+4	; 0x04
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	f1 f7       	brne	.-4      	; 0x246e <HCLCD_VidWriteCommand_8Bits+0x1c0>
    2472:	9c 83       	std	Y+4, r25	; 0x04
    2474:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2476:	8d 81       	ldd	r24, Y+5	; 0x05
    2478:	9e 81       	ldd	r25, Y+6	; 0x06
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	9e 83       	std	Y+6, r25	; 0x06
    247e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2480:	8d 81       	ldd	r24, Y+5	; 0x05
    2482:	9e 81       	ldd	r25, Y+6	; 0x06
    2484:	00 97       	sbiw	r24, 0x00	; 0
    2486:	69 f7       	brne	.-38     	; 0x2462 <HCLCD_VidWriteCommand_8Bits+0x1b4>
    2488:	14 c0       	rjmp	.+40     	; 0x24b2 <HCLCD_VidWriteCommand_8Bits+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    248a:	6f 81       	ldd	r22, Y+7	; 0x07
    248c:	78 85       	ldd	r23, Y+8	; 0x08
    248e:	89 85       	ldd	r24, Y+9	; 0x09
    2490:	9a 85       	ldd	r25, Y+10	; 0x0a
    2492:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	9e 83       	std	Y+6, r25	; 0x06
    249c:	8d 83       	std	Y+5, r24	; 0x05
    249e:	8d 81       	ldd	r24, Y+5	; 0x05
    24a0:	9e 81       	ldd	r25, Y+6	; 0x06
    24a2:	9a 83       	std	Y+2, r25	; 0x02
    24a4:	89 83       	std	Y+1, r24	; 0x01
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	9a 81       	ldd	r25, Y+2	; 0x02
    24aa:	01 97       	sbiw	r24, 0x01	; 1
    24ac:	f1 f7       	brne	.-4      	; 0x24aa <HCLCD_VidWriteCommand_8Bits+0x1fc>
    24ae:	9a 83       	std	Y+2, r25	; 0x02
    24b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);	
    24b2:	82 e0       	ldi	r24, 0x02	; 2
    24b4:	60 e0       	ldi	r22, 0x00	; 0
    24b6:	41 e0       	ldi	r20, 0x01	; 1
    24b8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
}
    24bc:	6d 96       	adiw	r28, 0x1d	; 29
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	cd bf       	out	0x3d, r28	; 61
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	08 95       	ret

000024ce <HCLCD_Vid8Bits_Init>:

void HCLCD_Vid8Bits_Init(void)
{
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
    24d6:	e8 97       	sbiw	r28, 0x38	; 56
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
	/*LCD Data and control port intialization*/
	MDIO_Error_State_SetPortDirection(DATA_PORT,PORT_OUTPUT);
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	6f ef       	ldi	r22, 0xFF	; 255
    24e6:	0e 94 29 0c 	call	0x1852	; 0x1852 <MDIO_Error_State_SetPortDirection>
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	60 e0       	ldi	r22, 0x00	; 0
    24ee:	41 e0       	ldi	r20, 0x01	; 1
    24f0:	0e 94 26 0b 	call	0x164c	; 0x164c <MDIO_Error_State_SetPinDirection>
	//MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    24f4:	82 e0       	ldi	r24, 0x02	; 2
    24f6:	60 e0       	ldi	r22, 0x00	; 0
    24f8:	41 e0       	ldi	r20, 0x01	; 1
    24fa:	0e 94 26 0b 	call	0x164c	; 0x164c <MDIO_Error_State_SetPinDirection>
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	a0 ef       	ldi	r26, 0xF0	; 240
    2504:	b1 e4       	ldi	r27, 0x41	; 65
    2506:	8d ab       	std	Y+53, r24	; 0x35
    2508:	9e ab       	std	Y+54, r25	; 0x36
    250a:	af ab       	std	Y+55, r26	; 0x37
    250c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    250e:	6d a9       	ldd	r22, Y+53	; 0x35
    2510:	7e a9       	ldd	r23, Y+54	; 0x36
    2512:	8f a9       	ldd	r24, Y+55	; 0x37
    2514:	98 ad       	ldd	r25, Y+56	; 0x38
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	4a e7       	ldi	r20, 0x7A	; 122
    251c:	53 e4       	ldi	r21, 0x43	; 67
    251e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	89 ab       	std	Y+49, r24	; 0x31
    2528:	9a ab       	std	Y+50, r25	; 0x32
    252a:	ab ab       	std	Y+51, r26	; 0x33
    252c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    252e:	69 a9       	ldd	r22, Y+49	; 0x31
    2530:	7a a9       	ldd	r23, Y+50	; 0x32
    2532:	8b a9       	ldd	r24, Y+51	; 0x33
    2534:	9c a9       	ldd	r25, Y+52	; 0x34
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e8       	ldi	r20, 0x80	; 128
    253c:	5f e3       	ldi	r21, 0x3F	; 63
    253e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2542:	88 23       	and	r24, r24
    2544:	2c f4       	brge	.+10     	; 0x2550 <HCLCD_Vid8Bits_Init+0x82>
		__ticks = 1;
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	98 ab       	std	Y+48, r25	; 0x30
    254c:	8f a7       	std	Y+47, r24	; 0x2f
    254e:	3f c0       	rjmp	.+126    	; 0x25ce <HCLCD_Vid8Bits_Init+0x100>
	else if (__tmp > 65535)
    2550:	69 a9       	ldd	r22, Y+49	; 0x31
    2552:	7a a9       	ldd	r23, Y+50	; 0x32
    2554:	8b a9       	ldd	r24, Y+51	; 0x33
    2556:	9c a9       	ldd	r25, Y+52	; 0x34
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	3f ef       	ldi	r19, 0xFF	; 255
    255c:	4f e7       	ldi	r20, 0x7F	; 127
    255e:	57 e4       	ldi	r21, 0x47	; 71
    2560:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2564:	18 16       	cp	r1, r24
    2566:	4c f5       	brge	.+82     	; 0x25ba <HCLCD_Vid8Bits_Init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2568:	6d a9       	ldd	r22, Y+53	; 0x35
    256a:	7e a9       	ldd	r23, Y+54	; 0x36
    256c:	8f a9       	ldd	r24, Y+55	; 0x37
    256e:	98 ad       	ldd	r25, Y+56	; 0x38
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	40 e2       	ldi	r20, 0x20	; 32
    2576:	51 e4       	ldi	r21, 0x41	; 65
    2578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	bc 01       	movw	r22, r24
    2582:	cd 01       	movw	r24, r26
    2584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	98 ab       	std	Y+48, r25	; 0x30
    258e:	8f a7       	std	Y+47, r24	; 0x2f
    2590:	0f c0       	rjmp	.+30     	; 0x25b0 <HCLCD_Vid8Bits_Init+0xe2>
    2592:	89 e1       	ldi	r24, 0x19	; 25
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	9e a7       	std	Y+46, r25	; 0x2e
    2598:	8d a7       	std	Y+45, r24	; 0x2d
    259a:	8d a5       	ldd	r24, Y+45	; 0x2d
    259c:	9e a5       	ldd	r25, Y+46	; 0x2e
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	f1 f7       	brne	.-4      	; 0x259e <HCLCD_Vid8Bits_Init+0xd0>
    25a2:	9e a7       	std	Y+46, r25	; 0x2e
    25a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    25a8:	98 a9       	ldd	r25, Y+48	; 0x30
    25aa:	01 97       	sbiw	r24, 0x01	; 1
    25ac:	98 ab       	std	Y+48, r25	; 0x30
    25ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    25b2:	98 a9       	ldd	r25, Y+48	; 0x30
    25b4:	00 97       	sbiw	r24, 0x00	; 0
    25b6:	69 f7       	brne	.-38     	; 0x2592 <HCLCD_Vid8Bits_Init+0xc4>
    25b8:	14 c0       	rjmp	.+40     	; 0x25e2 <HCLCD_Vid8Bits_Init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ba:	69 a9       	ldd	r22, Y+49	; 0x31
    25bc:	7a a9       	ldd	r23, Y+50	; 0x32
    25be:	8b a9       	ldd	r24, Y+51	; 0x33
    25c0:	9c a9       	ldd	r25, Y+52	; 0x34
    25c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	98 ab       	std	Y+48, r25	; 0x30
    25cc:	8f a7       	std	Y+47, r24	; 0x2f
    25ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    25d0:	98 a9       	ldd	r25, Y+48	; 0x30
    25d2:	9c a7       	std	Y+44, r25	; 0x2c
    25d4:	8b a7       	std	Y+43, r24	; 0x2b
    25d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    25d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    25da:	01 97       	sbiw	r24, 0x01	; 1
    25dc:	f1 f7       	brne	.-4      	; 0x25da <HCLCD_Vid8Bits_Init+0x10c>
    25de:	9c a7       	std	Y+44, r25	; 0x2c
    25e0:	8b a7       	std	Y+43, r24	; 0x2b

	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_VidWriteCommand_8Bits(HCLCD_FUNCTION_SET);
    25e2:	88 e2       	ldi	r24, 0x28	; 40
    25e4:	0e 94 57 11 	call	0x22ae	; 0x22ae <HCLCD_VidWriteCommand_8Bits>
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	a0 e8       	ldi	r26, 0x80	; 128
    25ee:	bf e3       	ldi	r27, 0x3F	; 63
    25f0:	8f a3       	std	Y+39, r24	; 0x27
    25f2:	98 a7       	std	Y+40, r25	; 0x28
    25f4:	a9 a7       	std	Y+41, r26	; 0x29
    25f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25f8:	6f a1       	ldd	r22, Y+39	; 0x27
    25fa:	78 a5       	ldd	r23, Y+40	; 0x28
    25fc:	89 a5       	ldd	r24, Y+41	; 0x29
    25fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	4a e7       	ldi	r20, 0x7A	; 122
    2606:	53 e4       	ldi	r21, 0x43	; 67
    2608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	8b a3       	std	Y+35, r24	; 0x23
    2612:	9c a3       	std	Y+36, r25	; 0x24
    2614:	ad a3       	std	Y+37, r26	; 0x25
    2616:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2618:	6b a1       	ldd	r22, Y+35	; 0x23
    261a:	7c a1       	ldd	r23, Y+36	; 0x24
    261c:	8d a1       	ldd	r24, Y+37	; 0x25
    261e:	9e a1       	ldd	r25, Y+38	; 0x26
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	40 e8       	ldi	r20, 0x80	; 128
    2626:	5f e3       	ldi	r21, 0x3F	; 63
    2628:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    262c:	88 23       	and	r24, r24
    262e:	2c f4       	brge	.+10     	; 0x263a <HCLCD_Vid8Bits_Init+0x16c>
		__ticks = 1;
    2630:	81 e0       	ldi	r24, 0x01	; 1
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	9a a3       	std	Y+34, r25	; 0x22
    2636:	89 a3       	std	Y+33, r24	; 0x21
    2638:	3f c0       	rjmp	.+126    	; 0x26b8 <HCLCD_Vid8Bits_Init+0x1ea>
	else if (__tmp > 65535)
    263a:	6b a1       	ldd	r22, Y+35	; 0x23
    263c:	7c a1       	ldd	r23, Y+36	; 0x24
    263e:	8d a1       	ldd	r24, Y+37	; 0x25
    2640:	9e a1       	ldd	r25, Y+38	; 0x26
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	3f ef       	ldi	r19, 0xFF	; 255
    2646:	4f e7       	ldi	r20, 0x7F	; 127
    2648:	57 e4       	ldi	r21, 0x47	; 71
    264a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    264e:	18 16       	cp	r1, r24
    2650:	4c f5       	brge	.+82     	; 0x26a4 <HCLCD_Vid8Bits_Init+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2652:	6f a1       	ldd	r22, Y+39	; 0x27
    2654:	78 a5       	ldd	r23, Y+40	; 0x28
    2656:	89 a5       	ldd	r24, Y+41	; 0x29
    2658:	9a a5       	ldd	r25, Y+42	; 0x2a
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e2       	ldi	r20, 0x20	; 32
    2660:	51 e4       	ldi	r21, 0x41	; 65
    2662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	bc 01       	movw	r22, r24
    266c:	cd 01       	movw	r24, r26
    266e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	9a a3       	std	Y+34, r25	; 0x22
    2678:	89 a3       	std	Y+33, r24	; 0x21
    267a:	0f c0       	rjmp	.+30     	; 0x269a <HCLCD_Vid8Bits_Init+0x1cc>
    267c:	89 e1       	ldi	r24, 0x19	; 25
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	98 a3       	std	Y+32, r25	; 0x20
    2682:	8f 8f       	std	Y+31, r24	; 0x1f
    2684:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2686:	98 a1       	ldd	r25, Y+32	; 0x20
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	f1 f7       	brne	.-4      	; 0x2688 <HCLCD_Vid8Bits_Init+0x1ba>
    268c:	98 a3       	std	Y+32, r25	; 0x20
    268e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2690:	89 a1       	ldd	r24, Y+33	; 0x21
    2692:	9a a1       	ldd	r25, Y+34	; 0x22
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	9a a3       	std	Y+34, r25	; 0x22
    2698:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    269a:	89 a1       	ldd	r24, Y+33	; 0x21
    269c:	9a a1       	ldd	r25, Y+34	; 0x22
    269e:	00 97       	sbiw	r24, 0x00	; 0
    26a0:	69 f7       	brne	.-38     	; 0x267c <HCLCD_Vid8Bits_Init+0x1ae>
    26a2:	14 c0       	rjmp	.+40     	; 0x26cc <HCLCD_Vid8Bits_Init+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a4:	6b a1       	ldd	r22, Y+35	; 0x23
    26a6:	7c a1       	ldd	r23, Y+36	; 0x24
    26a8:	8d a1       	ldd	r24, Y+37	; 0x25
    26aa:	9e a1       	ldd	r25, Y+38	; 0x26
    26ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	9a a3       	std	Y+34, r25	; 0x22
    26b6:	89 a3       	std	Y+33, r24	; 0x21
    26b8:	89 a1       	ldd	r24, Y+33	; 0x21
    26ba:	9a a1       	ldd	r25, Y+34	; 0x22
    26bc:	9e 8f       	std	Y+30, r25	; 0x1e
    26be:	8d 8f       	std	Y+29, r24	; 0x1d
    26c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26c4:	01 97       	sbiw	r24, 0x01	; 1
    26c6:	f1 f7       	brne	.-4      	; 0x26c4 <HCLCD_Vid8Bits_Init+0x1f6>
    26c8:	9e 8f       	std	Y+30, r25	; 0x1e
    26ca:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_VidWriteCommand_8Bits(HCLCD_DISPLAY_ON_OFF);
    26cc:	8f e0       	ldi	r24, 0x0F	; 15
    26ce:	0e 94 57 11 	call	0x22ae	; 0x22ae <HCLCD_VidWriteCommand_8Bits>
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	a0 e8       	ldi	r26, 0x80	; 128
    26d8:	bf e3       	ldi	r27, 0x3F	; 63
    26da:	89 8f       	std	Y+25, r24	; 0x19
    26dc:	9a 8f       	std	Y+26, r25	; 0x1a
    26de:	ab 8f       	std	Y+27, r26	; 0x1b
    26e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26e2:	69 8d       	ldd	r22, Y+25	; 0x19
    26e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	4a e7       	ldi	r20, 0x7A	; 122
    26f0:	53 e4       	ldi	r21, 0x43	; 67
    26f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	8d 8b       	std	Y+21, r24	; 0x15
    26fc:	9e 8b       	std	Y+22, r25	; 0x16
    26fe:	af 8b       	std	Y+23, r26	; 0x17
    2700:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2702:	6d 89       	ldd	r22, Y+21	; 0x15
    2704:	7e 89       	ldd	r23, Y+22	; 0x16
    2706:	8f 89       	ldd	r24, Y+23	; 0x17
    2708:	98 8d       	ldd	r25, Y+24	; 0x18
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	40 e8       	ldi	r20, 0x80	; 128
    2710:	5f e3       	ldi	r21, 0x3F	; 63
    2712:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2716:	88 23       	and	r24, r24
    2718:	2c f4       	brge	.+10     	; 0x2724 <HCLCD_Vid8Bits_Init+0x256>
		__ticks = 1;
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	9c 8b       	std	Y+20, r25	; 0x14
    2720:	8b 8b       	std	Y+19, r24	; 0x13
    2722:	3f c0       	rjmp	.+126    	; 0x27a2 <HCLCD_Vid8Bits_Init+0x2d4>
	else if (__tmp > 65535)
    2724:	6d 89       	ldd	r22, Y+21	; 0x15
    2726:	7e 89       	ldd	r23, Y+22	; 0x16
    2728:	8f 89       	ldd	r24, Y+23	; 0x17
    272a:	98 8d       	ldd	r25, Y+24	; 0x18
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	3f ef       	ldi	r19, 0xFF	; 255
    2730:	4f e7       	ldi	r20, 0x7F	; 127
    2732:	57 e4       	ldi	r21, 0x47	; 71
    2734:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2738:	18 16       	cp	r1, r24
    273a:	4c f5       	brge	.+82     	; 0x278e <HCLCD_Vid8Bits_Init+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    273c:	69 8d       	ldd	r22, Y+25	; 0x19
    273e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2740:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2742:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e2       	ldi	r20, 0x20	; 32
    274a:	51 e4       	ldi	r21, 0x41	; 65
    274c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	bc 01       	movw	r22, r24
    2756:	cd 01       	movw	r24, r26
    2758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	9c 8b       	std	Y+20, r25	; 0x14
    2762:	8b 8b       	std	Y+19, r24	; 0x13
    2764:	0f c0       	rjmp	.+30     	; 0x2784 <HCLCD_Vid8Bits_Init+0x2b6>
    2766:	89 e1       	ldi	r24, 0x19	; 25
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	9a 8b       	std	Y+18, r25	; 0x12
    276c:	89 8b       	std	Y+17, r24	; 0x11
    276e:	89 89       	ldd	r24, Y+17	; 0x11
    2770:	9a 89       	ldd	r25, Y+18	; 0x12
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	f1 f7       	brne	.-4      	; 0x2772 <HCLCD_Vid8Bits_Init+0x2a4>
    2776:	9a 8b       	std	Y+18, r25	; 0x12
    2778:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    277a:	8b 89       	ldd	r24, Y+19	; 0x13
    277c:	9c 89       	ldd	r25, Y+20	; 0x14
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	9c 8b       	std	Y+20, r25	; 0x14
    2782:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2784:	8b 89       	ldd	r24, Y+19	; 0x13
    2786:	9c 89       	ldd	r25, Y+20	; 0x14
    2788:	00 97       	sbiw	r24, 0x00	; 0
    278a:	69 f7       	brne	.-38     	; 0x2766 <HCLCD_Vid8Bits_Init+0x298>
    278c:	14 c0       	rjmp	.+40     	; 0x27b6 <HCLCD_Vid8Bits_Init+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    278e:	6d 89       	ldd	r22, Y+21	; 0x15
    2790:	7e 89       	ldd	r23, Y+22	; 0x16
    2792:	8f 89       	ldd	r24, Y+23	; 0x17
    2794:	98 8d       	ldd	r25, Y+24	; 0x18
    2796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	9c 8b       	std	Y+20, r25	; 0x14
    27a0:	8b 8b       	std	Y+19, r24	; 0x13
    27a2:	8b 89       	ldd	r24, Y+19	; 0x13
    27a4:	9c 89       	ldd	r25, Y+20	; 0x14
    27a6:	98 8b       	std	Y+16, r25	; 0x10
    27a8:	8f 87       	std	Y+15, r24	; 0x0f
    27aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ac:	98 89       	ldd	r25, Y+16	; 0x10
    27ae:	01 97       	sbiw	r24, 0x01	; 1
    27b0:	f1 f7       	brne	.-4      	; 0x27ae <HCLCD_Vid8Bits_Init+0x2e0>
    27b2:	98 8b       	std	Y+16, r25	; 0x10
    27b4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_VidWriteCommand_8Bits(DISPLAY_CLEAR);
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	0e 94 57 11 	call	0x22ae	; 0x22ae <HCLCD_VidWriteCommand_8Bits>
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	a0 e0       	ldi	r26, 0x00	; 0
    27c2:	b0 e4       	ldi	r27, 0x40	; 64
    27c4:	8b 87       	std	Y+11, r24	; 0x0b
    27c6:	9c 87       	std	Y+12, r25	; 0x0c
    27c8:	ad 87       	std	Y+13, r26	; 0x0d
    27ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	4a e7       	ldi	r20, 0x7A	; 122
    27da:	53 e4       	ldi	r21, 0x43	; 67
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	8f 83       	std	Y+7, r24	; 0x07
    27e6:	98 87       	std	Y+8, r25	; 0x08
    27e8:	a9 87       	std	Y+9, r26	; 0x09
    27ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27ec:	6f 81       	ldd	r22, Y+7	; 0x07
    27ee:	78 85       	ldd	r23, Y+8	; 0x08
    27f0:	89 85       	ldd	r24, Y+9	; 0x09
    27f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e8       	ldi	r20, 0x80	; 128
    27fa:	5f e3       	ldi	r21, 0x3F	; 63
    27fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2800:	88 23       	and	r24, r24
    2802:	2c f4       	brge	.+10     	; 0x280e <HCLCD_Vid8Bits_Init+0x340>
		__ticks = 1;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	9e 83       	std	Y+6, r25	; 0x06
    280a:	8d 83       	std	Y+5, r24	; 0x05
    280c:	3f c0       	rjmp	.+126    	; 0x288c <HCLCD_Vid8Bits_Init+0x3be>
	else if (__tmp > 65535)
    280e:	6f 81       	ldd	r22, Y+7	; 0x07
    2810:	78 85       	ldd	r23, Y+8	; 0x08
    2812:	89 85       	ldd	r24, Y+9	; 0x09
    2814:	9a 85       	ldd	r25, Y+10	; 0x0a
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	3f ef       	ldi	r19, 0xFF	; 255
    281a:	4f e7       	ldi	r20, 0x7F	; 127
    281c:	57 e4       	ldi	r21, 0x47	; 71
    281e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2822:	18 16       	cp	r1, r24
    2824:	4c f5       	brge	.+82     	; 0x2878 <HCLCD_Vid8Bits_Init+0x3aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2826:	6b 85       	ldd	r22, Y+11	; 0x0b
    2828:	7c 85       	ldd	r23, Y+12	; 0x0c
    282a:	8d 85       	ldd	r24, Y+13	; 0x0d
    282c:	9e 85       	ldd	r25, Y+14	; 0x0e
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e2       	ldi	r20, 0x20	; 32
    2834:	51 e4       	ldi	r21, 0x41	; 65
    2836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	bc 01       	movw	r22, r24
    2840:	cd 01       	movw	r24, r26
    2842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	9e 83       	std	Y+6, r25	; 0x06
    284c:	8d 83       	std	Y+5, r24	; 0x05
    284e:	0f c0       	rjmp	.+30     	; 0x286e <HCLCD_Vid8Bits_Init+0x3a0>
    2850:	89 e1       	ldi	r24, 0x19	; 25
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	9c 83       	std	Y+4, r25	; 0x04
    2856:	8b 83       	std	Y+3, r24	; 0x03
    2858:	8b 81       	ldd	r24, Y+3	; 0x03
    285a:	9c 81       	ldd	r25, Y+4	; 0x04
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <HCLCD_Vid8Bits_Init+0x38e>
    2860:	9c 83       	std	Y+4, r25	; 0x04
    2862:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2864:	8d 81       	ldd	r24, Y+5	; 0x05
    2866:	9e 81       	ldd	r25, Y+6	; 0x06
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	9e 83       	std	Y+6, r25	; 0x06
    286c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286e:	8d 81       	ldd	r24, Y+5	; 0x05
    2870:	9e 81       	ldd	r25, Y+6	; 0x06
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	69 f7       	brne	.-38     	; 0x2850 <HCLCD_Vid8Bits_Init+0x382>
    2876:	14 c0       	rjmp	.+40     	; 0x28a0 <HCLCD_Vid8Bits_Init+0x3d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2878:	6f 81       	ldd	r22, Y+7	; 0x07
    287a:	78 85       	ldd	r23, Y+8	; 0x08
    287c:	89 85       	ldd	r24, Y+9	; 0x09
    287e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	9e 83       	std	Y+6, r25	; 0x06
    288a:	8d 83       	std	Y+5, r24	; 0x05
    288c:	8d 81       	ldd	r24, Y+5	; 0x05
    288e:	9e 81       	ldd	r25, Y+6	; 0x06
    2890:	9a 83       	std	Y+2, r25	; 0x02
    2892:	89 83       	std	Y+1, r24	; 0x01
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	9a 81       	ldd	r25, Y+2	; 0x02
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <HCLCD_Vid8Bits_Init+0x3ca>
    289c:	9a 83       	std	Y+2, r25	; 0x02
    289e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_VidWriteCommand_8Bits(HCLCD_ENTRY_MODE_SET);
    28a0:	86 e0       	ldi	r24, 0x06	; 6
    28a2:	0e 94 57 11 	call	0x22ae	; 0x22ae <HCLCD_VidWriteCommand_8Bits>
}
    28a6:	e8 96       	adiw	r28, 0x38	; 56
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <HCLCD_VidWriteChar_8Bits>:
void HCLCD_VidWriteChar_8Bits(u8 Copy_u8Data)
{
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	6d 97       	sbiw	r28, 0x1d	; 29
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
    28cc:	8d 8f       	std	Y+29, r24	; 0x1d
	/*select Data register--> Write one on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	60 e0       	ldi	r22, 0x00	; 0
    28d2:	41 e0       	ldi	r20, 0x01	; 1
    28d4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	//MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
	/*Send Command ON port Data*/
	MDIO_Error_State_SetPortValue(DATA_PORT,Copy_u8Data);
    28d8:	80 e0       	ldi	r24, 0x00	; 0
    28da:	6d 8d       	ldd	r22, Y+29	; 0x1d
    28dc:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <MDIO_Error_State_SetPortValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    28e0:	82 e0       	ldi	r24, 0x02	; 2
    28e2:	60 e0       	ldi	r22, 0x00	; 0
    28e4:	41 e0       	ldi	r20, 0x01	; 1
    28e6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	a0 e0       	ldi	r26, 0x00	; 0
    28f0:	b0 e4       	ldi	r27, 0x40	; 64
    28f2:	89 8f       	std	Y+25, r24	; 0x19
    28f4:	9a 8f       	std	Y+26, r25	; 0x1a
    28f6:	ab 8f       	std	Y+27, r26	; 0x1b
    28f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28fa:	69 8d       	ldd	r22, Y+25	; 0x19
    28fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2900:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	4a e7       	ldi	r20, 0x7A	; 122
    2908:	53 e4       	ldi	r21, 0x43	; 67
    290a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	8d 8b       	std	Y+21, r24	; 0x15
    2914:	9e 8b       	std	Y+22, r25	; 0x16
    2916:	af 8b       	std	Y+23, r26	; 0x17
    2918:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    291a:	6d 89       	ldd	r22, Y+21	; 0x15
    291c:	7e 89       	ldd	r23, Y+22	; 0x16
    291e:	8f 89       	ldd	r24, Y+23	; 0x17
    2920:	98 8d       	ldd	r25, Y+24	; 0x18
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	40 e8       	ldi	r20, 0x80	; 128
    2928:	5f e3       	ldi	r21, 0x3F	; 63
    292a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    292e:	88 23       	and	r24, r24
    2930:	2c f4       	brge	.+10     	; 0x293c <HCLCD_VidWriteChar_8Bits+0x84>
		__ticks = 1;
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	9c 8b       	std	Y+20, r25	; 0x14
    2938:	8b 8b       	std	Y+19, r24	; 0x13
    293a:	3f c0       	rjmp	.+126    	; 0x29ba <HCLCD_VidWriteChar_8Bits+0x102>
	else if (__tmp > 65535)
    293c:	6d 89       	ldd	r22, Y+21	; 0x15
    293e:	7e 89       	ldd	r23, Y+22	; 0x16
    2940:	8f 89       	ldd	r24, Y+23	; 0x17
    2942:	98 8d       	ldd	r25, Y+24	; 0x18
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	3f ef       	ldi	r19, 0xFF	; 255
    2948:	4f e7       	ldi	r20, 0x7F	; 127
    294a:	57 e4       	ldi	r21, 0x47	; 71
    294c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2950:	18 16       	cp	r1, r24
    2952:	4c f5       	brge	.+82     	; 0x29a6 <HCLCD_VidWriteChar_8Bits+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2954:	69 8d       	ldd	r22, Y+25	; 0x19
    2956:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2958:	8b 8d       	ldd	r24, Y+27	; 0x1b
    295a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    295c:	20 e0       	ldi	r18, 0x00	; 0
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	40 e2       	ldi	r20, 0x20	; 32
    2962:	51 e4       	ldi	r21, 0x41	; 65
    2964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	bc 01       	movw	r22, r24
    296e:	cd 01       	movw	r24, r26
    2970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	9c 8b       	std	Y+20, r25	; 0x14
    297a:	8b 8b       	std	Y+19, r24	; 0x13
    297c:	0f c0       	rjmp	.+30     	; 0x299c <HCLCD_VidWriteChar_8Bits+0xe4>
    297e:	89 e1       	ldi	r24, 0x19	; 25
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	9a 8b       	std	Y+18, r25	; 0x12
    2984:	89 8b       	std	Y+17, r24	; 0x11
    2986:	89 89       	ldd	r24, Y+17	; 0x11
    2988:	9a 89       	ldd	r25, Y+18	; 0x12
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	f1 f7       	brne	.-4      	; 0x298a <HCLCD_VidWriteChar_8Bits+0xd2>
    298e:	9a 8b       	std	Y+18, r25	; 0x12
    2990:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2992:	8b 89       	ldd	r24, Y+19	; 0x13
    2994:	9c 89       	ldd	r25, Y+20	; 0x14
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	9c 8b       	std	Y+20, r25	; 0x14
    299a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    299c:	8b 89       	ldd	r24, Y+19	; 0x13
    299e:	9c 89       	ldd	r25, Y+20	; 0x14
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	69 f7       	brne	.-38     	; 0x297e <HCLCD_VidWriteChar_8Bits+0xc6>
    29a4:	14 c0       	rjmp	.+40     	; 0x29ce <HCLCD_VidWriteChar_8Bits+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29a6:	6d 89       	ldd	r22, Y+21	; 0x15
    29a8:	7e 89       	ldd	r23, Y+22	; 0x16
    29aa:	8f 89       	ldd	r24, Y+23	; 0x17
    29ac:	98 8d       	ldd	r25, Y+24	; 0x18
    29ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	9c 8b       	std	Y+20, r25	; 0x14
    29b8:	8b 8b       	std	Y+19, r24	; 0x13
    29ba:	8b 89       	ldd	r24, Y+19	; 0x13
    29bc:	9c 89       	ldd	r25, Y+20	; 0x14
    29be:	98 8b       	std	Y+16, r25	; 0x10
    29c0:	8f 87       	std	Y+15, r24	; 0x0f
    29c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    29c4:	98 89       	ldd	r25, Y+16	; 0x10
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	f1 f7       	brne	.-4      	; 0x29c6 <HCLCD_VidWriteChar_8Bits+0x10e>
    29ca:	98 8b       	std	Y+16, r25	; 0x10
    29cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    29ce:	82 e0       	ldi	r24, 0x02	; 2
    29d0:	60 e0       	ldi	r22, 0x00	; 0
    29d2:	40 e0       	ldi	r20, 0x00	; 0
    29d4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	a0 e0       	ldi	r26, 0x00	; 0
    29de:	b0 e4       	ldi	r27, 0x40	; 64
    29e0:	8b 87       	std	Y+11, r24	; 0x0b
    29e2:	9c 87       	std	Y+12, r25	; 0x0c
    29e4:	ad 87       	std	Y+13, r26	; 0x0d
    29e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    29f0:	20 e0       	ldi	r18, 0x00	; 0
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	4a e7       	ldi	r20, 0x7A	; 122
    29f6:	53 e4       	ldi	r21, 0x43	; 67
    29f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	8f 83       	std	Y+7, r24	; 0x07
    2a02:	98 87       	std	Y+8, r25	; 0x08
    2a04:	a9 87       	std	Y+9, r26	; 0x09
    2a06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a08:	6f 81       	ldd	r22, Y+7	; 0x07
    2a0a:	78 85       	ldd	r23, Y+8	; 0x08
    2a0c:	89 85       	ldd	r24, Y+9	; 0x09
    2a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	40 e8       	ldi	r20, 0x80	; 128
    2a16:	5f e3       	ldi	r21, 0x3F	; 63
    2a18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a1c:	88 23       	and	r24, r24
    2a1e:	2c f4       	brge	.+10     	; 0x2a2a <HCLCD_VidWriteChar_8Bits+0x172>
		__ticks = 1;
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	9e 83       	std	Y+6, r25	; 0x06
    2a26:	8d 83       	std	Y+5, r24	; 0x05
    2a28:	3f c0       	rjmp	.+126    	; 0x2aa8 <HCLCD_VidWriteChar_8Bits+0x1f0>
	else if (__tmp > 65535)
    2a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2c:	78 85       	ldd	r23, Y+8	; 0x08
    2a2e:	89 85       	ldd	r24, Y+9	; 0x09
    2a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	3f ef       	ldi	r19, 0xFF	; 255
    2a36:	4f e7       	ldi	r20, 0x7F	; 127
    2a38:	57 e4       	ldi	r21, 0x47	; 71
    2a3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a3e:	18 16       	cp	r1, r24
    2a40:	4c f5       	brge	.+82     	; 0x2a94 <HCLCD_VidWriteChar_8Bits+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	40 e2       	ldi	r20, 0x20	; 32
    2a50:	51 e4       	ldi	r21, 0x41	; 65
    2a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	bc 01       	movw	r22, r24
    2a5c:	cd 01       	movw	r24, r26
    2a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	9e 83       	std	Y+6, r25	; 0x06
    2a68:	8d 83       	std	Y+5, r24	; 0x05
    2a6a:	0f c0       	rjmp	.+30     	; 0x2a8a <HCLCD_VidWriteChar_8Bits+0x1d2>
    2a6c:	89 e1       	ldi	r24, 0x19	; 25
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	9c 83       	std	Y+4, r25	; 0x04
    2a72:	8b 83       	std	Y+3, r24	; 0x03
    2a74:	8b 81       	ldd	r24, Y+3	; 0x03
    2a76:	9c 81       	ldd	r25, Y+4	; 0x04
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	f1 f7       	brne	.-4      	; 0x2a78 <HCLCD_VidWriteChar_8Bits+0x1c0>
    2a7c:	9c 83       	std	Y+4, r25	; 0x04
    2a7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a80:	8d 81       	ldd	r24, Y+5	; 0x05
    2a82:	9e 81       	ldd	r25, Y+6	; 0x06
    2a84:	01 97       	sbiw	r24, 0x01	; 1
    2a86:	9e 83       	std	Y+6, r25	; 0x06
    2a88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a8e:	00 97       	sbiw	r24, 0x00	; 0
    2a90:	69 f7       	brne	.-38     	; 0x2a6c <HCLCD_VidWriteChar_8Bits+0x1b4>
    2a92:	14 c0       	rjmp	.+40     	; 0x2abc <HCLCD_VidWriteChar_8Bits+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a94:	6f 81       	ldd	r22, Y+7	; 0x07
    2a96:	78 85       	ldd	r23, Y+8	; 0x08
    2a98:	89 85       	ldd	r24, Y+9	; 0x09
    2a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	9e 83       	std	Y+6, r25	; 0x06
    2aa6:	8d 83       	std	Y+5, r24	; 0x05
    2aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    2aac:	9a 83       	std	Y+2, r25	; 0x02
    2aae:	89 83       	std	Y+1, r24	; 0x01
    2ab0:	89 81       	ldd	r24, Y+1	; 0x01
    2ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <HCLCD_VidWriteChar_8Bits+0x1fc>
    2ab8:	9a 83       	std	Y+2, r25	; 0x02
    2aba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);	
    2abc:	82 e0       	ldi	r24, 0x02	; 2
    2abe:	60 e0       	ldi	r22, 0x00	; 0
    2ac0:	41 e0       	ldi	r20, 0x01	; 1
    2ac2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
}
    2ac6:	6d 96       	adiw	r28, 0x1d	; 29
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	de bf       	out	0x3e, r29	; 62
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	cd bf       	out	0x3d, r28	; 61
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <HCLCD_VidWriteString_8Bits>:

void HCLCD_VidWriteString_8Bits(u8* PCopy_u8String)
{
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	00 d0       	rcall	.+0      	; 0x2ade <HCLCD_VidWriteString_8Bits+0x6>
    2ade:	0f 92       	push	r0
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	9b 83       	std	Y+3, r25	; 0x03
    2ae6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    2ae8:	19 82       	std	Y+1, r1	; 0x01
    2aea:	0e c0       	rjmp	.+28     	; 0x2b08 <HCLCD_VidWriteString_8Bits+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_VidWriteChar_8Bits(PCopy_u8String[Loc_u8Count]);
    2aec:	89 81       	ldd	r24, Y+1	; 0x01
    2aee:	28 2f       	mov	r18, r24
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	8a 81       	ldd	r24, Y+2	; 0x02
    2af4:	9b 81       	ldd	r25, Y+3	; 0x03
    2af6:	fc 01       	movw	r30, r24
    2af8:	e2 0f       	add	r30, r18
    2afa:	f3 1f       	adc	r31, r19
    2afc:	80 81       	ld	r24, Z
    2afe:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <HCLCD_VidWriteChar_8Bits>
		Loc_u8Count++;
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	8f 5f       	subi	r24, 0xFF	; 255
    2b06:	89 83       	std	Y+1, r24	; 0x01
}

void HCLCD_VidWriteString_8Bits(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	28 2f       	mov	r18, r24
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b10:	9b 81       	ldd	r25, Y+3	; 0x03
    2b12:	fc 01       	movw	r30, r24
    2b14:	e2 0f       	add	r30, r18
    2b16:	f3 1f       	adc	r31, r19
    2b18:	80 81       	ld	r24, Z
    2b1a:	88 23       	and	r24, r24
    2b1c:	39 f7       	brne	.-50     	; 0x2aec <HCLCD_VidWriteString_8Bits+0x14>
	{
		HCLCD_VidWriteChar_8Bits(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	08 95       	ret

00002b2a <HCLCD_VidWriteNumber_8Bits>:
void HCLCD_VidWriteNumber_8Bits(u32 Copy_u8Number)
{
    2b2a:	0f 93       	push	r16
    2b2c:	1f 93       	push	r17
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	cd b7       	in	r28, 0x3d	; 61
    2b34:	de b7       	in	r29, 0x3e	; 62
    2b36:	60 97       	sbiw	r28, 0x10	; 16
    2b38:	0f b6       	in	r0, 0x3f	; 63
    2b3a:	f8 94       	cli
    2b3c:	de bf       	out	0x3e, r29	; 62
    2b3e:	0f be       	out	0x3f, r0	; 63
    2b40:	cd bf       	out	0x3d, r28	; 61
    2b42:	6d 87       	std	Y+13, r22	; 0x0d
    2b44:	7e 87       	std	Y+14, r23	; 0x0e
    2b46:	8f 87       	std	Y+15, r24	; 0x0f
    2b48:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    2b4a:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    2b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b50:	af 85       	ldd	r26, Y+15	; 0x0f
    2b52:	b8 89       	ldd	r27, Y+16	; 0x10
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	a1 05       	cpc	r26, r1
    2b58:	b1 05       	cpc	r27, r1
    2b5a:	09 f4       	brne	.+2      	; 0x2b5e <HCLCD_VidWriteNumber_8Bits+0x34>
    2b5c:	4f c0       	rjmp	.+158    	; 0x2bfc <HCLCD_VidWriteNumber_8Bits+0xd2>
    2b5e:	2d c0       	rjmp	.+90     	; 0x2bba <HCLCD_VidWriteNumber_8Bits+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    2b60:	8a 81       	ldd	r24, Y+2	; 0x02
    2b62:	08 2f       	mov	r16, r24
    2b64:	10 e0       	ldi	r17, 0x00	; 0
    2b66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b6a:	af 85       	ldd	r26, Y+15	; 0x0f
    2b6c:	b8 89       	ldd	r27, Y+16	; 0x10
    2b6e:	2a e0       	ldi	r18, 0x0A	; 10
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e0       	ldi	r20, 0x00	; 0
    2b74:	50 e0       	ldi	r21, 0x00	; 0
    2b76:	bc 01       	movw	r22, r24
    2b78:	cd 01       	movw	r24, r26
    2b7a:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__udivmodsi4>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	28 2f       	mov	r18, r24
    2b84:	ce 01       	movw	r24, r28
    2b86:	03 96       	adiw	r24, 0x03	; 3
    2b88:	fc 01       	movw	r30, r24
    2b8a:	e0 0f       	add	r30, r16
    2b8c:	f1 1f       	adc	r31, r17
    2b8e:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    2b90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b94:	af 85       	ldd	r26, Y+15	; 0x0f
    2b96:	b8 89       	ldd	r27, Y+16	; 0x10
    2b98:	2a e0       	ldi	r18, 0x0A	; 10
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	40 e0       	ldi	r20, 0x00	; 0
    2b9e:	50 e0       	ldi	r21, 0x00	; 0
    2ba0:	bc 01       	movw	r22, r24
    2ba2:	cd 01       	movw	r24, r26
    2ba4:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__udivmodsi4>
    2ba8:	da 01       	movw	r26, r20
    2baa:	c9 01       	movw	r24, r18
    2bac:	8d 87       	std	Y+13, r24	; 0x0d
    2bae:	9e 87       	std	Y+14, r25	; 0x0e
    2bb0:	af 87       	std	Y+15, r26	; 0x0f
    2bb2:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    2bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb6:	8f 5f       	subi	r24, 0xFF	; 255
    2bb8:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    2bba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bbe:	af 85       	ldd	r26, Y+15	; 0x0f
    2bc0:	b8 89       	ldd	r27, Y+16	; 0x10
    2bc2:	00 97       	sbiw	r24, 0x00	; 0
    2bc4:	a1 05       	cpc	r26, r1
    2bc6:	b1 05       	cpc	r27, r1
    2bc8:	59 f6       	brne	.-106    	; 0x2b60 <HCLCD_VidWriteNumber_8Bits+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2bca:	8a 81       	ldd	r24, Y+2	; 0x02
    2bcc:	81 50       	subi	r24, 0x01	; 1
    2bce:	89 83       	std	Y+1, r24	; 0x01
    2bd0:	11 c0       	rjmp	.+34     	; 0x2bf4 <HCLCD_VidWriteNumber_8Bits+0xca>
		{
			HCLCD_VidWriteChar_8Bits(ARR_Digits[i]+'0');
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	28 2f       	mov	r18, r24
    2bd6:	33 27       	eor	r19, r19
    2bd8:	27 fd       	sbrc	r18, 7
    2bda:	30 95       	com	r19
    2bdc:	ce 01       	movw	r24, r28
    2bde:	03 96       	adiw	r24, 0x03	; 3
    2be0:	fc 01       	movw	r30, r24
    2be2:	e2 0f       	add	r30, r18
    2be4:	f3 1f       	adc	r31, r19
    2be6:	80 81       	ld	r24, Z
    2be8:	80 5d       	subi	r24, 0xD0	; 208
    2bea:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <HCLCD_VidWriteChar_8Bits>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    2bee:	89 81       	ldd	r24, Y+1	; 0x01
    2bf0:	81 50       	subi	r24, 0x01	; 1
    2bf2:	89 83       	std	Y+1, r24	; 0x01
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	88 23       	and	r24, r24
    2bf8:	64 f7       	brge	.-40     	; 0x2bd2 <HCLCD_VidWriteNumber_8Bits+0xa8>
    2bfa:	03 c0       	rjmp	.+6      	; 0x2c02 <HCLCD_VidWriteNumber_8Bits+0xd8>
			HCLCD_VidWriteChar_8Bits(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_VidWriteChar_8Bits('0');
    2bfc:	80 e3       	ldi	r24, 0x30	; 48
    2bfe:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <HCLCD_VidWriteChar_8Bits>
	}
}
    2c02:	60 96       	adiw	r28, 0x10	; 16
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	cd bf       	out	0x3d, r28	; 61
    2c0e:	cf 91       	pop	r28
    2c10:	df 91       	pop	r29
    2c12:	1f 91       	pop	r17
    2c14:	0f 91       	pop	r16
    2c16:	08 95       	ret

00002c18 <HCLCD_VidSetPosition>:
void HCLCD_VidSetPosition(u8 Copy_u8LineNumber , u8 Copy_u8PositionNumber)
{
    2c18:	df 93       	push	r29
    2c1a:	cf 93       	push	r28
    2c1c:	00 d0       	rcall	.+0      	; 0x2c1e <HCLCD_VidSetPosition+0x6>
    2c1e:	cd b7       	in	r28, 0x3d	; 61
    2c20:	de b7       	in	r29, 0x3e	; 62
    2c22:	89 83       	std	Y+1, r24	; 0x01
    2c24:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2c26:	89 81       	ldd	r24, Y+1	; 0x01
    2c28:	81 30       	cpi	r24, 0x01	; 1
    2c2a:	41 f4       	brne	.+16     	; 0x2c3c <HCLCD_VidSetPosition+0x24>
    2c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2e:	80 31       	cpi	r24, 0x10	; 16
    2c30:	28 f4       	brcc	.+10     	; 0x2c3c <HCLCD_VidSetPosition+0x24>
	{
		HCLCD_VidWriteCommand_8Bits((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2c32:	8a 81       	ldd	r24, Y+2	; 0x02
    2c34:	80 58       	subi	r24, 0x80	; 128
    2c36:	0e 94 57 11 	call	0x22ae	; 0x22ae <HCLCD_VidWriteCommand_8Bits>
    2c3a:	0a c0       	rjmp	.+20     	; 0x2c50 <HCLCD_VidSetPosition+0x38>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    2c3c:	89 81       	ldd	r24, Y+1	; 0x01
    2c3e:	82 30       	cpi	r24, 0x02	; 2
    2c40:	39 f4       	brne	.+14     	; 0x2c50 <HCLCD_VidSetPosition+0x38>
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	80 31       	cpi	r24, 0x10	; 16
    2c46:	20 f4       	brcc	.+8      	; 0x2c50 <HCLCD_VidSetPosition+0x38>
	{
		HCLCD_VidWriteCommand_8Bits((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    2c48:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4a:	80 54       	subi	r24, 0x40	; 64
    2c4c:	0e 94 57 11 	call	0x22ae	; 0x22ae <HCLCD_VidWriteCommand_8Bits>
	}
	else
	{
		/*Do Nothing*/
	}
}
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	cf 91       	pop	r28
    2c56:	df 91       	pop	r29
    2c58:	08 95       	ret

00002c5a <HCLCD_VidWriteCommand_4Bits>:

void HCLCD_VidWriteCommand_4Bits(u8 Copy_u8Command)
{
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    2c62:	60 97       	sbiw	r28, 0x10	; 16
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	cd bf       	out	0x3d, r28	; 61
    2c6e:	88 8b       	std	Y+16, r24	; 0x10
	u8 LOC_u8CopyCommand;
	/*select Command register--> Write zero on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_LOW);
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	60 e0       	ldi	r22, 0x00	; 0
    2c74:	40 e0       	ldi	r20, 0x00	; 0
    2c76:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	//MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
	/*Send  Command*/
	LOC_u8CopyCommand=(Copy_u8Command&0x0F)<<HCLCD_PINSTART;
    2c7a:	88 89       	ldd	r24, Y+16	; 0x10
    2c7c:	8f 70       	andi	r24, 0x0F	; 15
    2c7e:	88 0f       	add	r24, r24
    2c80:	88 0f       	add	r24, r24
    2c82:	88 0f       	add	r24, r24
    2c84:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,LOC_u8CopyCommand);
    2c86:	83 e0       	ldi	r24, 0x03	; 3
    2c88:	60 e0       	ldi	r22, 0x00	; 0
    2c8a:	4f 85       	ldd	r20, Y+15	; 0x0f
    2c8c:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    2c90:	82 e0       	ldi	r24, 0x02	; 2
    2c92:	60 e0       	ldi	r22, 0x00	; 0
    2c94:	41 e0       	ldi	r20, 0x01	; 1
    2c96:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	a0 e0       	ldi	r26, 0x00	; 0
    2ca0:	b0 e4       	ldi	r27, 0x40	; 64
    2ca2:	8b 87       	std	Y+11, r24	; 0x0b
    2ca4:	9c 87       	std	Y+12, r25	; 0x0c
    2ca6:	ad 87       	std	Y+13, r26	; 0x0d
    2ca8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2caa:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cac:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cae:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cb2:	20 e0       	ldi	r18, 0x00	; 0
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	4a e7       	ldi	r20, 0x7A	; 122
    2cb8:	53 e4       	ldi	r21, 0x43	; 67
    2cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	8f 83       	std	Y+7, r24	; 0x07
    2cc4:	98 87       	std	Y+8, r25	; 0x08
    2cc6:	a9 87       	std	Y+9, r26	; 0x09
    2cc8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cca:	6f 81       	ldd	r22, Y+7	; 0x07
    2ccc:	78 85       	ldd	r23, Y+8	; 0x08
    2cce:	89 85       	ldd	r24, Y+9	; 0x09
    2cd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	40 e8       	ldi	r20, 0x80	; 128
    2cd8:	5f e3       	ldi	r21, 0x3F	; 63
    2cda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cde:	88 23       	and	r24, r24
    2ce0:	2c f4       	brge	.+10     	; 0x2cec <HCLCD_VidWriteCommand_4Bits+0x92>
		__ticks = 1;
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	9e 83       	std	Y+6, r25	; 0x06
    2ce8:	8d 83       	std	Y+5, r24	; 0x05
    2cea:	3f c0       	rjmp	.+126    	; 0x2d6a <HCLCD_VidWriteCommand_4Bits+0x110>
	else if (__tmp > 65535)
    2cec:	6f 81       	ldd	r22, Y+7	; 0x07
    2cee:	78 85       	ldd	r23, Y+8	; 0x08
    2cf0:	89 85       	ldd	r24, Y+9	; 0x09
    2cf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf4:	20 e0       	ldi	r18, 0x00	; 0
    2cf6:	3f ef       	ldi	r19, 0xFF	; 255
    2cf8:	4f e7       	ldi	r20, 0x7F	; 127
    2cfa:	57 e4       	ldi	r21, 0x47	; 71
    2cfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d00:	18 16       	cp	r1, r24
    2d02:	4c f5       	brge	.+82     	; 0x2d56 <HCLCD_VidWriteCommand_4Bits+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d04:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d06:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	40 e2       	ldi	r20, 0x20	; 32
    2d12:	51 e4       	ldi	r21, 0x41	; 65
    2d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	bc 01       	movw	r22, r24
    2d1e:	cd 01       	movw	r24, r26
    2d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	9e 83       	std	Y+6, r25	; 0x06
    2d2a:	8d 83       	std	Y+5, r24	; 0x05
    2d2c:	0f c0       	rjmp	.+30     	; 0x2d4c <HCLCD_VidWriteCommand_4Bits+0xf2>
    2d2e:	89 e1       	ldi	r24, 0x19	; 25
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	9c 83       	std	Y+4, r25	; 0x04
    2d34:	8b 83       	std	Y+3, r24	; 0x03
    2d36:	8b 81       	ldd	r24, Y+3	; 0x03
    2d38:	9c 81       	ldd	r25, Y+4	; 0x04
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
    2d3c:	f1 f7       	brne	.-4      	; 0x2d3a <HCLCD_VidWriteCommand_4Bits+0xe0>
    2d3e:	9c 83       	std	Y+4, r25	; 0x04
    2d40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d42:	8d 81       	ldd	r24, Y+5	; 0x05
    2d44:	9e 81       	ldd	r25, Y+6	; 0x06
    2d46:	01 97       	sbiw	r24, 0x01	; 1
    2d48:	9e 83       	std	Y+6, r25	; 0x06
    2d4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d50:	00 97       	sbiw	r24, 0x00	; 0
    2d52:	69 f7       	brne	.-38     	; 0x2d2e <HCLCD_VidWriteCommand_4Bits+0xd4>
    2d54:	14 c0       	rjmp	.+40     	; 0x2d7e <HCLCD_VidWriteCommand_4Bits+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d56:	6f 81       	ldd	r22, Y+7	; 0x07
    2d58:	78 85       	ldd	r23, Y+8	; 0x08
    2d5a:	89 85       	ldd	r24, Y+9	; 0x09
    2d5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d62:	dc 01       	movw	r26, r24
    2d64:	cb 01       	movw	r24, r22
    2d66:	9e 83       	std	Y+6, r25	; 0x06
    2d68:	8d 83       	std	Y+5, r24	; 0x05
    2d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6e:	9a 83       	std	Y+2, r25	; 0x02
    2d70:	89 83       	std	Y+1, r24	; 0x01
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	9a 81       	ldd	r25, Y+2	; 0x02
    2d76:	01 97       	sbiw	r24, 0x01	; 1
    2d78:	f1 f7       	brne	.-4      	; 0x2d76 <HCLCD_VidWriteCommand_4Bits+0x11c>
    2d7a:	9a 83       	std	Y+2, r25	; 0x02
    2d7c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    2d7e:	82 e0       	ldi	r24, 0x02	; 2
    2d80:	60 e0       	ldi	r22, 0x00	; 0
    2d82:	40 e0       	ldi	r20, 0x00	; 0
    2d84:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
}
    2d88:	60 96       	adiw	r28, 0x10	; 16
    2d8a:	0f b6       	in	r0, 0x3f	; 63
    2d8c:	f8 94       	cli
    2d8e:	de bf       	out	0x3e, r29	; 62
    2d90:	0f be       	out	0x3f, r0	; 63
    2d92:	cd bf       	out	0x3d, r28	; 61
    2d94:	cf 91       	pop	r28
    2d96:	df 91       	pop	r29
    2d98:	08 95       	ret

00002d9a <HCLCD_Vid4Bits_Init>:
void HCLCD_Vid4Bits_Init(void)
{
    2d9a:	df 93       	push	r29
    2d9c:	cf 93       	push	r28
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
    2da2:	e9 97       	sbiw	r28, 0x39	; 57
    2da4:	0f b6       	in	r0, 0x3f	; 63
    2da6:	f8 94       	cli
    2da8:	de bf       	out	0x3e, r29	; 62
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	cd bf       	out	0x3d, r28	; 61
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    2dae:	86 e0       	ldi	r24, 0x06	; 6
    2db0:	89 af       	std	Y+57, r24	; 0x39
    2db2:	08 c0       	rjmp	.+16     	; 0x2dc4 <HCLCD_Vid4Bits_Init+0x2a>
	{
	MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
    2db4:	89 ad       	ldd	r24, Y+57	; 0x39
    2db6:	60 e0       	ldi	r22, 0x00	; 0
    2db8:	41 e0       	ldi	r20, 0x01	; 1
    2dba:	0e 94 26 0b 	call	0x164c	; 0x164c <MDIO_Error_State_SetPinDirection>
}
void HCLCD_Vid4Bits_Init(void)
{
	s8 LOC_u8PinCount;
	/*LCD Data and control port initialization*/
	for(LOC_u8PinCount=HCLCD_PINEND;LOC_u8PinCount>=HCLCD_PINSTART;LOC_u8PinCount--)
    2dbe:	89 ad       	ldd	r24, Y+57	; 0x39
    2dc0:	81 50       	subi	r24, 0x01	; 1
    2dc2:	89 af       	std	Y+57, r24	; 0x39
    2dc4:	89 ad       	ldd	r24, Y+57	; 0x39
    2dc6:	83 30       	cpi	r24, 0x03	; 3
    2dc8:	ac f7       	brge	.-22     	; 0x2db4 <HCLCD_Vid4Bits_Init+0x1a>
	{
	MDIO_Error_State_SetPinDirection(LOC_u8PinCount,DATA_PORT,PIN_OUTPUT);
	}
	MDIO_Error_State_SetPinDirection(RS,CONTROL_PORT,PIN_OUTPUT);
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	60 e0       	ldi	r22, 0x00	; 0
    2dce:	41 e0       	ldi	r20, 0x01	; 1
    2dd0:	0e 94 26 0b 	call	0x164c	; 0x164c <MDIO_Error_State_SetPinDirection>
	//MDIO_Error_State_SetPinDirection(RW,CONTROL_PORT,PIN_OUTPUT);
	MDIO_Error_State_SetPinDirection(E,CONTROL_PORT,PIN_OUTPUT);
    2dd4:	82 e0       	ldi	r24, 0x02	; 2
    2dd6:	60 e0       	ldi	r22, 0x00	; 0
    2dd8:	41 e0       	ldi	r20, 0x01	; 1
    2dda:	0e 94 26 0b 	call	0x164c	; 0x164c <MDIO_Error_State_SetPinDirection>
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	a0 ef       	ldi	r26, 0xF0	; 240
    2de4:	b1 e4       	ldi	r27, 0x41	; 65
    2de6:	8d ab       	std	Y+53, r24	; 0x35
    2de8:	9e ab       	std	Y+54, r25	; 0x36
    2dea:	af ab       	std	Y+55, r26	; 0x37
    2dec:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dee:	6d a9       	ldd	r22, Y+53	; 0x35
    2df0:	7e a9       	ldd	r23, Y+54	; 0x36
    2df2:	8f a9       	ldd	r24, Y+55	; 0x37
    2df4:	98 ad       	ldd	r25, Y+56	; 0x38
    2df6:	20 e0       	ldi	r18, 0x00	; 0
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	4a e7       	ldi	r20, 0x7A	; 122
    2dfc:	53 e4       	ldi	r21, 0x43	; 67
    2dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e02:	dc 01       	movw	r26, r24
    2e04:	cb 01       	movw	r24, r22
    2e06:	89 ab       	std	Y+49, r24	; 0x31
    2e08:	9a ab       	std	Y+50, r25	; 0x32
    2e0a:	ab ab       	std	Y+51, r26	; 0x33
    2e0c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e0e:	69 a9       	ldd	r22, Y+49	; 0x31
    2e10:	7a a9       	ldd	r23, Y+50	; 0x32
    2e12:	8b a9       	ldd	r24, Y+51	; 0x33
    2e14:	9c a9       	ldd	r25, Y+52	; 0x34
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	40 e8       	ldi	r20, 0x80	; 128
    2e1c:	5f e3       	ldi	r21, 0x3F	; 63
    2e1e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e22:	88 23       	and	r24, r24
    2e24:	2c f4       	brge	.+10     	; 0x2e30 <HCLCD_Vid4Bits_Init+0x96>
		__ticks = 1;
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	98 ab       	std	Y+48, r25	; 0x30
    2e2c:	8f a7       	std	Y+47, r24	; 0x2f
    2e2e:	3f c0       	rjmp	.+126    	; 0x2eae <HCLCD_Vid4Bits_Init+0x114>
	else if (__tmp > 65535)
    2e30:	69 a9       	ldd	r22, Y+49	; 0x31
    2e32:	7a a9       	ldd	r23, Y+50	; 0x32
    2e34:	8b a9       	ldd	r24, Y+51	; 0x33
    2e36:	9c a9       	ldd	r25, Y+52	; 0x34
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	3f ef       	ldi	r19, 0xFF	; 255
    2e3c:	4f e7       	ldi	r20, 0x7F	; 127
    2e3e:	57 e4       	ldi	r21, 0x47	; 71
    2e40:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e44:	18 16       	cp	r1, r24
    2e46:	4c f5       	brge	.+82     	; 0x2e9a <HCLCD_Vid4Bits_Init+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e48:	6d a9       	ldd	r22, Y+53	; 0x35
    2e4a:	7e a9       	ldd	r23, Y+54	; 0x36
    2e4c:	8f a9       	ldd	r24, Y+55	; 0x37
    2e4e:	98 ad       	ldd	r25, Y+56	; 0x38
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	40 e2       	ldi	r20, 0x20	; 32
    2e56:	51 e4       	ldi	r21, 0x41	; 65
    2e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5c:	dc 01       	movw	r26, r24
    2e5e:	cb 01       	movw	r24, r22
    2e60:	bc 01       	movw	r22, r24
    2e62:	cd 01       	movw	r24, r26
    2e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	98 ab       	std	Y+48, r25	; 0x30
    2e6e:	8f a7       	std	Y+47, r24	; 0x2f
    2e70:	0f c0       	rjmp	.+30     	; 0x2e90 <HCLCD_Vid4Bits_Init+0xf6>
    2e72:	89 e1       	ldi	r24, 0x19	; 25
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	9e a7       	std	Y+46, r25	; 0x2e
    2e78:	8d a7       	std	Y+45, r24	; 0x2d
    2e7a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e7c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e7e:	01 97       	sbiw	r24, 0x01	; 1
    2e80:	f1 f7       	brne	.-4      	; 0x2e7e <HCLCD_Vid4Bits_Init+0xe4>
    2e82:	9e a7       	std	Y+46, r25	; 0x2e
    2e84:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e86:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e88:	98 a9       	ldd	r25, Y+48	; 0x30
    2e8a:	01 97       	sbiw	r24, 0x01	; 1
    2e8c:	98 ab       	std	Y+48, r25	; 0x30
    2e8e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e90:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e92:	98 a9       	ldd	r25, Y+48	; 0x30
    2e94:	00 97       	sbiw	r24, 0x00	; 0
    2e96:	69 f7       	brne	.-38     	; 0x2e72 <HCLCD_Vid4Bits_Init+0xd8>
    2e98:	14 c0       	rjmp	.+40     	; 0x2ec2 <HCLCD_Vid4Bits_Init+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e9a:	69 a9       	ldd	r22, Y+49	; 0x31
    2e9c:	7a a9       	ldd	r23, Y+50	; 0x32
    2e9e:	8b a9       	ldd	r24, Y+51	; 0x33
    2ea0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	98 ab       	std	Y+48, r25	; 0x30
    2eac:	8f a7       	std	Y+47, r24	; 0x2f
    2eae:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eb0:	98 a9       	ldd	r25, Y+48	; 0x30
    2eb2:	9c a7       	std	Y+44, r25	; 0x2c
    2eb4:	8b a7       	std	Y+43, r24	; 0x2b
    2eb6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2eb8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2eba:	01 97       	sbiw	r24, 0x01	; 1
    2ebc:	f1 f7       	brne	.-4      	; 0x2eba <HCLCD_Vid4Bits_Init+0x120>
    2ebe:	9c a7       	std	Y+44, r25	; 0x2c
    2ec0:	8b a7       	std	Y+43, r24	; 0x2b
	/*wait to 30ms*/
	_delay_ms(30);
	/*send function set command*/
	HCLCD_VidWriteCommand_4Bits(HCLCD_FUNCTION_SET>>4);
    2ec2:	82 e0       	ldi	r24, 0x02	; 2
    2ec4:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <HCLCD_VidWriteCommand_4Bits>
	HCLCD_VidWriteCommand_4Bits(HCLCD_FUNCTION_SET>>4);
    2ec8:	82 e0       	ldi	r24, 0x02	; 2
    2eca:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <HCLCD_VidWriteCommand_4Bits>
	HCLCD_VidWriteCommand_4Bits(HCLCD_FUNCTION_SET);
    2ece:	88 e2       	ldi	r24, 0x28	; 40
    2ed0:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <HCLCD_VidWriteCommand_4Bits>
    2ed4:	80 e0       	ldi	r24, 0x00	; 0
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	a0 e8       	ldi	r26, 0x80	; 128
    2eda:	bf e3       	ldi	r27, 0x3F	; 63
    2edc:	8f a3       	std	Y+39, r24	; 0x27
    2ede:	98 a7       	std	Y+40, r25	; 0x28
    2ee0:	a9 a7       	std	Y+41, r26	; 0x29
    2ee2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ee6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ee8:	89 a5       	ldd	r24, Y+41	; 0x29
    2eea:	9a a5       	ldd	r25, Y+42	; 0x2a
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	4a e7       	ldi	r20, 0x7A	; 122
    2ef2:	53 e4       	ldi	r21, 0x43	; 67
    2ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef8:	dc 01       	movw	r26, r24
    2efa:	cb 01       	movw	r24, r22
    2efc:	8b a3       	std	Y+35, r24	; 0x23
    2efe:	9c a3       	std	Y+36, r25	; 0x24
    2f00:	ad a3       	std	Y+37, r26	; 0x25
    2f02:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f04:	6b a1       	ldd	r22, Y+35	; 0x23
    2f06:	7c a1       	ldd	r23, Y+36	; 0x24
    2f08:	8d a1       	ldd	r24, Y+37	; 0x25
    2f0a:	9e a1       	ldd	r25, Y+38	; 0x26
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	40 e8       	ldi	r20, 0x80	; 128
    2f12:	5f e3       	ldi	r21, 0x3F	; 63
    2f14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f18:	88 23       	and	r24, r24
    2f1a:	2c f4       	brge	.+10     	; 0x2f26 <HCLCD_Vid4Bits_Init+0x18c>
		__ticks = 1;
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	9a a3       	std	Y+34, r25	; 0x22
    2f22:	89 a3       	std	Y+33, r24	; 0x21
    2f24:	3f c0       	rjmp	.+126    	; 0x2fa4 <HCLCD_Vid4Bits_Init+0x20a>
	else if (__tmp > 65535)
    2f26:	6b a1       	ldd	r22, Y+35	; 0x23
    2f28:	7c a1       	ldd	r23, Y+36	; 0x24
    2f2a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f2c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	3f ef       	ldi	r19, 0xFF	; 255
    2f32:	4f e7       	ldi	r20, 0x7F	; 127
    2f34:	57 e4       	ldi	r21, 0x47	; 71
    2f36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f3a:	18 16       	cp	r1, r24
    2f3c:	4c f5       	brge	.+82     	; 0x2f90 <HCLCD_Vid4Bits_Init+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3e:	6f a1       	ldd	r22, Y+39	; 0x27
    2f40:	78 a5       	ldd	r23, Y+40	; 0x28
    2f42:	89 a5       	ldd	r24, Y+41	; 0x29
    2f44:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e2       	ldi	r20, 0x20	; 32
    2f4c:	51 e4       	ldi	r21, 0x41	; 65
    2f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f52:	dc 01       	movw	r26, r24
    2f54:	cb 01       	movw	r24, r22
    2f56:	bc 01       	movw	r22, r24
    2f58:	cd 01       	movw	r24, r26
    2f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	9a a3       	std	Y+34, r25	; 0x22
    2f64:	89 a3       	std	Y+33, r24	; 0x21
    2f66:	0f c0       	rjmp	.+30     	; 0x2f86 <HCLCD_Vid4Bits_Init+0x1ec>
    2f68:	89 e1       	ldi	r24, 0x19	; 25
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	98 a3       	std	Y+32, r25	; 0x20
    2f6e:	8f 8f       	std	Y+31, r24	; 0x1f
    2f70:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f72:	98 a1       	ldd	r25, Y+32	; 0x20
    2f74:	01 97       	sbiw	r24, 0x01	; 1
    2f76:	f1 f7       	brne	.-4      	; 0x2f74 <HCLCD_Vid4Bits_Init+0x1da>
    2f78:	98 a3       	std	Y+32, r25	; 0x20
    2f7a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f7c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f7e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f80:	01 97       	sbiw	r24, 0x01	; 1
    2f82:	9a a3       	std	Y+34, r25	; 0x22
    2f84:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f86:	89 a1       	ldd	r24, Y+33	; 0x21
    2f88:	9a a1       	ldd	r25, Y+34	; 0x22
    2f8a:	00 97       	sbiw	r24, 0x00	; 0
    2f8c:	69 f7       	brne	.-38     	; 0x2f68 <HCLCD_Vid4Bits_Init+0x1ce>
    2f8e:	14 c0       	rjmp	.+40     	; 0x2fb8 <HCLCD_Vid4Bits_Init+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f90:	6b a1       	ldd	r22, Y+35	; 0x23
    2f92:	7c a1       	ldd	r23, Y+36	; 0x24
    2f94:	8d a1       	ldd	r24, Y+37	; 0x25
    2f96:	9e a1       	ldd	r25, Y+38	; 0x26
    2f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9c:	dc 01       	movw	r26, r24
    2f9e:	cb 01       	movw	r24, r22
    2fa0:	9a a3       	std	Y+34, r25	; 0x22
    2fa2:	89 a3       	std	Y+33, r24	; 0x21
    2fa4:	89 a1       	ldd	r24, Y+33	; 0x21
    2fa6:	9a a1       	ldd	r25, Y+34	; 0x22
    2fa8:	9e 8f       	std	Y+30, r25	; 0x1e
    2faa:	8d 8f       	std	Y+29, r24	; 0x1d
    2fac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fb0:	01 97       	sbiw	r24, 0x01	; 1
    2fb2:	f1 f7       	brne	.-4      	; 0x2fb0 <HCLCD_Vid4Bits_Init+0x216>
    2fb4:	9e 8f       	std	Y+30, r25	; 0x1e
    2fb6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	/*send Display on/off  command*/
	HCLCD_VidWriteCommand_4Bits(HCLCD_DISPLAY_ON_OFF>>4);
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <HCLCD_VidWriteCommand_4Bits>
	HCLCD_VidWriteCommand_4Bits(HCLCD_DISPLAY_ON_OFF);
    2fbe:	8f e0       	ldi	r24, 0x0F	; 15
    2fc0:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <HCLCD_VidWriteCommand_4Bits>
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	a0 e8       	ldi	r26, 0x80	; 128
    2fca:	bf e3       	ldi	r27, 0x3F	; 63
    2fcc:	89 8f       	std	Y+25, r24	; 0x19
    2fce:	9a 8f       	std	Y+26, r25	; 0x1a
    2fd0:	ab 8f       	std	Y+27, r26	; 0x1b
    2fd2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd4:	69 8d       	ldd	r22, Y+25	; 0x19
    2fd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	4a e7       	ldi	r20, 0x7A	; 122
    2fe2:	53 e4       	ldi	r21, 0x43	; 67
    2fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe8:	dc 01       	movw	r26, r24
    2fea:	cb 01       	movw	r24, r22
    2fec:	8d 8b       	std	Y+21, r24	; 0x15
    2fee:	9e 8b       	std	Y+22, r25	; 0x16
    2ff0:	af 8b       	std	Y+23, r26	; 0x17
    2ff2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ff4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff8:	8f 89       	ldd	r24, Y+23	; 0x17
    2ffa:	98 8d       	ldd	r25, Y+24	; 0x18
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	40 e8       	ldi	r20, 0x80	; 128
    3002:	5f e3       	ldi	r21, 0x3F	; 63
    3004:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3008:	88 23       	and	r24, r24
    300a:	2c f4       	brge	.+10     	; 0x3016 <HCLCD_Vid4Bits_Init+0x27c>
		__ticks = 1;
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	9c 8b       	std	Y+20, r25	; 0x14
    3012:	8b 8b       	std	Y+19, r24	; 0x13
    3014:	3f c0       	rjmp	.+126    	; 0x3094 <HCLCD_Vid4Bits_Init+0x2fa>
	else if (__tmp > 65535)
    3016:	6d 89       	ldd	r22, Y+21	; 0x15
    3018:	7e 89       	ldd	r23, Y+22	; 0x16
    301a:	8f 89       	ldd	r24, Y+23	; 0x17
    301c:	98 8d       	ldd	r25, Y+24	; 0x18
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	3f ef       	ldi	r19, 0xFF	; 255
    3022:	4f e7       	ldi	r20, 0x7F	; 127
    3024:	57 e4       	ldi	r21, 0x47	; 71
    3026:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    302a:	18 16       	cp	r1, r24
    302c:	4c f5       	brge	.+82     	; 0x3080 <HCLCD_Vid4Bits_Init+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    302e:	69 8d       	ldd	r22, Y+25	; 0x19
    3030:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3032:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3034:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	40 e2       	ldi	r20, 0x20	; 32
    303c:	51 e4       	ldi	r21, 0x41	; 65
    303e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	bc 01       	movw	r22, r24
    3048:	cd 01       	movw	r24, r26
    304a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304e:	dc 01       	movw	r26, r24
    3050:	cb 01       	movw	r24, r22
    3052:	9c 8b       	std	Y+20, r25	; 0x14
    3054:	8b 8b       	std	Y+19, r24	; 0x13
    3056:	0f c0       	rjmp	.+30     	; 0x3076 <HCLCD_Vid4Bits_Init+0x2dc>
    3058:	89 e1       	ldi	r24, 0x19	; 25
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	9a 8b       	std	Y+18, r25	; 0x12
    305e:	89 8b       	std	Y+17, r24	; 0x11
    3060:	89 89       	ldd	r24, Y+17	; 0x11
    3062:	9a 89       	ldd	r25, Y+18	; 0x12
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	f1 f7       	brne	.-4      	; 0x3064 <HCLCD_Vid4Bits_Init+0x2ca>
    3068:	9a 8b       	std	Y+18, r25	; 0x12
    306a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    306c:	8b 89       	ldd	r24, Y+19	; 0x13
    306e:	9c 89       	ldd	r25, Y+20	; 0x14
    3070:	01 97       	sbiw	r24, 0x01	; 1
    3072:	9c 8b       	std	Y+20, r25	; 0x14
    3074:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3076:	8b 89       	ldd	r24, Y+19	; 0x13
    3078:	9c 89       	ldd	r25, Y+20	; 0x14
    307a:	00 97       	sbiw	r24, 0x00	; 0
    307c:	69 f7       	brne	.-38     	; 0x3058 <HCLCD_Vid4Bits_Init+0x2be>
    307e:	14 c0       	rjmp	.+40     	; 0x30a8 <HCLCD_Vid4Bits_Init+0x30e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3080:	6d 89       	ldd	r22, Y+21	; 0x15
    3082:	7e 89       	ldd	r23, Y+22	; 0x16
    3084:	8f 89       	ldd	r24, Y+23	; 0x17
    3086:	98 8d       	ldd	r25, Y+24	; 0x18
    3088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	9c 8b       	std	Y+20, r25	; 0x14
    3092:	8b 8b       	std	Y+19, r24	; 0x13
    3094:	8b 89       	ldd	r24, Y+19	; 0x13
    3096:	9c 89       	ldd	r25, Y+20	; 0x14
    3098:	98 8b       	std	Y+16, r25	; 0x10
    309a:	8f 87       	std	Y+15, r24	; 0x0f
    309c:	8f 85       	ldd	r24, Y+15	; 0x0f
    309e:	98 89       	ldd	r25, Y+16	; 0x10
    30a0:	01 97       	sbiw	r24, 0x01	; 1
    30a2:	f1 f7       	brne	.-4      	; 0x30a0 <HCLCD_Vid4Bits_Init+0x306>
    30a4:	98 8b       	std	Y+16, r25	; 0x10
    30a6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	/*send Display Clear  command*/
	HCLCD_VidWriteCommand_4Bits(DISPLAY_CLEAR>>4);
    30a8:	80 e0       	ldi	r24, 0x00	; 0
    30aa:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <HCLCD_VidWriteCommand_4Bits>
	HCLCD_VidWriteCommand_4Bits(DISPLAY_CLEAR);
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <HCLCD_VidWriteCommand_4Bits>
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	a0 e0       	ldi	r26, 0x00	; 0
    30ba:	b0 e4       	ldi	r27, 0x40	; 64
    30bc:	8b 87       	std	Y+11, r24	; 0x0b
    30be:	9c 87       	std	Y+12, r25	; 0x0c
    30c0:	ad 87       	std	Y+13, r26	; 0x0d
    30c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	4a e7       	ldi	r20, 0x7A	; 122
    30d2:	53 e4       	ldi	r21, 0x43	; 67
    30d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	8f 83       	std	Y+7, r24	; 0x07
    30de:	98 87       	std	Y+8, r25	; 0x08
    30e0:	a9 87       	std	Y+9, r26	; 0x09
    30e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30e4:	6f 81       	ldd	r22, Y+7	; 0x07
    30e6:	78 85       	ldd	r23, Y+8	; 0x08
    30e8:	89 85       	ldd	r24, Y+9	; 0x09
    30ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	40 e8       	ldi	r20, 0x80	; 128
    30f2:	5f e3       	ldi	r21, 0x3F	; 63
    30f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30f8:	88 23       	and	r24, r24
    30fa:	2c f4       	brge	.+10     	; 0x3106 <HCLCD_Vid4Bits_Init+0x36c>
		__ticks = 1;
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	9e 83       	std	Y+6, r25	; 0x06
    3102:	8d 83       	std	Y+5, r24	; 0x05
    3104:	3f c0       	rjmp	.+126    	; 0x3184 <HCLCD_Vid4Bits_Init+0x3ea>
	else if (__tmp > 65535)
    3106:	6f 81       	ldd	r22, Y+7	; 0x07
    3108:	78 85       	ldd	r23, Y+8	; 0x08
    310a:	89 85       	ldd	r24, Y+9	; 0x09
    310c:	9a 85       	ldd	r25, Y+10	; 0x0a
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	3f ef       	ldi	r19, 0xFF	; 255
    3112:	4f e7       	ldi	r20, 0x7F	; 127
    3114:	57 e4       	ldi	r21, 0x47	; 71
    3116:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    311a:	18 16       	cp	r1, r24
    311c:	4c f5       	brge	.+82     	; 0x3170 <HCLCD_Vid4Bits_Init+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    311e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3120:	7c 85       	ldd	r23, Y+12	; 0x0c
    3122:	8d 85       	ldd	r24, Y+13	; 0x0d
    3124:	9e 85       	ldd	r25, Y+14	; 0x0e
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	40 e2       	ldi	r20, 0x20	; 32
    312c:	51 e4       	ldi	r21, 0x41	; 65
    312e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	bc 01       	movw	r22, r24
    3138:	cd 01       	movw	r24, r26
    313a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	9e 83       	std	Y+6, r25	; 0x06
    3144:	8d 83       	std	Y+5, r24	; 0x05
    3146:	0f c0       	rjmp	.+30     	; 0x3166 <HCLCD_Vid4Bits_Init+0x3cc>
    3148:	89 e1       	ldi	r24, 0x19	; 25
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	9c 83       	std	Y+4, r25	; 0x04
    314e:	8b 83       	std	Y+3, r24	; 0x03
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	9c 81       	ldd	r25, Y+4	; 0x04
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	f1 f7       	brne	.-4      	; 0x3154 <HCLCD_Vid4Bits_Init+0x3ba>
    3158:	9c 83       	std	Y+4, r25	; 0x04
    315a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    315c:	8d 81       	ldd	r24, Y+5	; 0x05
    315e:	9e 81       	ldd	r25, Y+6	; 0x06
    3160:	01 97       	sbiw	r24, 0x01	; 1
    3162:	9e 83       	std	Y+6, r25	; 0x06
    3164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3166:	8d 81       	ldd	r24, Y+5	; 0x05
    3168:	9e 81       	ldd	r25, Y+6	; 0x06
    316a:	00 97       	sbiw	r24, 0x00	; 0
    316c:	69 f7       	brne	.-38     	; 0x3148 <HCLCD_Vid4Bits_Init+0x3ae>
    316e:	14 c0       	rjmp	.+40     	; 0x3198 <HCLCD_Vid4Bits_Init+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3170:	6f 81       	ldd	r22, Y+7	; 0x07
    3172:	78 85       	ldd	r23, Y+8	; 0x08
    3174:	89 85       	ldd	r24, Y+9	; 0x09
    3176:	9a 85       	ldd	r25, Y+10	; 0x0a
    3178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	9e 83       	std	Y+6, r25	; 0x06
    3182:	8d 83       	std	Y+5, r24	; 0x05
    3184:	8d 81       	ldd	r24, Y+5	; 0x05
    3186:	9e 81       	ldd	r25, Y+6	; 0x06
    3188:	9a 83       	std	Y+2, r25	; 0x02
    318a:	89 83       	std	Y+1, r24	; 0x01
    318c:	89 81       	ldd	r24, Y+1	; 0x01
    318e:	9a 81       	ldd	r25, Y+2	; 0x02
    3190:	01 97       	sbiw	r24, 0x01	; 1
    3192:	f1 f7       	brne	.-4      	; 0x3190 <HCLCD_Vid4Bits_Init+0x3f6>
    3194:	9a 83       	std	Y+2, r25	; 0x02
    3196:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*send Entry Mode  set command*/
	HCLCD_VidWriteCommand_4Bits(HCLCD_ENTRY_MODE_SET>>4);
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <HCLCD_VidWriteCommand_4Bits>
	HCLCD_VidWriteCommand_4Bits(HCLCD_ENTRY_MODE_SET);
    319e:	86 e0       	ldi	r24, 0x06	; 6
    31a0:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <HCLCD_VidWriteCommand_4Bits>
}
    31a4:	e9 96       	adiw	r28, 0x39	; 57
    31a6:	0f b6       	in	r0, 0x3f	; 63
    31a8:	f8 94       	cli
    31aa:	de bf       	out	0x3e, r29	; 62
    31ac:	0f be       	out	0x3f, r0	; 63
    31ae:	cd bf       	out	0x3d, r28	; 61
    31b0:	cf 91       	pop	r28
    31b2:	df 91       	pop	r29
    31b4:	08 95       	ret

000031b6 <HCLCD_VidWriteChar_4Bits>:
void HCLCD_VidWriteChar_4Bits(u8 Copy_u8Data)
{
    31b6:	df 93       	push	r29
    31b8:	cf 93       	push	r28
    31ba:	cd b7       	in	r28, 0x3d	; 61
    31bc:	de b7       	in	r29, 0x3e	; 62
    31be:	60 97       	sbiw	r28, 0x10	; 16
    31c0:	0f b6       	in	r0, 0x3f	; 63
    31c2:	f8 94       	cli
    31c4:	de bf       	out	0x3e, r29	; 62
    31c6:	0f be       	out	0x3f, r0	; 63
    31c8:	cd bf       	out	0x3d, r28	; 61
    31ca:	88 8b       	std	Y+16, r24	; 0x10
	u8 LOC_u8CopyData;
	/*select Data register--> Write One on Rs pin*/
	MDIO_Error_State_SetPinValue(RS,CONTROL_PORT,PIN_HIGH);
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	60 e0       	ldi	r22, 0x00	; 0
    31d0:	41 e0       	ldi	r20, 0x01	; 1
    31d2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
	/*select Write mode--> Write zero on RW pin*/
	//MDIO_Error_State_SetPinValue(RW,CONTROL_PORT,PIN_LOW);
	/*Send Data*/
	LOC_u8CopyData=(Copy_u8Data&0x0F)<<HCLCD_PINSTART;
    31d6:	88 89       	ldd	r24, Y+16	; 0x10
    31d8:	8f 70       	andi	r24, 0x0F	; 15
    31da:	88 0f       	add	r24, r24
    31dc:	88 0f       	add	r24, r24
    31de:	88 0f       	add	r24, r24
    31e0:	8f 87       	std	Y+15, r24	; 0x0f
	MDIO_Error_State_SetNippleValue(HCLCD_PINSTART,DATA_PORT,LOC_u8CopyData);
    31e2:	83 e0       	ldi	r24, 0x03	; 3
    31e4:	60 e0       	ldi	r22, 0x00	; 0
    31e6:	4f 85       	ldd	r20, Y+15	; 0x0f
    31e8:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <MDIO_Error_State_SetNippleValue>
	/*Send Enable*/
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_HIGH);
    31ec:	82 e0       	ldi	r24, 0x02	; 2
    31ee:	60 e0       	ldi	r22, 0x00	; 0
    31f0:	41 e0       	ldi	r20, 0x01	; 1
    31f2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	a0 e0       	ldi	r26, 0x00	; 0
    31fc:	b0 e4       	ldi	r27, 0x40	; 64
    31fe:	8b 87       	std	Y+11, r24	; 0x0b
    3200:	9c 87       	std	Y+12, r25	; 0x0c
    3202:	ad 87       	std	Y+13, r26	; 0x0d
    3204:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3206:	6b 85       	ldd	r22, Y+11	; 0x0b
    3208:	7c 85       	ldd	r23, Y+12	; 0x0c
    320a:	8d 85       	ldd	r24, Y+13	; 0x0d
    320c:	9e 85       	ldd	r25, Y+14	; 0x0e
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	4a e7       	ldi	r20, 0x7A	; 122
    3214:	53 e4       	ldi	r21, 0x43	; 67
    3216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	8f 83       	std	Y+7, r24	; 0x07
    3220:	98 87       	std	Y+8, r25	; 0x08
    3222:	a9 87       	std	Y+9, r26	; 0x09
    3224:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3226:	6f 81       	ldd	r22, Y+7	; 0x07
    3228:	78 85       	ldd	r23, Y+8	; 0x08
    322a:	89 85       	ldd	r24, Y+9	; 0x09
    322c:	9a 85       	ldd	r25, Y+10	; 0x0a
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	40 e8       	ldi	r20, 0x80	; 128
    3234:	5f e3       	ldi	r21, 0x3F	; 63
    3236:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    323a:	88 23       	and	r24, r24
    323c:	2c f4       	brge	.+10     	; 0x3248 <HCLCD_VidWriteChar_4Bits+0x92>
		__ticks = 1;
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	9e 83       	std	Y+6, r25	; 0x06
    3244:	8d 83       	std	Y+5, r24	; 0x05
    3246:	3f c0       	rjmp	.+126    	; 0x32c6 <HCLCD_VidWriteChar_4Bits+0x110>
	else if (__tmp > 65535)
    3248:	6f 81       	ldd	r22, Y+7	; 0x07
    324a:	78 85       	ldd	r23, Y+8	; 0x08
    324c:	89 85       	ldd	r24, Y+9	; 0x09
    324e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3250:	20 e0       	ldi	r18, 0x00	; 0
    3252:	3f ef       	ldi	r19, 0xFF	; 255
    3254:	4f e7       	ldi	r20, 0x7F	; 127
    3256:	57 e4       	ldi	r21, 0x47	; 71
    3258:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    325c:	18 16       	cp	r1, r24
    325e:	4c f5       	brge	.+82     	; 0x32b2 <HCLCD_VidWriteChar_4Bits+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3260:	6b 85       	ldd	r22, Y+11	; 0x0b
    3262:	7c 85       	ldd	r23, Y+12	; 0x0c
    3264:	8d 85       	ldd	r24, Y+13	; 0x0d
    3266:	9e 85       	ldd	r25, Y+14	; 0x0e
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	40 e2       	ldi	r20, 0x20	; 32
    326e:	51 e4       	ldi	r21, 0x41	; 65
    3270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	bc 01       	movw	r22, r24
    327a:	cd 01       	movw	r24, r26
    327c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3280:	dc 01       	movw	r26, r24
    3282:	cb 01       	movw	r24, r22
    3284:	9e 83       	std	Y+6, r25	; 0x06
    3286:	8d 83       	std	Y+5, r24	; 0x05
    3288:	0f c0       	rjmp	.+30     	; 0x32a8 <HCLCD_VidWriteChar_4Bits+0xf2>
    328a:	89 e1       	ldi	r24, 0x19	; 25
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	9c 83       	std	Y+4, r25	; 0x04
    3290:	8b 83       	std	Y+3, r24	; 0x03
    3292:	8b 81       	ldd	r24, Y+3	; 0x03
    3294:	9c 81       	ldd	r25, Y+4	; 0x04
    3296:	01 97       	sbiw	r24, 0x01	; 1
    3298:	f1 f7       	brne	.-4      	; 0x3296 <HCLCD_VidWriteChar_4Bits+0xe0>
    329a:	9c 83       	std	Y+4, r25	; 0x04
    329c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329e:	8d 81       	ldd	r24, Y+5	; 0x05
    32a0:	9e 81       	ldd	r25, Y+6	; 0x06
    32a2:	01 97       	sbiw	r24, 0x01	; 1
    32a4:	9e 83       	std	Y+6, r25	; 0x06
    32a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a8:	8d 81       	ldd	r24, Y+5	; 0x05
    32aa:	9e 81       	ldd	r25, Y+6	; 0x06
    32ac:	00 97       	sbiw	r24, 0x00	; 0
    32ae:	69 f7       	brne	.-38     	; 0x328a <HCLCD_VidWriteChar_4Bits+0xd4>
    32b0:	14 c0       	rjmp	.+40     	; 0x32da <HCLCD_VidWriteChar_4Bits+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32b2:	6f 81       	ldd	r22, Y+7	; 0x07
    32b4:	78 85       	ldd	r23, Y+8	; 0x08
    32b6:	89 85       	ldd	r24, Y+9	; 0x09
    32b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	9e 83       	std	Y+6, r25	; 0x06
    32c4:	8d 83       	std	Y+5, r24	; 0x05
    32c6:	8d 81       	ldd	r24, Y+5	; 0x05
    32c8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ca:	9a 83       	std	Y+2, r25	; 0x02
    32cc:	89 83       	std	Y+1, r24	; 0x01
    32ce:	89 81       	ldd	r24, Y+1	; 0x01
    32d0:	9a 81       	ldd	r25, Y+2	; 0x02
    32d2:	01 97       	sbiw	r24, 0x01	; 1
    32d4:	f1 f7       	brne	.-4      	; 0x32d2 <HCLCD_VidWriteChar_4Bits+0x11c>
    32d6:	9a 83       	std	Y+2, r25	; 0x02
    32d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_Error_State_SetPinValue(E,CONTROL_PORT,PIN_LOW);
    32da:	82 e0       	ldi	r24, 0x02	; 2
    32dc:	60 e0       	ldi	r22, 0x00	; 0
    32de:	40 e0       	ldi	r20, 0x00	; 0
    32e0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <MDIO_Error_State_SetPinValue>
}
    32e4:	60 96       	adiw	r28, 0x10	; 16
    32e6:	0f b6       	in	r0, 0x3f	; 63
    32e8:	f8 94       	cli
    32ea:	de bf       	out	0x3e, r29	; 62
    32ec:	0f be       	out	0x3f, r0	; 63
    32ee:	cd bf       	out	0x3d, r28	; 61
    32f0:	cf 91       	pop	r28
    32f2:	df 91       	pop	r29
    32f4:	08 95       	ret

000032f6 <HCLCD_VidSendChar_4Bits>:
void HCLCD_VidSendChar_4Bits(u8 Copy_u8Data)
{
    32f6:	df 93       	push	r29
    32f8:	cf 93       	push	r28
    32fa:	0f 92       	push	r0
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
    3300:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_VidWriteChar_4Bits(Copy_u8Data>>4);
    3302:	89 81       	ldd	r24, Y+1	; 0x01
    3304:	82 95       	swap	r24
    3306:	8f 70       	andi	r24, 0x0F	; 15
    3308:	0e 94 db 18 	call	0x31b6	; 0x31b6 <HCLCD_VidWriteChar_4Bits>
	HCLCD_VidWriteChar_4Bits(Copy_u8Data);
    330c:	89 81       	ldd	r24, Y+1	; 0x01
    330e:	0e 94 db 18 	call	0x31b6	; 0x31b6 <HCLCD_VidWriteChar_4Bits>
}
    3312:	0f 90       	pop	r0
    3314:	cf 91       	pop	r28
    3316:	df 91       	pop	r29
    3318:	08 95       	ret

0000331a <HCLCD_VidWriteString_4Bits>:
void HCLCD_VidWriteString_4Bits(u8* PCopy_u8String)
{
    331a:	df 93       	push	r29
    331c:	cf 93       	push	r28
    331e:	00 d0       	rcall	.+0      	; 0x3320 <HCLCD_VidWriteString_4Bits+0x6>
    3320:	0f 92       	push	r0
    3322:	cd b7       	in	r28, 0x3d	; 61
    3324:	de b7       	in	r29, 0x3e	; 62
    3326:	9b 83       	std	Y+3, r25	; 0x03
    3328:	8a 83       	std	Y+2, r24	; 0x02
	u8 Loc_u8Count=0;
    332a:	19 82       	std	Y+1, r1	; 0x01
    332c:	0e c0       	rjmp	.+28     	; 0x334a <HCLCD_VidWriteString_4Bits+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HCLCD_VidSendChar_4Bits(PCopy_u8String[Loc_u8Count]);
    332e:	89 81       	ldd	r24, Y+1	; 0x01
    3330:	28 2f       	mov	r18, r24
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	8a 81       	ldd	r24, Y+2	; 0x02
    3336:	9b 81       	ldd	r25, Y+3	; 0x03
    3338:	fc 01       	movw	r30, r24
    333a:	e2 0f       	add	r30, r18
    333c:	f3 1f       	adc	r31, r19
    333e:	80 81       	ld	r24, Z
    3340:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <HCLCD_VidSendChar_4Bits>
		Loc_u8Count++;
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	8f 5f       	subi	r24, 0xFF	; 255
    3348:	89 83       	std	Y+1, r24	; 0x01
	HCLCD_VidWriteChar_4Bits(Copy_u8Data);
}
void HCLCD_VidWriteString_4Bits(u8* PCopy_u8String)
{
	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    334a:	89 81       	ldd	r24, Y+1	; 0x01
    334c:	28 2f       	mov	r18, r24
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	8a 81       	ldd	r24, Y+2	; 0x02
    3352:	9b 81       	ldd	r25, Y+3	; 0x03
    3354:	fc 01       	movw	r30, r24
    3356:	e2 0f       	add	r30, r18
    3358:	f3 1f       	adc	r31, r19
    335a:	80 81       	ld	r24, Z
    335c:	88 23       	and	r24, r24
    335e:	39 f7       	brne	.-50     	; 0x332e <HCLCD_VidWriteString_4Bits+0x14>
	{
		HCLCD_VidSendChar_4Bits(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}
}
    3360:	0f 90       	pop	r0
    3362:	0f 90       	pop	r0
    3364:	0f 90       	pop	r0
    3366:	cf 91       	pop	r28
    3368:	df 91       	pop	r29
    336a:	08 95       	ret

0000336c <HCLCD_VidWriteNumber_4Bits>:
void HCLCD_VidWriteNumber_4Bits(u32 Copy_u8Number)
{
    336c:	0f 93       	push	r16
    336e:	1f 93       	push	r17
    3370:	df 93       	push	r29
    3372:	cf 93       	push	r28
    3374:	cd b7       	in	r28, 0x3d	; 61
    3376:	de b7       	in	r29, 0x3e	; 62
    3378:	60 97       	sbiw	r28, 0x10	; 16
    337a:	0f b6       	in	r0, 0x3f	; 63
    337c:	f8 94       	cli
    337e:	de bf       	out	0x3e, r29	; 62
    3380:	0f be       	out	0x3f, r0	; 63
    3382:	cd bf       	out	0x3d, r28	; 61
    3384:	6d 87       	std	Y+13, r22	; 0x0d
    3386:	7e 87       	std	Y+14, r23	; 0x0e
    3388:	8f 87       	std	Y+15, r24	; 0x0f
    338a:	98 8b       	std	Y+16, r25	; 0x10
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
    338c:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u8Number>0)
    338e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3390:	9e 85       	ldd	r25, Y+14	; 0x0e
    3392:	af 85       	ldd	r26, Y+15	; 0x0f
    3394:	b8 89       	ldd	r27, Y+16	; 0x10
    3396:	00 97       	sbiw	r24, 0x00	; 0
    3398:	a1 05       	cpc	r26, r1
    339a:	b1 05       	cpc	r27, r1
    339c:	09 f4       	brne	.+2      	; 0x33a0 <HCLCD_VidWriteNumber_4Bits+0x34>
    339e:	4f c0       	rjmp	.+158    	; 0x343e <HCLCD_VidWriteNumber_4Bits+0xd2>
    33a0:	2d c0       	rjmp	.+90     	; 0x33fc <HCLCD_VidWriteNumber_4Bits+0x90>
	{
		while(Copy_u8Number!=0)
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
    33a2:	8a 81       	ldd	r24, Y+2	; 0x02
    33a4:	08 2f       	mov	r16, r24
    33a6:	10 e0       	ldi	r17, 0x00	; 0
    33a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    33aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ac:	af 85       	ldd	r26, Y+15	; 0x0f
    33ae:	b8 89       	ldd	r27, Y+16	; 0x10
    33b0:	2a e0       	ldi	r18, 0x0A	; 10
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	40 e0       	ldi	r20, 0x00	; 0
    33b6:	50 e0       	ldi	r21, 0x00	; 0
    33b8:	bc 01       	movw	r22, r24
    33ba:	cd 01       	movw	r24, r26
    33bc:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__udivmodsi4>
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	28 2f       	mov	r18, r24
    33c6:	ce 01       	movw	r24, r28
    33c8:	03 96       	adiw	r24, 0x03	; 3
    33ca:	fc 01       	movw	r30, r24
    33cc:	e0 0f       	add	r30, r16
    33ce:	f1 1f       	adc	r31, r17
    33d0:	20 83       	st	Z, r18
			Copy_u8Number/=10;
    33d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    33d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    33d6:	af 85       	ldd	r26, Y+15	; 0x0f
    33d8:	b8 89       	ldd	r27, Y+16	; 0x10
    33da:	2a e0       	ldi	r18, 0x0A	; 10
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	40 e0       	ldi	r20, 0x00	; 0
    33e0:	50 e0       	ldi	r21, 0x00	; 0
    33e2:	bc 01       	movw	r22, r24
    33e4:	cd 01       	movw	r24, r26
    33e6:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <__udivmodsi4>
    33ea:	da 01       	movw	r26, r20
    33ec:	c9 01       	movw	r24, r18
    33ee:	8d 87       	std	Y+13, r24	; 0x0d
    33f0:	9e 87       	std	Y+14, r25	; 0x0e
    33f2:	af 87       	std	Y+15, r26	; 0x0f
    33f4:	b8 8b       	std	Y+16, r27	; 0x10
			LOC_Count++;
    33f6:	8a 81       	ldd	r24, Y+2	; 0x02
    33f8:	8f 5f       	subi	r24, 0xFF	; 255
    33fa:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 ARR_Digits[10];
	u8 LOC_Count=0;
	if(Copy_u8Number>0)
	{
		while(Copy_u8Number!=0)
    33fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    33fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3400:	af 85       	ldd	r26, Y+15	; 0x0f
    3402:	b8 89       	ldd	r27, Y+16	; 0x10
    3404:	00 97       	sbiw	r24, 0x00	; 0
    3406:	a1 05       	cpc	r26, r1
    3408:	b1 05       	cpc	r27, r1
    340a:	59 f6       	brne	.-106    	; 0x33a2 <HCLCD_VidWriteNumber_4Bits+0x36>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    340c:	8a 81       	ldd	r24, Y+2	; 0x02
    340e:	81 50       	subi	r24, 0x01	; 1
    3410:	89 83       	std	Y+1, r24	; 0x01
    3412:	11 c0       	rjmp	.+34     	; 0x3436 <HCLCD_VidWriteNumber_4Bits+0xca>
		{
			HCLCD_VidSendChar_4Bits(ARR_Digits[i]+'0');
    3414:	89 81       	ldd	r24, Y+1	; 0x01
    3416:	28 2f       	mov	r18, r24
    3418:	33 27       	eor	r19, r19
    341a:	27 fd       	sbrc	r18, 7
    341c:	30 95       	com	r19
    341e:	ce 01       	movw	r24, r28
    3420:	03 96       	adiw	r24, 0x03	; 3
    3422:	fc 01       	movw	r30, r24
    3424:	e2 0f       	add	r30, r18
    3426:	f3 1f       	adc	r31, r19
    3428:	80 81       	ld	r24, Z
    342a:	80 5d       	subi	r24, 0xD0	; 208
    342c:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <HCLCD_VidSendChar_4Bits>
		{
			ARR_Digits[LOC_Count]=Copy_u8Number%10;
			Copy_u8Number/=10;
			LOC_Count++;
		}
		for(s8 i=LOC_Count-1;i>=0;i--)
    3430:	89 81       	ldd	r24, Y+1	; 0x01
    3432:	81 50       	subi	r24, 0x01	; 1
    3434:	89 83       	std	Y+1, r24	; 0x01
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	88 23       	and	r24, r24
    343a:	64 f7       	brge	.-40     	; 0x3414 <HCLCD_VidWriteNumber_4Bits+0xa8>
    343c:	03 c0       	rjmp	.+6      	; 0x3444 <HCLCD_VidWriteNumber_4Bits+0xd8>
			HCLCD_VidSendChar_4Bits(ARR_Digits[i]+'0');
		}
	}
	else
	{
		HCLCD_VidWriteChar_8Bits('0');
    343e:	80 e3       	ldi	r24, 0x30	; 48
    3440:	0e 94 5c 14 	call	0x28b8	; 0x28b8 <HCLCD_VidWriteChar_8Bits>
	}
}
    3444:	60 96       	adiw	r28, 0x10	; 16
    3446:	0f b6       	in	r0, 0x3f	; 63
    3448:	f8 94       	cli
    344a:	de bf       	out	0x3e, r29	; 62
    344c:	0f be       	out	0x3f, r0	; 63
    344e:	cd bf       	out	0x3d, r28	; 61
    3450:	cf 91       	pop	r28
    3452:	df 91       	pop	r29
    3454:	1f 91       	pop	r17
    3456:	0f 91       	pop	r16
    3458:	08 95       	ret

0000345a <HCLCD_VidSetPosition_4BitsMode>:
void HCLCD_VidSetPosition_4BitsMode(u8 Copy_u8LineNumber , u8 Copy_u8PositionNumber)
{
    345a:	df 93       	push	r29
    345c:	cf 93       	push	r28
    345e:	00 d0       	rcall	.+0      	; 0x3460 <HCLCD_VidSetPosition_4BitsMode+0x6>
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
    3464:	89 83       	std	Y+1, r24	; 0x01
    3466:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber==HCLCD_LINE1)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	81 30       	cpi	r24, 0x01	; 1
    346c:	b9 f4       	brne	.+46     	; 0x349c <HCLCD_VidSetPosition_4BitsMode+0x42>
    346e:	8a 81       	ldd	r24, Y+2	; 0x02
    3470:	80 31       	cpi	r24, 0x10	; 16
    3472:	a0 f4       	brcc	.+40     	; 0x349c <HCLCD_VidSetPosition_4BitsMode+0x42>
	{
		HCLCD_VidWriteCommand_4Bits((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    3474:	8a 81       	ldd	r24, Y+2	; 0x02
    3476:	88 2f       	mov	r24, r24
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	80 58       	subi	r24, 0x80	; 128
    347c:	9f 4f       	sbci	r25, 0xFF	; 255
    347e:	95 95       	asr	r25
    3480:	87 95       	ror	r24
    3482:	95 95       	asr	r25
    3484:	87 95       	ror	r24
    3486:	95 95       	asr	r25
    3488:	87 95       	ror	r24
    348a:	95 95       	asr	r25
    348c:	87 95       	ror	r24
    348e:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <HCLCD_VidWriteCommand_4Bits>
		HCLCD_VidWriteCommand_4Bits((LINE1_OFFSET_ADDRESS+Copy_u8PositionNumber));
    3492:	8a 81       	ldd	r24, Y+2	; 0x02
    3494:	80 58       	subi	r24, 0x80	; 128
    3496:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <HCLCD_VidWriteCommand_4Bits>
    349a:	19 c0       	rjmp	.+50     	; 0x34ce <HCLCD_VidSetPosition_4BitsMode+0x74>
	}
	else if((Copy_u8LineNumber==HCLCD_LINE2)&&((Copy_u8PositionNumber>=0)&&(Copy_u8PositionNumber<16)))
    349c:	89 81       	ldd	r24, Y+1	; 0x01
    349e:	82 30       	cpi	r24, 0x02	; 2
    34a0:	b1 f4       	brne	.+44     	; 0x34ce <HCLCD_VidSetPosition_4BitsMode+0x74>
    34a2:	8a 81       	ldd	r24, Y+2	; 0x02
    34a4:	80 31       	cpi	r24, 0x10	; 16
    34a6:	98 f4       	brcc	.+38     	; 0x34ce <HCLCD_VidSetPosition_4BitsMode+0x74>
	{
		HCLCD_VidWriteCommand_4Bits((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber)>>4);
    34a8:	8a 81       	ldd	r24, Y+2	; 0x02
    34aa:	88 2f       	mov	r24, r24
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	80 54       	subi	r24, 0x40	; 64
    34b0:	9f 4f       	sbci	r25, 0xFF	; 255
    34b2:	95 95       	asr	r25
    34b4:	87 95       	ror	r24
    34b6:	95 95       	asr	r25
    34b8:	87 95       	ror	r24
    34ba:	95 95       	asr	r25
    34bc:	87 95       	ror	r24
    34be:	95 95       	asr	r25
    34c0:	87 95       	ror	r24
    34c2:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <HCLCD_VidWriteCommand_4Bits>
		HCLCD_VidWriteCommand_4Bits((LINE2_OFFSET_ADDRESS+Copy_u8PositionNumber));
    34c6:	8a 81       	ldd	r24, Y+2	; 0x02
    34c8:	80 54       	subi	r24, 0x40	; 64
    34ca:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <HCLCD_VidWriteCommand_4Bits>
	}
	else
	{
		/*Do Nothing*/
	}
}
    34ce:	0f 90       	pop	r0
    34d0:	0f 90       	pop	r0
    34d2:	cf 91       	pop	r28
    34d4:	df 91       	pop	r29
    34d6:	08 95       	ret

000034d8 <main>:
#include"LIB\LSTD_TYPES.h"
#include"MCAL\MDIO\MDIO_Interface.h"
#include"HAL\HKPD\HKPD_Interface.h"
#include"HAL\HCLCD\HCLCD_Interface.h"
int main(void)
{
    34d8:	df 93       	push	r29
    34da:	cf 93       	push	r28
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
    34e0:	62 97       	sbiw	r28, 0x12	; 18
    34e2:	0f b6       	in	r0, 0x3f	; 63
    34e4:	f8 94       	cli
    34e6:	de bf       	out	0x3e, r29	; 62
    34e8:	0f be       	out	0x3f, r0	; 63
    34ea:	cd bf       	out	0x3d, r28	; 61
	/* store numbers from 0 to 9 in array */
	u8 ARR_7_Seg_Display[10] = {0b00111111,0b00000110,
			0b01011011,0b01001111,
			0b01100110,0b01101101,
			0b01111101,0b00000111,
			0b01111111,0b01101111};
    34ec:	9e 01       	movw	r18, r28
    34ee:	2e 5f       	subi	r18, 0xFE	; 254
    34f0:	3f 4f       	sbci	r19, 0xFF	; 255
    34f2:	3f 87       	std	Y+15, r19	; 0x0f
    34f4:	2e 87       	std	Y+14, r18	; 0x0e
    34f6:	88 e7       	ldi	r24, 0x78	; 120
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	99 8b       	std	Y+17, r25	; 0x11
    34fc:	88 8b       	std	Y+16, r24	; 0x10
    34fe:	9a e0       	ldi	r25, 0x0A	; 10
    3500:	9a 8b       	std	Y+18, r25	; 0x12
    3502:	e8 89       	ldd	r30, Y+16	; 0x10
    3504:	f9 89       	ldd	r31, Y+17	; 0x11
    3506:	00 80       	ld	r0, Z
    3508:	28 89       	ldd	r18, Y+16	; 0x10
    350a:	39 89       	ldd	r19, Y+17	; 0x11
    350c:	2f 5f       	subi	r18, 0xFF	; 255
    350e:	3f 4f       	sbci	r19, 0xFF	; 255
    3510:	39 8b       	std	Y+17, r19	; 0x11
    3512:	28 8b       	std	Y+16, r18	; 0x10
    3514:	ee 85       	ldd	r30, Y+14	; 0x0e
    3516:	ff 85       	ldd	r31, Y+15	; 0x0f
    3518:	00 82       	st	Z, r0
    351a:	2e 85       	ldd	r18, Y+14	; 0x0e
    351c:	3f 85       	ldd	r19, Y+15	; 0x0f
    351e:	2f 5f       	subi	r18, 0xFF	; 255
    3520:	3f 4f       	sbci	r19, 0xFF	; 255
    3522:	3f 87       	std	Y+15, r19	; 0x0f
    3524:	2e 87       	std	Y+14, r18	; 0x0e
    3526:	3a 89       	ldd	r19, Y+18	; 0x12
    3528:	31 50       	subi	r19, 0x01	; 1
    352a:	3a 8b       	std	Y+18, r19	; 0x12
    352c:	8a 89       	ldd	r24, Y+18	; 0x12
    352e:	88 23       	and	r24, r24
    3530:	41 f7       	brne	.-48     	; 0x3502 <main+0x2a>
	/*set portc as output----->for seven segment*/
	MDIO_Error_State_SetPortDirection(MDIO_PORTC,PORT_OUTPUT);
    3532:	82 e0       	ldi	r24, 0x02	; 2
    3534:	6f ef       	ldi	r22, 0xFF	; 255
    3536:	0e 94 29 0c 	call	0x1852	; 0x1852 <MDIO_Error_State_SetPortDirection>
	/*Keypad Initialization*/
	HKPD_VidInit();
    353a:	0e 94 2e 10 	call	0x205c	; 0x205c <HKPD_VidInit>
	/*CLCD initialization*/
	HCLCD_Vid4Bits_Init();
    353e:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <HCLCD_Vid4Bits_Init>
	while(1)
	{
		LOC_u8KeyPressed=HKPD_U8GetKeyPressed();
    3542:	0e 94 85 10 	call	0x210a	; 0x210a <HKPD_U8GetKeyPressed>
    3546:	89 83       	std	Y+1, r24	; 0x01
		if(LOC_u8KeyPressed !=NOT_PRESSED)
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	8f 3f       	cpi	r24, 0xFF	; 255
    354c:	d1 f3       	breq	.-12     	; 0x3542 <main+0x6a>
		{
			switch(LOC_u8KeyPressed)
    354e:	89 81       	ldd	r24, Y+1	; 0x01
    3550:	e8 2f       	mov	r30, r24
    3552:	f0 e0       	ldi	r31, 0x00	; 0
    3554:	fd 87       	std	Y+13, r31	; 0x0d
    3556:	ec 87       	std	Y+12, r30	; 0x0c
    3558:	2c 85       	ldd	r18, Y+12	; 0x0c
    355a:	3d 85       	ldd	r19, Y+13	; 0x0d
    355c:	24 33       	cpi	r18, 0x34	; 52
    355e:	31 05       	cpc	r19, r1
    3560:	09 f4       	brne	.+2      	; 0x3564 <main+0x8c>
    3562:	6c c0       	rjmp	.+216    	; 0x363c <main+0x164>
    3564:	8c 85       	ldd	r24, Y+12	; 0x0c
    3566:	9d 85       	ldd	r25, Y+13	; 0x0d
    3568:	85 33       	cpi	r24, 0x35	; 53
    356a:	91 05       	cpc	r25, r1
    356c:	f4 f4       	brge	.+60     	; 0x35aa <main+0xd2>
    356e:	ec 85       	ldd	r30, Y+12	; 0x0c
    3570:	fd 85       	ldd	r31, Y+13	; 0x0d
    3572:	e1 33       	cpi	r30, 0x31	; 49
    3574:	f1 05       	cpc	r31, r1
    3576:	09 f4       	brne	.+2      	; 0x357a <main+0xa2>
    3578:	46 c0       	rjmp	.+140    	; 0x3606 <main+0x12e>
    357a:	2c 85       	ldd	r18, Y+12	; 0x0c
    357c:	3d 85       	ldd	r19, Y+13	; 0x0d
    357e:	22 33       	cpi	r18, 0x32	; 50
    3580:	31 05       	cpc	r19, r1
    3582:	34 f4       	brge	.+12     	; 0x3590 <main+0xb8>
    3584:	8c 85       	ldd	r24, Y+12	; 0x0c
    3586:	9d 85       	ldd	r25, Y+13	; 0x0d
    3588:	80 33       	cpi	r24, 0x30	; 48
    358a:	91 05       	cpc	r25, r1
    358c:	99 f1       	breq	.+102    	; 0x35f4 <main+0x11c>
    358e:	d9 cf       	rjmp	.-78     	; 0x3542 <main+0x6a>
    3590:	ec 85       	ldd	r30, Y+12	; 0x0c
    3592:	fd 85       	ldd	r31, Y+13	; 0x0d
    3594:	e2 33       	cpi	r30, 0x32	; 50
    3596:	f1 05       	cpc	r31, r1
    3598:	09 f4       	brne	.+2      	; 0x359c <main+0xc4>
    359a:	3e c0       	rjmp	.+124    	; 0x3618 <main+0x140>
    359c:	2c 85       	ldd	r18, Y+12	; 0x0c
    359e:	3d 85       	ldd	r19, Y+13	; 0x0d
    35a0:	23 33       	cpi	r18, 0x33	; 51
    35a2:	31 05       	cpc	r19, r1
    35a4:	09 f4       	brne	.+2      	; 0x35a8 <main+0xd0>
    35a6:	41 c0       	rjmp	.+130    	; 0x362a <main+0x152>
    35a8:	cc cf       	rjmp	.-104    	; 0x3542 <main+0x6a>
    35aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    35ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    35ae:	87 33       	cpi	r24, 0x37	; 55
    35b0:	91 05       	cpc	r25, r1
    35b2:	09 f4       	brne	.+2      	; 0x35b6 <main+0xde>
    35b4:	5e c0       	rjmp	.+188    	; 0x3672 <main+0x19a>
    35b6:	ec 85       	ldd	r30, Y+12	; 0x0c
    35b8:	fd 85       	ldd	r31, Y+13	; 0x0d
    35ba:	e8 33       	cpi	r30, 0x38	; 56
    35bc:	f1 05       	cpc	r31, r1
    35be:	6c f4       	brge	.+26     	; 0x35da <main+0x102>
    35c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    35c2:	3d 85       	ldd	r19, Y+13	; 0x0d
    35c4:	25 33       	cpi	r18, 0x35	; 53
    35c6:	31 05       	cpc	r19, r1
    35c8:	09 f4       	brne	.+2      	; 0x35cc <main+0xf4>
    35ca:	41 c0       	rjmp	.+130    	; 0x364e <main+0x176>
    35cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    35ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    35d0:	86 33       	cpi	r24, 0x36	; 54
    35d2:	91 05       	cpc	r25, r1
    35d4:	09 f4       	brne	.+2      	; 0x35d8 <main+0x100>
    35d6:	44 c0       	rjmp	.+136    	; 0x3660 <main+0x188>
    35d8:	b4 cf       	rjmp	.-152    	; 0x3542 <main+0x6a>
    35da:	ec 85       	ldd	r30, Y+12	; 0x0c
    35dc:	fd 85       	ldd	r31, Y+13	; 0x0d
    35de:	e8 33       	cpi	r30, 0x38	; 56
    35e0:	f1 05       	cpc	r31, r1
    35e2:	09 f4       	brne	.+2      	; 0x35e6 <main+0x10e>
    35e4:	4f c0       	rjmp	.+158    	; 0x3684 <main+0x1ac>
    35e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    35e8:	3d 85       	ldd	r19, Y+13	; 0x0d
    35ea:	29 33       	cpi	r18, 0x39	; 57
    35ec:	31 05       	cpc	r19, r1
    35ee:	09 f4       	brne	.+2      	; 0x35f2 <main+0x11a>
    35f0:	52 c0       	rjmp	.+164    	; 0x3696 <main+0x1be>
    35f2:	a7 cf       	rjmp	.-178    	; 0x3542 <main+0x6a>
			{
			case'0':
				MDIO_Error_State_SetPortValue(MDIO_PORTC,ARR_7_Seg_Display[0]);
    35f4:	9a 81       	ldd	r25, Y+2	; 0x02
    35f6:	82 e0       	ldi	r24, 0x02	; 2
    35f8:	69 2f       	mov	r22, r25
    35fa:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <MDIO_Error_State_SetPortValue>
				HCLCD_VidSendChar_4Bits(LOC_u8KeyPressed);
    35fe:	89 81       	ldd	r24, Y+1	; 0x01
    3600:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <HCLCD_VidSendChar_4Bits>
    3604:	9e cf       	rjmp	.-196    	; 0x3542 <main+0x6a>
				break;
			case'1':
				MDIO_Error_State_SetPortValue(MDIO_PORTC,ARR_7_Seg_Display[1]);
    3606:	9b 81       	ldd	r25, Y+3	; 0x03
    3608:	82 e0       	ldi	r24, 0x02	; 2
    360a:	69 2f       	mov	r22, r25
    360c:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <MDIO_Error_State_SetPortValue>
				HCLCD_VidSendChar_4Bits(LOC_u8KeyPressed);
    3610:	89 81       	ldd	r24, Y+1	; 0x01
    3612:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <HCLCD_VidSendChar_4Bits>
    3616:	95 cf       	rjmp	.-214    	; 0x3542 <main+0x6a>
				break;
			case'2':
				MDIO_Error_State_SetPortValue(MDIO_PORTC,ARR_7_Seg_Display[2]);
    3618:	9c 81       	ldd	r25, Y+4	; 0x04
    361a:	82 e0       	ldi	r24, 0x02	; 2
    361c:	69 2f       	mov	r22, r25
    361e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <MDIO_Error_State_SetPortValue>
				HCLCD_VidSendChar_4Bits(LOC_u8KeyPressed);
    3622:	89 81       	ldd	r24, Y+1	; 0x01
    3624:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <HCLCD_VidSendChar_4Bits>
    3628:	8c cf       	rjmp	.-232    	; 0x3542 <main+0x6a>
				break;
			case'3':
				MDIO_Error_State_SetPortValue(MDIO_PORTC,ARR_7_Seg_Display[3]);
    362a:	9d 81       	ldd	r25, Y+5	; 0x05
    362c:	82 e0       	ldi	r24, 0x02	; 2
    362e:	69 2f       	mov	r22, r25
    3630:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <MDIO_Error_State_SetPortValue>
				HCLCD_VidSendChar_4Bits(LOC_u8KeyPressed);
    3634:	89 81       	ldd	r24, Y+1	; 0x01
    3636:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <HCLCD_VidSendChar_4Bits>
    363a:	83 cf       	rjmp	.-250    	; 0x3542 <main+0x6a>
				break;
			case'4':
				MDIO_Error_State_SetPortValue(MDIO_PORTC,ARR_7_Seg_Display[4]);
    363c:	9e 81       	ldd	r25, Y+6	; 0x06
    363e:	82 e0       	ldi	r24, 0x02	; 2
    3640:	69 2f       	mov	r22, r25
    3642:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <MDIO_Error_State_SetPortValue>
				HCLCD_VidSendChar_4Bits(LOC_u8KeyPressed);
    3646:	89 81       	ldd	r24, Y+1	; 0x01
    3648:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <HCLCD_VidSendChar_4Bits>
    364c:	7a cf       	rjmp	.-268    	; 0x3542 <main+0x6a>
				break;
			case'5':
				MDIO_Error_State_SetPortValue(MDIO_PORTC,ARR_7_Seg_Display[5]);
    364e:	9f 81       	ldd	r25, Y+7	; 0x07
    3650:	82 e0       	ldi	r24, 0x02	; 2
    3652:	69 2f       	mov	r22, r25
    3654:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <MDIO_Error_State_SetPortValue>
				HCLCD_VidSendChar_4Bits(LOC_u8KeyPressed);
    3658:	89 81       	ldd	r24, Y+1	; 0x01
    365a:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <HCLCD_VidSendChar_4Bits>
    365e:	71 cf       	rjmp	.-286    	; 0x3542 <main+0x6a>
				break;
			case'6':
				MDIO_Error_State_SetPortValue(MDIO_PORTC,ARR_7_Seg_Display[6]);
    3660:	98 85       	ldd	r25, Y+8	; 0x08
    3662:	82 e0       	ldi	r24, 0x02	; 2
    3664:	69 2f       	mov	r22, r25
    3666:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <MDIO_Error_State_SetPortValue>
				HCLCD_VidSendChar_4Bits(LOC_u8KeyPressed);
    366a:	89 81       	ldd	r24, Y+1	; 0x01
    366c:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <HCLCD_VidSendChar_4Bits>
    3670:	68 cf       	rjmp	.-304    	; 0x3542 <main+0x6a>
				break;
			case'7':
				MDIO_Error_State_SetPortValue(MDIO_PORTC,ARR_7_Seg_Display[7]);
    3672:	99 85       	ldd	r25, Y+9	; 0x09
    3674:	82 e0       	ldi	r24, 0x02	; 2
    3676:	69 2f       	mov	r22, r25
    3678:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <MDIO_Error_State_SetPortValue>
				HCLCD_VidSendChar_4Bits(LOC_u8KeyPressed);
    367c:	89 81       	ldd	r24, Y+1	; 0x01
    367e:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <HCLCD_VidSendChar_4Bits>
    3682:	5f cf       	rjmp	.-322    	; 0x3542 <main+0x6a>
				break;
			case'8':
				MDIO_Error_State_SetPortValue(MDIO_PORTC,ARR_7_Seg_Display[8]);
    3684:	9a 85       	ldd	r25, Y+10	; 0x0a
    3686:	82 e0       	ldi	r24, 0x02	; 2
    3688:	69 2f       	mov	r22, r25
    368a:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <MDIO_Error_State_SetPortValue>
				HCLCD_VidSendChar_4Bits(LOC_u8KeyPressed);
    368e:	89 81       	ldd	r24, Y+1	; 0x01
    3690:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <HCLCD_VidSendChar_4Bits>
    3694:	56 cf       	rjmp	.-340    	; 0x3542 <main+0x6a>
				break;
			case'9':
				MDIO_Error_State_SetPortValue(MDIO_PORTC,ARR_7_Seg_Display[9]);
    3696:	9b 85       	ldd	r25, Y+11	; 0x0b
    3698:	82 e0       	ldi	r24, 0x02	; 2
    369a:	69 2f       	mov	r22, r25
    369c:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <MDIO_Error_State_SetPortValue>
				HCLCD_VidSendChar_4Bits(LOC_u8KeyPressed);
    36a0:	89 81       	ldd	r24, Y+1	; 0x01
    36a2:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <HCLCD_VidSendChar_4Bits>
    36a6:	4d cf       	rjmp	.-358    	; 0x3542 <main+0x6a>

000036a8 <__mulsi3>:
    36a8:	62 9f       	mul	r22, r18
    36aa:	d0 01       	movw	r26, r0
    36ac:	73 9f       	mul	r23, r19
    36ae:	f0 01       	movw	r30, r0
    36b0:	82 9f       	mul	r24, r18
    36b2:	e0 0d       	add	r30, r0
    36b4:	f1 1d       	adc	r31, r1
    36b6:	64 9f       	mul	r22, r20
    36b8:	e0 0d       	add	r30, r0
    36ba:	f1 1d       	adc	r31, r1
    36bc:	92 9f       	mul	r25, r18
    36be:	f0 0d       	add	r31, r0
    36c0:	83 9f       	mul	r24, r19
    36c2:	f0 0d       	add	r31, r0
    36c4:	74 9f       	mul	r23, r20
    36c6:	f0 0d       	add	r31, r0
    36c8:	65 9f       	mul	r22, r21
    36ca:	f0 0d       	add	r31, r0
    36cc:	99 27       	eor	r25, r25
    36ce:	72 9f       	mul	r23, r18
    36d0:	b0 0d       	add	r27, r0
    36d2:	e1 1d       	adc	r30, r1
    36d4:	f9 1f       	adc	r31, r25
    36d6:	63 9f       	mul	r22, r19
    36d8:	b0 0d       	add	r27, r0
    36da:	e1 1d       	adc	r30, r1
    36dc:	f9 1f       	adc	r31, r25
    36de:	bd 01       	movw	r22, r26
    36e0:	cf 01       	movw	r24, r30
    36e2:	11 24       	eor	r1, r1
    36e4:	08 95       	ret

000036e6 <__udivmodsi4>:
    36e6:	a1 e2       	ldi	r26, 0x21	; 33
    36e8:	1a 2e       	mov	r1, r26
    36ea:	aa 1b       	sub	r26, r26
    36ec:	bb 1b       	sub	r27, r27
    36ee:	fd 01       	movw	r30, r26
    36f0:	0d c0       	rjmp	.+26     	; 0x370c <__udivmodsi4_ep>

000036f2 <__udivmodsi4_loop>:
    36f2:	aa 1f       	adc	r26, r26
    36f4:	bb 1f       	adc	r27, r27
    36f6:	ee 1f       	adc	r30, r30
    36f8:	ff 1f       	adc	r31, r31
    36fa:	a2 17       	cp	r26, r18
    36fc:	b3 07       	cpc	r27, r19
    36fe:	e4 07       	cpc	r30, r20
    3700:	f5 07       	cpc	r31, r21
    3702:	20 f0       	brcs	.+8      	; 0x370c <__udivmodsi4_ep>
    3704:	a2 1b       	sub	r26, r18
    3706:	b3 0b       	sbc	r27, r19
    3708:	e4 0b       	sbc	r30, r20
    370a:	f5 0b       	sbc	r31, r21

0000370c <__udivmodsi4_ep>:
    370c:	66 1f       	adc	r22, r22
    370e:	77 1f       	adc	r23, r23
    3710:	88 1f       	adc	r24, r24
    3712:	99 1f       	adc	r25, r25
    3714:	1a 94       	dec	r1
    3716:	69 f7       	brne	.-38     	; 0x36f2 <__udivmodsi4_loop>
    3718:	60 95       	com	r22
    371a:	70 95       	com	r23
    371c:	80 95       	com	r24
    371e:	90 95       	com	r25
    3720:	9b 01       	movw	r18, r22
    3722:	ac 01       	movw	r20, r24
    3724:	bd 01       	movw	r22, r26
    3726:	cf 01       	movw	r24, r30
    3728:	08 95       	ret

0000372a <__prologue_saves__>:
    372a:	2f 92       	push	r2
    372c:	3f 92       	push	r3
    372e:	4f 92       	push	r4
    3730:	5f 92       	push	r5
    3732:	6f 92       	push	r6
    3734:	7f 92       	push	r7
    3736:	8f 92       	push	r8
    3738:	9f 92       	push	r9
    373a:	af 92       	push	r10
    373c:	bf 92       	push	r11
    373e:	cf 92       	push	r12
    3740:	df 92       	push	r13
    3742:	ef 92       	push	r14
    3744:	ff 92       	push	r15
    3746:	0f 93       	push	r16
    3748:	1f 93       	push	r17
    374a:	cf 93       	push	r28
    374c:	df 93       	push	r29
    374e:	cd b7       	in	r28, 0x3d	; 61
    3750:	de b7       	in	r29, 0x3e	; 62
    3752:	ca 1b       	sub	r28, r26
    3754:	db 0b       	sbc	r29, r27
    3756:	0f b6       	in	r0, 0x3f	; 63
    3758:	f8 94       	cli
    375a:	de bf       	out	0x3e, r29	; 62
    375c:	0f be       	out	0x3f, r0	; 63
    375e:	cd bf       	out	0x3d, r28	; 61
    3760:	09 94       	ijmp

00003762 <__epilogue_restores__>:
    3762:	2a 88       	ldd	r2, Y+18	; 0x12
    3764:	39 88       	ldd	r3, Y+17	; 0x11
    3766:	48 88       	ldd	r4, Y+16	; 0x10
    3768:	5f 84       	ldd	r5, Y+15	; 0x0f
    376a:	6e 84       	ldd	r6, Y+14	; 0x0e
    376c:	7d 84       	ldd	r7, Y+13	; 0x0d
    376e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3770:	9b 84       	ldd	r9, Y+11	; 0x0b
    3772:	aa 84       	ldd	r10, Y+10	; 0x0a
    3774:	b9 84       	ldd	r11, Y+9	; 0x09
    3776:	c8 84       	ldd	r12, Y+8	; 0x08
    3778:	df 80       	ldd	r13, Y+7	; 0x07
    377a:	ee 80       	ldd	r14, Y+6	; 0x06
    377c:	fd 80       	ldd	r15, Y+5	; 0x05
    377e:	0c 81       	ldd	r16, Y+4	; 0x04
    3780:	1b 81       	ldd	r17, Y+3	; 0x03
    3782:	aa 81       	ldd	r26, Y+2	; 0x02
    3784:	b9 81       	ldd	r27, Y+1	; 0x01
    3786:	ce 0f       	add	r28, r30
    3788:	d1 1d       	adc	r29, r1
    378a:	0f b6       	in	r0, 0x3f	; 63
    378c:	f8 94       	cli
    378e:	de bf       	out	0x3e, r29	; 62
    3790:	0f be       	out	0x3f, r0	; 63
    3792:	cd bf       	out	0x3d, r28	; 61
    3794:	ed 01       	movw	r28, r26
    3796:	08 95       	ret

00003798 <_exit>:
    3798:	f8 94       	cli

0000379a <__stop_program>:
    379a:	ff cf       	rjmp	.-2      	; 0x379a <__stop_program>
